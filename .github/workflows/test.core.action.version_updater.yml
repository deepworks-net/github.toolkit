# .github/workflows/test.core.action.version_updater.yml
name: Test Core Action - Version Updater

on:
  pull_request:
    paths:
      - 'actions/core/version_updater/**'
      - '.github/workflows/core.action.version_updater.yml'
      - '.github/workflows/test.core.action.version_updater.yml'
  workflow_dispatch:  # Manual trigger for testing

jobs:
  test-yaml-update:
    name: Test YAML File Update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        
      - name: Create Test YAML
        run: |
          echo "version: 1.0.0" > test.yml
      
      - name: Test Version Updater
        id: updater
        uses: ./actions/core/version_updater
        with:
          version: 'v2.0.0'
          files: |
            "test.yml"
          strip_v_prefix: true
      
      - name: Verify Output
        run: |
          content=$(cat test.yml)
          if [[ "$content" != "version: 2.0.0" ]]; then
            echo "Expected 'version: 2.0.0', got '$content'"
            exit 1
          fi

  test-json-update:
    name: Test JSON File Update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        
      - name: Create Test JSON
        run: |
          echo '{"version": "1.0.0"}' > test.json
      
      - name: Test Version Updater
        uses: ./actions/core/version_updater
        with:
          version: 'v2.0.0'
          files: |
            "test.json"
          strip_v_prefix: true
      
      - name: Verify Output
        run: |
          content=$(cat test.json | jq -c '.')  # Compact the JSON
          expected='{"version":"2.0.0"}'
          if [[ "$content" != "$expected" ]]; then
            echo "Expected '$expected', got '$content'"
            exit 1
          fi

  test-multiple-files:
    name: Test Multiple Files Update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        
      - name: Create Test Files
        run: |
          echo "version: 1.0.0" > test1.yml
          echo '{"version": "1.0.0"}' > test2.json
      
      - name: Test Version Updater
        uses: ./actions/core/version_updater
        with:
          version: 'v2.0.0'
          files: |
            "test1.yml"
            "test2.json"
          strip_v_prefix: true
      
      - name: Verify Outputs
        run: |
            yml_content=$(cat test1.yml)
            json_content=$(cat test2.json | jq -c '.')
            expected_json='{"version":"2.0.0"}'
            if [[ "$yml_content" != "version: 2.0.0" ]] || \
                [[ "$json_content" != "$expected_json" ]]; then
                echo "Files not updated correctly"
                echo "YAML: $yml_content"
                echo "JSON: $json_content"
                exit 1
            fi    

  test-keep-v-prefix:
    name: Test Keep V Prefix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        
      - name: Create Test File
        run: |
          echo "version: v1.0.0" > test.yml
      
      - name: Test Version Updater
        uses: ./actions/core/version_updater
        with:
          version: 'v2.0.0'
          files: |
            "test.yml"
          strip_v_prefix: false
      
      - name: Verify Output
        run: |
          content=$(cat test.yml)
          if [[ "$content" != "version: v2.0.0" ]]; then
            echo "Expected 'version: v2.0.0', got '$content'"
            exit 1
          fi

  test-invalid-version:
    name: Test Invalid Version Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Test Invalid Version
        id: updater
        continue-on-error: true
        uses: ./actions/core/version_updater
        with:
          version: 'invalid'
          files: |
            "test.yml"
      
      - name: Verify Failure
        if: steps.updater.outcome == 'success'
        run: |
          echo "Expected action to fail with invalid version"
          exit 1

  test-missing-file:
    name: Test Missing File
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Test Missing File
        id: updater
        continue-on-error: true
        uses: ./actions/core/version_updater
        with:
          version: 'v1.0.0'
          files: |
            "nonexistent.yml"
      
      - name: Verify Output
        run: |
          if [[ "${{ steps.updater.outputs.files }}" != "[]" ]]; then
            echo "Expected empty files array, got: ${{ steps.updater.outputs.files }}"
            exit 1
          fi

  test-no-version-field:
    name: Test No Version Field
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Create Test File
        run: |
          echo "key: value" > test.yml
      
      - name: Test No Version Field
        id: updater
        continue-on-error: true
        uses: ./actions/core/version_updater
        with:
          version: 'v1.0.0'
          files: |
            "test.yml"
      
      - name: Verify Output
        run: |
          if [[ "${{ steps.updater.outputs.files }}" != "[]" ]]; then
            echo "Expected empty files array, got: ${{ steps.updater.outputs.files }}"
            exit 1
          fi

  test-output-format:
    name: Test Output Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Create Test Files
        run: |
          echo "version: 1.0.0" > test1.yml
          echo '{"version": "1.0.0"}' > test2.json
      
      - name: Test Output Format
        id: updater
        uses: ./actions/core/version_updater
        with:
          version: 'v2.0.0'
          files: |
            "test1.yml"
            "test2.json"
      
      - name: Verify Output Format
        run: |
            output='${{ steps.updater.outputs.files }}'
            # Check if output is valid JSON array
            if ! echo "$output" | jq -e . >/dev/null 2>&1; then
                echo "Invalid JSON array output: $output"
                exit 1
            fi
            # Check if contains both files
            if [[ $(echo "$output" | jq length) != 2 ]]; then
                echo "Expected 2 files in output, got: $output"
                exit 1
            fi
            # Verify specific files are present
            if ! echo "$output" | jq -e 'contains(["test1.yml"])' >/dev/null; then
                echo "Output missing test1.yml"
                exit 1
            fi
            if ! echo "$output" | jq -e 'contains(["test2.json"])' >/dev/null; then
                echo "Output missing test2.json"
                exit 1
            fi