name: 'Release Operations'
description: 'Perform Git release operations combining tag, branch, and commit actions'
author: 'Deepworks'
inputs:
  action:
    description: 'Release operation to perform (create, publish, update, delete)'
    required: true
  version:
    description: 'Version for the release (e.g., v1.0.0)'
    required: true
  target_branch:
    description: 'Target branch for the release'
    required: false
    default: 'main'
  release_branch:
    description: 'Name of the release branch to create'
    required: false
  message:
    description: 'Release message'
    required: false
  body:
    description: 'Release body content'
    required: false
  draft:
    description: 'Create as draft release'
    required: false
    default: 'false'
  prerelease:
    description: 'Mark as prerelease'
    required: false
    default: 'false'
  update_changelog:
    description: 'Whether to update the changelog'
    required: false
    default: 'true'
  tag_only:
    description: 'Only create a tag, not a GitHub release'
    required: false
    default: 'false'
  files:
    description: 'Files to include in the release (comma-separated)'
    required: false

outputs:
  release_id:
    description: 'ID of the created or updated release'
  tag_name:
    description: 'Name of the created tag'
  release_url:
    description: 'URL of the created or updated release'
  release_branch:
    description: 'Name of the release branch (if created)'
  result:
    description: 'Operation result (success/failure)'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Debug file structure
      shell: bash
      run: |
        echo "Working directory: $(pwd)"
        echo "Repository structure:"
        find ${{ github.workspace }} -name "action.yml" | sort
        echo "Contents of actions/composite/release_operations directory:"
        ls -la ${{ github.workspace }}/actions/composite/release_operations/
        echo "Content of action.yml file:"
        cat ${{ github.workspace }}/actions/composite/release_operations/action.yml | head -5
    
    - name: Set up Git identity
      shell: bash
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "github-actions@github.com"
    
    # Create release branch if specified
    - name: Create release branch
      if: ${{ inputs.action == 'create' && inputs.release_branch != '' }}
      uses: ${{ github.workspace }}/actions/core/branch_operations
      with:
        action: create
        branch_name: ${{ inputs.release_branch }}
        base_branch: ${{ inputs.target_branch }}
        remote: true
    
    # Debug environment
    - name: Debug environment
      shell: bash
      run: |
        echo "Current directory: $(pwd)"
        echo "Current Git tags:"
        git tag -l
        echo "Git status:"
        git status
        echo "Git configuration:"
        git config --global --list
    
    # Create tag directly for reliability
    - name: Create release tag
      if: ${{ inputs.action == 'create' || inputs.action == 'publish' }}
      id: create_tag
      shell: bash
      run: |
        # Check if tag exists
        if git tag -l | grep -q "${{ inputs.version }}"; then
          if [[ "${{ inputs.action == 'update' }}" == "true" ]]; then
            echo "Tag exists, using force option to recreate"
            FORCE_FLAG="-f"
          else
            echo "Tag ${{ inputs.version }} already exists and force is not enabled"
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          echo "Tag does not exist, creating new tag"
          FORCE_FLAG=""
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
        
        # Create the tag
        MESSAGE="${{ inputs.message || format('Release {0}', inputs.version) }}"
        echo "Creating tag with message: $MESSAGE"
        
        # Create annotated tag
        if git tag $FORCE_FLAG -a "${{ inputs.version }}" -m "$MESSAGE"; then
          echo "Successfully created tag ${{ inputs.version }}"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          echo "Failed to create tag ${{ inputs.version }}"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Show tags for debugging
        echo "Tags after operation:"
        git tag -l
    
    # Update changelog if requested
    - name: Update changelog
      if: ${{ inputs.action == 'create' && inputs.update_changelog == 'true' }}
      uses: ${{ github.workspace }}/actions/composite/update_changelog
      with:
        version: ${{ inputs.version }}
        target_branch: ${{ inputs.release_branch || inputs.target_branch }}
    
    # Commit changes if needed for changelog
    - name: Commit changelog changes
      if: ${{ inputs.action == 'create' && inputs.update_changelog == 'true' }}
      uses: ${{ github.workspace }}/actions/core/commit_operations
      with:
        action: create
        message: ${{ format('Update changelog for {0} release', inputs.version) }}
        files: CHANGELOG.md
    
    # Push changes to remote
    - name: Push changes
      if: ${{ inputs.action == 'create' && inputs.update_changelog == 'true' }}
      shell: bash
      run: git push
    
    # Create GitHub release
    - name: Create GitHub release
      if: ${{ (inputs.action == 'create' || inputs.action == 'publish') && inputs.tag_only != 'true' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ inputs.version }}
        release_name: ${{ inputs.message || format('Release {0}', inputs.version) }}
        body: ${{ inputs.body || '' }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
    
    # Set outputs
    - name: Set outputs
      id: set_outputs
      shell: bash
      run: |
        # Echo for debugging
        echo "Setting outputs..."
        
        # Always set result to success at this point (we'd have exited on failure)
        echo "result=success" >> $GITHUB_OUTPUT
        echo "tag_name=${{ inputs.version }}" >> $GITHUB_OUTPUT
        
        # Debug
        echo "result=success"
        echo "tag_name=${{ inputs.version }}"
        
        # Set release branch if created
        if [[ "${{ inputs.release_branch }}" != "" ]]; then
          echo "release_branch=${{ inputs.release_branch }}" >> $GITHUB_OUTPUT
          echo "release_branch=${{ inputs.release_branch }}"
        fi
        
        # Set release outputs if GitHub release was created
        if [[ "${{ steps.create_release.outputs.id }}" != "" ]]; then
          echo "release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
          echo "release_url=${{ steps.create_release.outputs.html_url }}" >> $GITHUB_OUTPUT
          
          echo "release_id=${{ steps.create_release.outputs.id }}"
          echo "release_url=${{ steps.create_release.outputs.html_url }}"
        fi
        
        # Debug - show output file if available
        if [ -f "$GITHUB_OUTPUT" ]; then
          echo "Contents of GITHUB_OUTPUT file:"
          cat $GITHUB_OUTPUT
        fi
        
branding:
  icon: 'tag'
  color: 'green'