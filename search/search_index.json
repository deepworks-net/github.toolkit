{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Toolkit","text":"<p>This repository contains a comprehensive toolkit for GitHub Actions automation, featuring a sophisticated FCM (Formal Conceptual Model) bridge system that generates actions from conceptual definitions. The toolkit implements the Loosely Coupled Modular Composition Pattern (LCMCP) and provides standardized approaches for git operations, version management, and release automation.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>For a comprehensive understanding of the toolkit architecture and components:</p> <ul> <li>Understanding Actions - Learn about Core and Composite Actions</li> <li>Understanding Workflows - How workflows orchestrate actions  </li> <li>Understanding FCM Bridge - The generation system behind actions</li> <li>Testing Framework - Comprehensive testing patterns and requirements</li> </ul>"},{"location":"#available-workflows","title":"Available Workflows","text":""},{"location":"#mkdocs-github-pages-workflow","title":"MkDocs GitHub Pages Workflow","text":"<p>View Documentation</p> <p>Automates the deployment of MkDocs documentation to GitHub Pages. This workflow:</p> <ul> <li>Copies repository files (README, CHANGELOG, LICENSE) to documentation</li> <li>Updates MkDocs navigation configuration</li> <li>Deploys to GitHub Pages</li> <li>Supports custom Python versions and file locations</li> </ul>"},{"location":"#create-github-release","title":"Create GitHub Release","text":"<p>View Documentation</p> <p>Automates the creation of GitHub releases. This workflow:</p> <ul> <li>Creates releases from version tags</li> <li>Supports prereleases and draft releases</li> <li>Allows custom release titles</li> <li>Can be triggered manually or by tags</li> </ul>"},{"location":"#update-changelog","title":"Update Changelog","text":"<p>View Documentation</p> <p>Automatically updates CHANGELOG.md when pull requests are merged. This workflow:</p> <ul> <li>Adds PR information to changelog</li> <li>Manages unreleased section</li> <li>Maintains consistent changelog format</li> <li>Runs on PR merge to develop branch</li> </ul>"},{"location":"#using-these-workflows","title":"Using These Workflows","text":"<p>To use these workflows in your repository:</p> <ol> <li> <p>Reference them in your workflow files:</p> <pre><code>jobs:\ndocs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre> </li> <li> <p>Configure with input parameters:</p> <pre><code>with:\nparameter: value\n</code></pre> </li> <li> <p>Provide any required secrets:</p> <pre><code>secrets:\ntoken: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> </li> </ol>"},{"location":"#best-practices","title":"Best Practices","text":"<p>When using these workflows:</p> <ol> <li>Always reference a specific tag/SHA instead of <code>main</code> for production use</li> <li>Test workflow changes in a feature branch first</li> <li>Monitor workflow runs for any issues</li> <li>Keep repository settings up to date with required permissions</li> </ol>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>Check individual workflow documentation for detailed configuration options</li> <li>Review workflow run logs for troubleshooting</li> <li>Open an issue if you encounter any problems</li> <li>Submit pull requests for improvements</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol> <p>See our Contributing Guidelines for more information.</p>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>\u26a0\ufe0f Documentation Warning: This page presents a high-level architectural vision that may not fully represent the current implementation. The concepts and diagrams require validation against the actual codebase. See Documentation Gaps.</p> <p>The GitHub Toolkit appears to employ an approach to automation that treats some capability definitions as source code for generating GitHub Actions. This overview attempts to document the observed patterns.</p>"},{"location":"architecture/#core-innovation-fcm-bridge-system","title":"Core Innovation: FCM Bridge System","text":"<p>The toolkit's foundation is the Functional Capability Model (FCM) Bridge System, which transforms how we build and maintain automation:</p> <pre><code>graph LR\n    A[FCM Source Files] --&gt; B[Bridge Generator]\n    B --&gt; C[GitHub Actions]\n    B --&gt; D[Sync Metadata]\n    C --&gt; E[Workflows]\n    E --&gt; F[Complete Solutions]</code></pre> <p>Traditional Approach: Manually create and maintain GitHub Actions Toolkit Approach: Define capabilities in FCM files, generate actions automatically</p>"},{"location":"architecture/#six-layer-architecture","title":"Six-Layer Architecture","text":"<p>The system organizes components into six distinct layers, each building upon the layer below:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     6. ECOSYSTEMS (Solutions)      \u2502 \u2190 Complete automation systems\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     5. ORGANISMS (Workflows)       \u2502 \u2190 GitHub workflow files\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \n\u2502     4. MOLECULES (Composites)      \u2502 \u2190 Multi-action orchestration\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     3. ATOMS (Core Actions)        \u2502 \u2190 Generated GitHub Actions\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     2. PARTICLES (Utilities)       \u2502 \u2190 Shared code and patterns\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     1. AXIOMS (Capabilities)       \u2502 \u2190 FCM source definitions\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#key-architectural-principles","title":"Key Architectural Principles","text":""},{"location":"architecture/#1-source-vs-generated-code","title":"1. Source vs Generated Code","text":"<ul> <li>FCM files are source code - edited by humans, version controlled</li> <li>Actions are compiled artifacts - never edited manually, always regenerated</li> <li>Clear separation prevents drift and ensures consistency</li> </ul>"},{"location":"architecture/#2-naming-conventions-as-visual-indicators","title":"2. Naming Conventions as Visual Indicators","text":"<ul> <li>Hyphenated names (<code>branch-operations</code>) = Generated from FCM</li> <li>Underscore names (<code>git_ops</code>) = Manually created</li> <li>Dot prefixes (<code>.flow.internal.yml</code>) = Private/repository-specific</li> </ul>"},{"location":"architecture/#3-self-describing-system","title":"3. Self-Describing System","text":"<ul> <li>Every generated action includes <code>.bridge-sync</code> metadata</li> <li>System can validate its own consistency</li> <li>Traceability from action back to source FCM</li> </ul>"},{"location":"architecture/#4-layered-responsibilities","title":"4. Layered Responsibilities","text":"<ul> <li>Each layer has specific, focused responsibilities  </li> <li>Lower layers are used by higher layers</li> <li>Changes propagate predictably through layers</li> </ul>"},{"location":"architecture/#practical-benefits","title":"Practical Benefits","text":""},{"location":"architecture/#for-users","title":"For Users","text":"<ul> <li>Consistency: All actions follow the same patterns</li> <li>Reliability: LCMCP pattern ensures robust Git operations</li> <li>Discoverability: Clear naming and organization</li> <li>Documentation: Self-documenting through FCM definitions</li> </ul>"},{"location":"architecture/#for-maintainers","title":"For Maintainers","text":"<ul> <li>Scalability: Add new capabilities without exponential complexity</li> <li>Quality: Generated code follows patterns automatically</li> <li>Maintenance: Update patterns once, apply everywhere</li> <li>Validation: Automated checks ensure system integrity</li> </ul>"},{"location":"architecture/#for-contributors","title":"For Contributors","text":"<ul> <li>Clear Guidelines: Architecture provides contribution framework</li> <li>Predictable Structure: Know where everything belongs</li> <li>Easy Extension: Add capabilities at appropriate layer</li> <li>Quality Assurance: Built-in validation and testing</li> </ul>"},{"location":"architecture/#real-world-example","title":"Real-World Example","text":"<p>Consider a complete release automation:</p> <ol> <li>Axiom: <code>git.tag-operations.fcm</code> defines tag management capability</li> <li>Atom: Generated <code>tag-operations</code> action implements the capability  </li> <li>Molecule: <code>release_operations</code> composite combines multiple atoms</li> <li>Organism: <code>prepare-release.yml</code> workflow orchestrates the process</li> <li>Ecosystem: Complete release management system for repositories</li> </ol> <p>Each layer adds value while maintaining clear boundaries and responsibilities.</p>"},{"location":"architecture/#getting-started","title":"Getting Started","text":"<ol> <li>Understand the Concepts: Read Core Concepts</li> <li>Learn the Patterns: Study the User Guide </li> <li>Explore Implementation: Check Reference documentation</li> <li>Dive Deep: Review detailed Architecture documentation</li> </ol>"},{"location":"architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Core Concepts - Detailed understanding of key concepts</li> <li>User Guide - Practical implementation guidance</li> <li>Architecture - Deep technical architecture details</li> <li>Development - Contributing to the system</li> </ul> <p>The GitHub Toolkit's architecture represents a new paradigm in automation - one that scales, maintains quality, and evolves gracefully with changing requirements.</p>"},{"location":"getting-started/","title":"Getting Started with Deepworks Actions","text":"<p>This guide will help you understand and implement Deepworks GitHub Actions workflows in your repositories.</p>"},{"location":"getting-started/#architecture-overview","title":"Architecture Overview","text":"<p>Deepworks Actions use a six-layer FCM architecture with a bridge system:</p> <ul> <li>Axioms: Core capabilities defined as Formal Conceptual Models</li> <li>Generated Actions: GitHub-compatible interfaces automatically generated from axioms</li> <li>Bridge System: Ensures consistency between pure definitions and GitHub requirements</li> </ul>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>Deepworks Actions provide a suite of reusable workflows for:</p> <ul> <li>Documentation management with MkDocs</li> <li>Release management and versioning</li> <li>Changelog automation</li> <li>Repository standardization</li> <li>Git operations (branches, tags, commits)</li> <li>Version calculation and updating</li> </ul>"},{"location":"getting-started/#core-workflows","title":"Core Workflows","text":""},{"location":"getting-started/#mkdocs-github-pages","title":"MkDocs GitHub Pages","text":"<p>Handles documentation deployment:</p> <pre><code>name: Documentation\njobs:\n  docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre>"},{"location":"getting-started/#release-management","title":"Release Management","text":"<p>Manages releases and versioning:</p> <pre><code>name: Release\njobs:\n  release:\n    uses: deepworks-net/github.actions/.github/workflows/release-drafter.yml@main\n</code></pre>"},{"location":"getting-started/#changelog-updates","title":"Changelog Updates","text":"<p>Automates changelog maintenance:</p> <pre><code>name: Changelog\njobs:\n  changelog:\n    uses: deepworks-net/github.actions/.github/workflows/update-changelog.yml@main\n</code></pre>"},{"location":"getting-started/#workflow-integration-map","title":"Workflow Integration Map","text":"<pre><code>graph TD\n    A[New PR] --&gt; B{Merged to Develop}\n    B --&gt; C[Update Changelog]\n    B --&gt; D[Update Draft Release]\n    C --&gt; E[Prepare Release]\n    D --&gt; E\n    E --&gt; F[Create Release PR]\n    F --&gt; G[Merge to Main]\n    G --&gt; H[Publish Release]</code></pre>"},{"location":"getting-started/#setup-instructions","title":"Setup Instructions","text":""},{"location":"getting-started/#using-generated-actions","title":"Using Generated Actions","text":"<ol> <li>Repository Configuration</li> </ol> <pre><code># .github/workflows/docs.yml\nname: Documentation\non:\n  push:\n    branches:\n      - main\n\njobs:\n  docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre> <ol> <li>Using Core Actions</li> </ol> <pre><code># Using generated tag operations\n- uses: deepworks-net/github.actions/actions/core/tag-operations@main\n  with:\n    action: create\n    tag_name: v1.0.0\n    message: \"Release version 1.0.0\"\n</code></pre> <ol> <li>Required Files</li> <li><code>mkdocs.yml</code> for documentation</li> <li><code>CHANGELOG.md</code> for release notes</li> <li> <p><code>.github/release-drafter.yml</code> for release configuration</p> </li> <li> <p>Repository Settings</p> </li> <li>Enable GitHub Pages</li> <li>Set appropriate branch protections</li> <li>Configure required status checks</li> </ol>"},{"location":"getting-started/#working-with-fcm-architecture","title":"Working with FCM Architecture","text":"<ol> <li>Understanding Axioms: Browse <code>axioms/</code> to see available capabilities</li> <li>Never Edit Actions Directly: All actions in <code>actions/</code> are generated</li> <li>Modify Through FCMs: Edit capability definitions in <code>axioms/</code> directory</li> <li>Regenerate When Needed: Use bridge tools to update generated actions</li> </ol>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#documentation-updates","title":"Documentation Updates","text":"<ol> <li>Make changes to docs</li> <li>Push to main</li> <li>Workflow automatically deploys</li> </ol>"},{"location":"getting-started/#release-process","title":"Release Process","text":"<ol> <li>Create changes in feature branch</li> <li>Merge PR to develop</li> <li>Changelog updates automatically</li> <li>Draft release updates</li> <li>Prepare release when ready</li> <li>Merge release PR</li> <li>Final release publishes</li> </ol>"},{"location":"getting-started/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/#custom-mkdocs-settings","title":"Custom MkDocs Settings","text":"<pre><code>jobs:\n  docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n    with:\n      python-version: '3.11'\n      requirements-file: 'docs/requirements.txt'\n</code></pre>"},{"location":"getting-started/#release-configuration","title":"Release Configuration","text":"<pre><code>jobs:\n  release:\n    uses: deepworks-net/github.actions/.github/workflows/release-drafter.yml@main\n    with:\n      tag-name: 'v1.0.0'\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Review the Release Process Guide</li> <li>Check Configuration Guide</li> <li>See Development Guide</li> <li>Browse Examples</li> </ul>"},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<ol> <li>Documentation Not Deploying</li> <li>Check GitHub Pages settings</li> <li>Verify mkdocs.yml configuration</li> <li> <p>Review workflow permissions</p> </li> <li> <p>Release Draft Not Updating</p> </li> <li>Check release-drafter.yml configuration</li> <li>Verify branch names</li> <li> <p>Review GitHub token permissions</p> </li> <li> <p>Changelog Not Updating</p> </li> <li>Ensure PR merged to correct branch</li> <li>Check file paths</li> <li>Verify workflow permissions</li> </ol>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue on GitHub</li> <li>Check existing documentation</li> <li>Review workflow run logs</li> </ul>"},{"location":"actions/","title":"Actions Overview","text":""},{"location":"actions/#architecture","title":"Architecture","text":"<p>Our GitHub Actions toolkit follows a layered architecture that promotes reusability, maintainability, and clear separation of concerns. The architecture implements the Loosely Coupled Modular Composition Pattern (LCMCP).</p> <p>\ud83d\udcd6 For comprehensive documentation: Understanding Actions Guide</p>"},{"location":"actions/#core-actions","title":"Core Actions","text":"<ul> <li>Atomic, self-contained operations</li> <li>Single responsibility principle</li> <li>Highly reusable</li> <li>Docker-based execution</li> <li>Generated from FCM definitions</li> <li>Learn more about Core Actions</li> </ul>"},{"location":"actions/#composite-actions","title":"Composite Actions","text":"<ul> <li>Combine core actions</li> <li>Add workflow-specific logic</li> <li>Higher-level operations</li> <li>Business process orchestration</li> <li>Learn more about Composite Actions</li> </ul>"},{"location":"actions/#directory-structure","title":"Directory Structure","text":"<pre><code>actions/\n\u251c\u2500\u2500 core/                  # Atomic operations\n\u2502   \u251c\u2500\u2500 branch_operations/\n\u2502   \u251c\u2500\u2500 commit_operations/\n\u2502   \u251c\u2500\u2500 tag_operations/\n\u2502   \u251c\u2500\u2500 version_calculator/\n\u2502   \u2514\u2500\u2500 version_updater/\n\u251c\u2500\u2500 composite/            # Combined operations\n\u2502   \u251c\u2500\u2500 release_operations/\n\u2502   \u2514\u2500\u2500 update_changelog/\n\u2514\u2500\u2500 shared/               # Shared utilities\n    \u2514\u2500\u2500 git_utils/        # Common Git functions\n</code></pre>"},{"location":"actions/#usage-patterns","title":"Usage Patterns","text":""},{"location":"actions/#using-core-actions","title":"Using Core Actions","text":"<pre><code>steps:\n  - name: Calculate Version\n    uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n    with:\n      default_version: 'v0.1.0'\n</code></pre>"},{"location":"actions/#using-composite-actions","title":"Using Composite Actions","text":"<pre><code>steps:\n  - name: Update Changelog\n    uses: deepworks-net/github.toolkit/actions/composite/update_changelog@v1\n    with:\n      content: ${{ steps.notes.outputs.content }}\n</code></pre>"},{"location":"actions/#standards","title":"Standards","text":""},{"location":"actions/#docker-configuration","title":"Docker Configuration","text":"<ul> <li>Standard base image (python:3.9-slim)</li> <li>Consistent dependency management</li> <li>Clear entrypoint configuration</li> </ul>"},{"location":"actions/#corecomposite-pattern","title":"Core/Composite Pattern","text":"<ul> <li>Atomic core actions with single responsibilities</li> <li>Shared utilities for common functions</li> <li>Composite actions that combine core actions</li> <li>Clear separation of concerns</li> </ul>"},{"location":"actions/#testing","title":"Testing","text":"<ul> <li>Comprehensive test workflows</li> <li>Standard test structure</li> <li>Clear naming conventions</li> <li>Unit tests for atomic functions</li> <li>Integration tests for real-world scenarios</li> </ul>"},{"location":"actions/#documentation","title":"Documentation","text":"<ul> <li>Complete API documentation</li> <li>Usage examples</li> <li>Error handling guidance</li> <li>Migration guides for new patterns</li> </ul>"},{"location":"actions/#available-actions","title":"Available Actions","text":""},{"location":"actions/#core","title":"Core","text":"<ul> <li>Core Actions<ul> <li>Branch Operations</li> <li>Commit Operations</li> <li>Manage Release</li> <li>Tag Operations</li> <li>Version Calculator</li> <li>Version Updater</li> </ul> </li> </ul>"},{"location":"actions/#composite","title":"Composite","text":"<ul> <li>Composite Actions<ul> <li>Release Operations</li> <li>Update Changelog</li> </ul> </li> </ul>"},{"location":"actions/#shared-utilities","title":"Shared Utilities","text":"<ul> <li>Git Utilities - Common git operation utilities</li> </ul>"},{"location":"actions/#fcm-bridge-system","title":"FCM Bridge System","text":"<p>Many Core Actions are automatically generated from Formal Conceptual Models (FCMs) using the bridge system:</p> <ul> <li>FCM Definitions: Located in <code>axioms/</code> directory</li> <li>Generated Actions: Automatically created in <code>actions/core/</code></li> <li>Bridge System: Maintains synchronization between FCMs and actions</li> </ul> <p>\ud83d\udcd6 Learn more: Understanding FCM Bridge Guide</p>"},{"location":"actions/composite/","title":"Composite Actions","text":""},{"location":"actions/composite/release_operations/","title":"Macro Rendering Error","text":"<p>File: <code>actions/composite/release_operations/index.md</code></p> <p>UndefinedError: 'github' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 699, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 126, in top-level template code\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'github' is undefined\n</code></pre>"},{"location":"actions/composite/update_changelog/","title":"Changelog Update Action","text":"<p>Synchronizes the repository's <code>CHANGELOG.md</code> with content from the draft release, ensuring an \"Unreleased\" section reflects all recent changes and maintains consistent formatting.</p>"},{"location":"actions/composite/update_changelog/#usage","title":"Usage","text":"<pre><code>steps:\n  - name: Update Changelog\n    uses: ./actions/changelog_update\n    with:\n      github-token: ${{ secrets.GITHUB_TOKEN }}\n      version: ${{ steps.version.outputs.next_version }}\n</code></pre>"},{"location":"actions/composite/update_changelog/#inputs","title":"Inputs","text":"Input Description Required Default <code>github-token</code> GitHub token for API access Yes N/A <code>version</code> Version number to use in the unreleased section Yes N/A"},{"location":"actions/composite/update_changelog/#functionality","title":"Functionality","text":""},{"location":"actions/composite/update_changelog/#draft-release-content","title":"Draft Release Content","text":"<p>This action retrieves draft release details via the GitHub API:</p> <ol> <li>Identifies the draft release.</li> <li>Extracts PR entries.</li> <li>Strips footer content.</li> </ol>"},{"location":"actions/composite/update_changelog/#changelog-format","title":"Changelog Format","text":"<p>Follows a consistent structure:</p> <pre><code># Repository Changelog\n\n## **MM/DD/YYYY - vX.Y.Z Unreleased**\n- PR #123: Feature description\n- PR #124: Another change\n\n## **[(MM/DD/YYYY) - vX.Y.Z](link-to-release)**\n- Previous release content\n</code></pre>"},{"location":"actions/composite/update_changelog/#processing-steps","title":"Processing Steps","text":"<ol> <li>Fetches draft release content.</li> <li>Updates or creates the \"Unreleased\" section with:</li> <li>Current date</li> <li>Provided version number</li> <li>Draft release content.</li> <li>Preserves all previous releases.</li> <li>Maintains formatting consistency.</li> </ol>"},{"location":"actions/composite/update_changelog/#implementation-details","title":"Implementation Details","text":""},{"location":"actions/composite/update_changelog/#environment-setup","title":"Environment Setup","text":"<ul> <li>Configures Git in container environments.</li> <li>Installs required tools (e.g., GitHub CLI).</li> <li>Prepares workspace access.</li> </ul>"},{"location":"actions/composite/update_changelog/#git-operations","title":"Git Operations","text":"<p>Handles:</p> <ul> <li>Git configuration.</li> <li>Committing changes.</li> <li>Pushing to a staging branch.</li> </ul>"},{"location":"actions/composite/update_changelog/#error-handling","title":"Error Handling","text":"<p>Provides clear feedback for:</p> <ol> <li>Missing GitHub token.</li> <li>API request failures.</li> <li>File operation issues.</li> <li>Git command failures.</li> </ol>"},{"location":"actions/composite/update_changelog/#example-workflows","title":"Example Workflows","text":""},{"location":"actions/composite/update_changelog/#basic-usage-with-version-calculation","title":"Basic Usage with Version Calculation","text":"<pre><code>jobs:\n  update-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          ref: staging\n          fetch-depth: 0\n\n      - name: Calculate Version\n        uses: ./actions/version_calculation\n        id: version\n\n      - name: Update Changelog\n        uses: ./actions/changelog_update\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ steps.version.outputs.next_version }}\n</code></pre>"},{"location":"actions/composite/update_changelog/#manual-version-specification","title":"Manual Version Specification","text":"<pre><code>steps:\n  - name: Update Changelog\n    uses: ./actions/changelog_update\n    with:\n      github-token: ${{ secrets.GITHUB_TOKEN }}\n      version: 'v1.0.0'\n</code></pre>"},{"location":"actions/composite/update_changelog/#requirements","title":"Requirements","text":"<ol> <li> <p>Repository must include:</p> <ul> <li><code>CHANGELOG.md</code> in the root directory.</li> <li>Draft release for content sourcing.</li> <li>Proper GitHub token permissions.</li> </ul> </li> <li> <p>Environment must have:</p> <ul> <li>Git.</li> <li>GitHub CLI.</li> <li>Python 3.9+.</li> </ul> </li> </ol>"},{"location":"actions/composite/update_changelog/#files","title":"Files","text":""},{"location":"actions/composite/update_changelog/#actionyml","title":"<code>action.yml</code>","text":"<p>Defines the action interface:</p> <ul> <li>Input parameters.</li> <li>Environment configuration.</li> <li>Docker container setup.</li> </ul>"},{"location":"actions/composite/update_changelog/#dockerfile","title":"<code>Dockerfile</code>","text":"<p>Configures the container with:</p> <ul> <li>Python runtime.</li> <li>Git installation.</li> <li>GitHub CLI.</li> <li>Necessary environment setups.</li> </ul>"},{"location":"actions/composite/update_changelog/#update_changelogpy","title":"<code>update_changelog.py</code>","text":"<p>Implements core logic:</p> <ul> <li>Fetches draft release content.</li> <li>Parses and updates the changelog.</li> <li>Manages Git operations.</li> <li>Handles errors.</li> </ul>"},{"location":"actions/composite/update_changelog/#error-cases","title":"Error Cases","text":"<p>The action accounts for several potential issues:</p> <ol> <li> <p>Missing Draft Release</p> <ul> <li>Outputs a clear error message.</li> <li>Returns a non-zero exit code.</li> </ul> </li> <li> <p>GitHub API Issues</p> <ul> <li>Validates tokens.</li> <li>Handles request failures or permission errors.</li> </ul> </li> <li> <p>File Operations</p> <ul> <li>Detects missing changelog.</li> <li>Handles write permissions or format inconsistencies.</li> </ul> </li> <li> <p>Git Operations</p> <ul> <li>Resolves configuration or push errors.</li> <li>Handles permission issues.</li> </ul> </li> </ol>"},{"location":"actions/composite/update_changelog/#future-improvements","title":"Future Improvements","text":"<p>Possible enhancements:</p> <ol> <li>Support custom changelog formats.</li> <li>Handle multiple changelog files.</li> <li>Categorize release notes.</li> <li>Automate version bumping.</li> <li>Customize commit messages.</li> </ol>"},{"location":"actions/composite/update_changelog/#integration-points","title":"Integration Points","text":"<p>Designed to integrate with:</p> <ul> <li>Version calculation actions.</li> <li>Release preparation workflows.</li> <li>GitHub release drafts.</li> <li>Branch protection rules.</li> </ul>"},{"location":"actions/composite/update_changelog/#contributing","title":"Contributing","text":"<p>To contribute:</p> <ol> <li>Update the Python script for logic changes.</li> <li>Test with various changelog states.</li> <li>Verify formatting consistency.</li> <li>Submit a PR for review.</li> </ol>"},{"location":"actions/core/","title":"Core Action Structure","text":"<p>This document outlines the standard structure and components required for a core action in the GitHub toolkit.</p>"},{"location":"actions/core/#directory-structure","title":"Directory Structure","text":"<pre><code>actions/core/&lt;action_name&gt;/              # Action root directory\n\u251c\u2500\u2500 action.yml                          # Action metadata and interface\n\u251c\u2500\u2500 Dockerfile                          # Standardized container setup\n\u251c\u2500\u2500 main.py                            # Primary action logic\n\u251c\u2500\u2500 requirements.txt                    # Action dependencies (optional)\n\u2514\u2500\u2500 README.md                          # Action-specific documentation\n\n.github/workflows/\n\u251c\u2500\u2500 core.action.&lt;action_name&gt;.yml       # Reusable workflow wrapper\n\u2514\u2500\u2500 test.core.action.&lt;action_name&gt;.yml  # Test workflow\n\ndocs/\n\u251c\u2500\u2500 actions/core/&lt;action_name&gt;/\n\u2502   \u2514\u2500\u2500 index.md                       # Action usage documentation\n\u2514\u2500\u2500 workflows/\n    \u2514\u2500\u2500 &lt;action_name&gt;.md               # Workflow usage documentation\n</code></pre>"},{"location":"actions/core/#component-specifications","title":"Component Specifications","text":""},{"location":"actions/core/#1-actionyml","title":"1. action.yml","text":"<pre><code>name: \"Action Name\"\ndescription: \"Clear, concise description of action purpose\"\nauthor: \"Deepworks\"\n\ninputs:\n  input_name:\n    description: \"Clear description of input\"\n    required: false\n    default: \"default_value\"\n\noutputs:\n  output_name:\n    description: \"Clear description of output\"\n\nruns:\n  using: \"docker\"\n  image: \"Dockerfile\"\n\nbranding:\n  icon: \"appropriate-icon\"\n  color: \"appropriate-color\"\n</code></pre>"},{"location":"actions/core/#2-dockerfile","title":"2. Dockerfile","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /action\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y git &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Configure git for workspace\nRUN git config --global --add safe.directory /github/workspace\n\n# Install Python dependencies (If present)\nCOPY requirements.txt /action/\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy action files\nCOPY *.py /action/\nCOPY action.yml /action/\n\nENTRYPOINT [\"python\", \"/action/main.py\"]\n</code></pre>"},{"location":"actions/core/#3-mainpy","title":"3. main.py","text":"<pre><code>#!/usr/bin/env python3\n\nimport os\nimport sys\n\ndef validate_inputs():\n    \"\"\"Validate all action inputs.\"\"\"\n    pass\n\ndef main():\n    \"\"\"Main action logic.\"\"\"\n    # Get inputs with defaults\n    inputs = {\n        'input_name': os.environ.get('INPUT_INPUT_NAME', 'default')\n    }\n\n    # Validate inputs\n    validate_inputs(inputs)\n\n    # Process action\n    outputs = {\n        'output_name': 'value'\n    }\n\n    # Set outputs for GitHub Actions\n    with open(os.environ['GITHUB_OUTPUT'], 'a') as f:\n        for key, value in outputs.items():\n            f.write(f\"{key}={value}\\n\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"actions/core/#4-reusable-workflow-coreactionyml","title":"4. Reusable Workflow (core.action..yml) <pre><code>name: Core (Atomic) Action - Action Name\n\non:\n  workflow_dispatch:\n  workflow_call:\n    inputs:\n      input_name:\n        type: string\n        required: false\n        default: 'default_value'\n    outputs:\n      output_name:\n        description: \"Output description\"\n        value: ${{ jobs.action-job.outputs.output_name }}\n\njobs:\n  action-job:\n    runs-on: ubuntu-latest\n    outputs:\n      output_name: ${{ steps.action-step.outputs.output_name }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Run Action\n        id: action-step\n        uses: deepworks-net/github.toolkit/actions/core/&lt;action_name&gt;@v1\n        with:\n          input_name: ${{ inputs.input_name }}\n</code></pre>","text":""},{"location":"actions/core/#5-test-workflow-testcoreactionyml","title":"5. Test Workflow (test.core.action..yml) <pre><code>name: Test Core Action - Action Name\n\non:\n  pull_request:\n    paths:\n      - 'actions/core/&lt;action_name&gt;/**'\n      - '.github/workflows/core.action.&lt;action_name&gt;.yml'\n      - '.github/workflows/test.core.action.&lt;action_name&gt;.yml'\n  workflow_dispatch:\n\njobs:\n  test-basic:\n    name: Test Basic Functionality\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Test Action\n        id: action\n        uses: ./actions/core/&lt;action_name&gt;\n\n      - name: Verify Output Existence\n        run: |\n          if [[ -z \"${{ steps.action.outputs.output_name }}\" ]]; then\n            echo \"Missing required output\"\n            exit 1\n          fi\n\n      - name: Verify Output Value\n        run: |\n          if [[ \"${{ steps.action.outputs.output_name }}\" != \"expected_value\" ]]; then\n            echo \"Expected 'expected_value', got '${{ steps.action.outputs.output_name }}'\"\n            exit 1\n          fi\n\n  test-error-cases:\n    # Add error case tests\n</code></pre>","text":""},{"location":"actions/core/#6-documentation-structure","title":"6. Documentation Structure","text":""},{"location":"actions/core/#action-documentation-indexmd","title":"Action Documentation (index.md)","text":"<pre><code># Core Action: Name\n\n## Overview\nClear description of action purpose and functionality\n\n## Usage\n```yaml\nExample usage code\n```\n\n## Inputs\nInput documentation table\n\n## Outputs\nOutput documentation table\n\n## Behavior Matrix\nClear matrix of input/output combinations\n\n## Example Use Cases\nReal-world examples\n\n## Error Handling\nDocumentation of error cases and handling\n</code></pre>"},{"location":"actions/core/#workflow-documentation-md","title":"Workflow Documentation (.md) <pre><code># Action Name Workflow\n\n## Overview\nDescription of workflow\n\n## Usage\n```yaml\nExample workflow usage\n```\n\n## Inputs/Outputs\nClear documentation of workflow interface\n\n## Behavior\nDetailed behavior documentation\n\n## Implementation Examples\n\nReal-world workflow usage examples\n</code></pre>","text":""},{"location":"actions/core/#implementation-requirements","title":"Implementation Requirements","text":"<ol> <li> <p>Input Validation</p> <ul> <li>All inputs must be validated</li> <li>Clear error messages for invalid inputs</li> <li>Sensible defaults where possible</li> </ul> </li> <li> <p>Output Handling</p> <ul> <li>All outputs must be documented</li> <li>Use GITHUB_OUTPUT environment file</li> <li>Consistent output format</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Clear error messages</li> <li>Appropriate exit codes</li> <li>Comprehensive error documentation</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Test basic functionality</li> <li>Test all error cases</li> <li>Test edge cases</li> <li>Verify all outputs</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Clear usage examples</li> <li>Complete behavior documentation</li> <li>Error case documentation</li> <li>Real-world examples</li> </ul> </li> </ol>"},{"location":"actions/core/branch_operations/","title":"Core Action: Branch Operations","text":""},{"location":"actions/core/branch_operations/#overview","title":"Overview","text":"<p>The Branch Operations action is a core (atomic) action that provides a complete interface for managing Git branches in GitHub Actions workflows. It handles creation, deletion, checkout, merging, and listing of branches with robust error handling.</p>"},{"location":"actions/core/branch_operations/#usage","title":"Usage","text":"<pre><code>- name: Create Feature Branch\n  uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n  with:\n    action: create\n    branch_name: feature/my-feature\n    base_branch: develop\n    remote: true\n</code></pre>"},{"location":"actions/core/branch_operations/#inputs","title":"Inputs","text":"Input Description Required Default <code>action</code> Branch operation to perform (create, delete, list, checkout, merge, push) Yes N/A <code>branch_name</code> Name of the branch to operate on No* N/A <code>base_branch</code> Base branch for creating or merging No <code>main</code> <code>force</code> Force operation (used with delete, checkout, or merge) No <code>false</code> <code>message</code> Commit message for merge operations No N/A <code>pattern</code> Pattern for listing branches (e.g. \"feature/*\") No N/A <code>remote</code> Include remote operations (push/delete remote branch) No <code>false</code> <p>*Required for all actions except 'list'</p>"},{"location":"actions/core/branch_operations/#outputs","title":"Outputs","text":"Output Description <code>branches</code> Comma-separated list of branches (when using list action) <code>result</code> Operation result (success/failure) <code>current_branch</code> Current branch after operation"},{"location":"actions/core/branch_operations/#behavior-matrix","title":"Behavior Matrix","text":""},{"location":"actions/core/branch_operations/#create-operation","title":"Create Operation","text":"<ul> <li>Creates a new branch from specified base branch</li> <li>Pulls latest changes from base branch first</li> <li>Optionally pushes to remote if <code>remote: true</code></li> <li>Sets current_branch to the newly created branch</li> </ul>"},{"location":"actions/core/branch_operations/#delete-operation","title":"Delete Operation","text":"<ul> <li>Deletes the specified branch</li> <li>Optionally deletes remote branch if <code>remote: true</code></li> <li>Automatically switches to another branch if deleting current</li> <li>Supports force delete with <code>force: true</code></li> </ul>"},{"location":"actions/core/branch_operations/#checkout-operation","title":"Checkout Operation","text":"<ul> <li>Checks out the specified branch</li> <li>Supports force checkout with <code>force: true</code> to discard local changes</li> <li>Sets current_branch to the checked out branch</li> </ul>"},{"location":"actions/core/branch_operations/#merge-operation","title":"Merge Operation","text":"<ul> <li>Merges specified branch into current or base branch</li> <li>Supports custom commit message with <code>message</code></li> <li>Supports force merge with <code>force: true</code> to automatically resolve conflicts</li> <li>Sets current_branch to branch being merged into</li> </ul>"},{"location":"actions/core/branch_operations/#list-operation","title":"List Operation","text":"<ul> <li>Lists branches matching optional pattern</li> <li>Includes remote branches if <code>remote: true</code></li> <li>Returns branches as comma-separated list in output</li> </ul>"},{"location":"actions/core/branch_operations/#push-operation","title":"Push Operation","text":"<ul> <li>Pushes branch to remote</li> <li>Supports force push with <code>force: true</code></li> <li>Defaults to current branch if branch_name not specified</li> </ul>"},{"location":"actions/core/branch_operations/#error-cases","title":"Error Cases","text":"<p>The action will fail with clear error messages in these cases:</p> <ol> <li>Invalid Action</li> <li> <p>Action parameter is missing or not one of: create, delete, list, checkout, merge, push</p> </li> <li> <p>Missing Branch Name</p> </li> <li> <p>Branch name not provided for operations that require it</p> </li> <li> <p>Git Errors</p> </li> <li>Branch already exists (when creating)</li> <li>Branch doesn't exist (when deleting, checking out, merging)</li> <li> <p>Merge conflicts (when not using force)</p> </li> <li> <p>Remote Operation Failures</p> </li> <li>Remote push/delete errors</li> <li>Authentication issues</li> <li>Network problems</li> </ol>"},{"location":"actions/core/branch_operations/#examples","title":"Examples","text":""},{"location":"actions/core/branch_operations/#create-and-push-feature-branch","title":"Create and Push Feature Branch","text":"<pre><code>- name: Create Feature Branch\n  uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n  with:\n    action: create\n    branch_name: feature/my-feature\n    base_branch: develop\n    remote: true\n</code></pre>"},{"location":"actions/core/branch_operations/#list-feature-branches","title":"List Feature Branches","text":"<pre><code>- name: List Feature Branches\n  id: list-branches\n  uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n  with:\n    action: list\n    pattern: 'feature/*'\n\n- name: Show Branches\n  run: echo \"Found branches: ${{ steps.list-branches.outputs.branches }}\"\n</code></pre>"},{"location":"actions/core/branch_operations/#merge-and-delete-branch","title":"Merge and Delete Branch","text":"<pre><code>- name: Merge Feature Branch\n  uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n  with:\n    action: merge\n    branch_name: feature/completed-feature\n    base_branch: main\n    message: \"Merge feature branch into main\"\n\n- name: Delete Feature Branch\n  uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n  with:\n    action: delete\n    branch_name: feature/completed-feature\n    remote: true\n</code></pre>"},{"location":"actions/core/branch_operations/#feature-branch-workflow-example","title":"Feature Branch Workflow Example","text":"<pre><code>jobs:\n  feature-workflow:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      # Create a new feature branch\n      - name: Create Feature Branch\n        id: create-branch\n        uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n        with:\n          action: create\n          branch_name: feature/new-feature\n          base_branch: develop\n          remote: true\n\n      # Make changes and commit them...\n\n      # Push the feature branch\n      - name: Push Feature Branch\n        uses: deepworks-net/github.toolkit/actions/core/branch_operations@v1\n        with:\n          action: push\n          branch_name: feature/new-feature\n</code></pre>"},{"location":"actions/core/branch_operations/#implementation","title":"Implementation","text":""},{"location":"actions/core/branch_operations/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Branch operations logic and GitBranchOperations class</li> <li><code>action.yml</code>: Action metadata and input/output definitions</li> <li><code>Dockerfile</code>: Standardized container configuration</li> </ul>"},{"location":"actions/core/branch_operations/#docker-configuration","title":"Docker Configuration","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\n# Install git\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    git \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy script\nCOPY main.py /app/main.py\n\n# Make script executable\nRUN chmod +x /app/main.py\n\n# Set the entrypoint\nENTRYPOINT [\"/app/main.py\"]\n</code></pre>"},{"location":"actions/core/commit_operations/","title":"Macro Rendering Error","text":"<p>File: <code>actions/core/commit_operations/index.md</code></p> <p>UndefinedError: 'steps' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 699, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 166, in top-level template code\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'steps' is undefined\n</code></pre>"},{"location":"actions/core/manage_release/","title":"Core Action: Manage Release","text":""},{"location":"actions/core/manage_release/#overview","title":"Overview","text":"<p>The Manage Release action provides a standardized interface for working with GitHub draft releases. It supports three main operations:</p> <ol> <li>Creating/ensuring a draft release exists</li> <li>Getting current draft release information</li> <li>Updating draft release content</li> </ol>"},{"location":"actions/core/manage_release/#usage","title":"Usage","text":""},{"location":"actions/core/manage_release/#draft-operation","title":"Draft Operation","text":"<p>Creates a new draft release or returns existing one:</p> <pre><code>- name: Create Draft Release\n  uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    operation: 'draft'\n    name: 'Release v1.0.0'\n    body: 'Initial release notes'\n</code></pre>"},{"location":"actions/core/manage_release/#get-operation","title":"Get Operation","text":"<p>Retrieves current draft release information:</p> <pre><code>- name: Get Draft Release\n  uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    operation: 'get'\n</code></pre>"},{"location":"actions/core/manage_release/#update-operation","title":"Update Operation","text":"<p>Updates draft release content with different modes:</p> <pre><code>- name: Update Draft Release\n  uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    operation: 'update'\n    content: 'New content to add'\n    update_mode: 'append'  # or 'replace', 'prepend'\n</code></pre>"},{"location":"actions/core/manage_release/#inputs","title":"Inputs","text":"Input Description Required Default <code>github-token</code> GitHub token for API access Yes - <code>operation</code> Operation to perform (draft, get, update) No <code>get</code> <code>name</code> Release name for draft operation No <code>Draft Release</code> <code>body</code> Initial release body for draft operation No <code>''</code> <code>content</code> Content for update operation No* - <code>update_mode</code> How to update content (replace, append, prepend) No <code>replace</code> <p>*Required for update operation</p>"},{"location":"actions/core/manage_release/#outputs","title":"Outputs","text":"Output Description <code>id</code> Release ID <code>body</code> Release content <code>tag_name</code> Release tag name <code>name</code> Release name <code>exists</code> Whether draft release exists (true/false)"},{"location":"actions/core/manage_release/#behavior","title":"Behavior","text":""},{"location":"actions/core/manage_release/#draft-operation_1","title":"Draft Operation","text":"<ol> <li>Checks for existing draft release</li> <li>If none exists, creates new draft</li> <li>Returns release information</li> </ol>"},{"location":"actions/core/manage_release/#get-operation_1","title":"Get Operation","text":"<ol> <li>Fetches current draft release</li> <li>Returns release information if exists</li> <li>Indicates if no draft exists</li> </ol>"},{"location":"actions/core/manage_release/#update-operation_1","title":"Update Operation","text":"<ol> <li>Gets current draft release</li> <li>Updates content based on mode:<ul> <li><code>replace</code>: Overwrites existing content</li> <li><code>append</code>: Adds to end of content</li> <li><code>prepend</code>: Adds to beginning of content</li> </ul> </li> <li>Returns updated release information</li> </ol>"},{"location":"actions/core/manage_release/#error-handling","title":"Error Handling","text":"<p>The action handles several error cases:</p> <ol> <li> <p>Invalid Operation</p> <ul> <li>Unsupported operation specified</li> <li>Missing required inputs for operation</li> </ul> </li> <li> <p>GitHub API Errors</p> <ul> <li>Authentication failures</li> <li>Rate limiting</li> <li>Network issues</li> </ul> </li> <li> <p>Content Errors</p> <ul> <li>Missing content for update</li> <li>Invalid update mode</li> <li>Release not found for update</li> </ul> </li> </ol>"},{"location":"actions/core/manage_release/#example-use-cases","title":"Example Use Cases","text":""},{"location":"actions/core/manage_release/#release-preparation","title":"Release Preparation","text":"<pre><code>jobs:\n  prepare:\n    steps:\n      - name: Create Draft\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n        with:\n          operation: 'draft'\n          name: 'Release v1.0.0'\n</code></pre>"},{"location":"actions/core/manage_release/#pr-merge-updates","title":"PR Merge Updates","text":"<pre><code>on:\n  pull_request:\n    types: [closed]\n    branches: [main]\n\njobs:\n  update-notes:\n    if: github.event.pull_request.merged == true\n    steps:\n      - name: Update Release Notes\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n        with:\n          operation: 'update'\n          content: |\n            - PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}\n          update_mode: 'append'\n</code></pre>"},{"location":"actions/core/manage_release/#release-status-check","title":"Release Status Check","text":"<pre><code>jobs:\n  check:\n    steps:\n      - name: Check Draft Release\n        id: release\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n\n      - name: Create if Missing\n        if: steps.release.outputs.exists == 'false'\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n        with:\n          operation: 'draft'\n</code></pre>"},{"location":"actions/core/manage_release/#implementation","title":"Implementation","text":""},{"location":"actions/core/manage_release/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Release management logic</li> <li><code>action.yml</code>: Action metadata</li> <li><code>Dockerfile</code>: Container configuration</li> </ul>"},{"location":"actions/core/manage_release/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.9</li> <li>Git</li> <li>curl</li> <li>GitHub API access</li> </ul>"},{"location":"actions/core/tag_operations/","title":"Tag Operations","text":"<p>The Tag Operations action provides atomic git tag operations, allowing you to create, delete, push, list, and check git tags as part of your workflows.</p>"},{"location":"actions/core/tag_operations/#overview","title":"Overview","text":"<p>This action is a self-contained, Docker-based action that performs Git tag operations. It is designed to be used as part of GitHub Actions workflows to manage releases and version tagging.</p> <p>Key features include:</p> <ul> <li>Creating tags (both lightweight and annotated)</li> <li>Deleting tags (locally and remotely)</li> <li>Pushing tags to remote repositories</li> <li>Listing tags with pattern filtering</li> <li>Checking if tags exist</li> <li>Tag name validation</li> <li>Comprehensive error handling</li> </ul>"},{"location":"actions/core/tag_operations/#inputs","title":"Inputs","text":"Name Description Required Default <code>action</code> Tag operation to perform (create, delete, list, push, check) Yes <code>tag_name</code> Name of the tag to operate on Yes for create, delete, push, check <code>message</code> Message for annotated tag creation No <code>ref</code> Reference (commit SHA, branch) to place the tag on No <code>pattern</code> Pattern for listing tags (e.g. \"v1.*\") No <code>remote</code> Include remote operations (push/delete remote tag) No false <code>force</code> Force operation (used with create or push) No false <code>sort</code> Sorting method for listing tags (alphabetic, version, date) No alphabetic"},{"location":"actions/core/tag_operations/#outputs","title":"Outputs","text":"Name Description <code>tags</code> Comma-separated list of tags (when using list action) <code>result</code> Operation result (success/failure) <code>tag_exists</code> Whether the tag exists (true/false) <code>tag_message</code> Message associated with the tag (if exists and is annotated)"},{"location":"actions/core/tag_operations/#behavior-matrix","title":"Behavior Matrix","text":"Action Inputs Behavior Outputs create tag_name Creates a lightweight tag result, tag_exists create tag_name, message Creates an annotated tag result, tag_exists create tag_name, ref Creates tag at specified ref result, tag_exists create tag_name, force=true Overwrites existing tag result, tag_exists create tag_name, remote=true Creates tag and pushes to remote result, tag_exists delete tag_name Deletes local tag result delete tag_name, remote=true Deletes local and remote tag result push tag_name Pushes tag to remote result push tag_name, force=true Force pushes tag to remote result list Lists all tags tags, result list pattern Lists tags matching pattern tags, result list sort=version Lists tags sorted by version tags, result list sort=date Lists tags sorted by creation date tags, result check tag_name Checks if tag exists result, tag_exists, tag_message"},{"location":"actions/core/tag_operations/#examples","title":"Examples","text":""},{"location":"actions/core/tag_operations/#creating-a-tag","title":"Creating a Tag","text":"<pre><code>- name: Create Release Tag\n  id: create-tag\n  uses: ./actions/core/tag_operations\n  with:\n    action: create\n    tag_name: v1.0.0\n    message: \"Release v1.0.0\"\n    remote: true  # Push to remote\n</code></pre>"},{"location":"actions/core/tag_operations/#checking-if-a-tag-exists","title":"Checking if a Tag Exists","text":"<pre><code>- name: Check Tag\n  id: check-tag\n  uses: ./actions/core/tag_operations\n  with:\n    action: check\n    tag_name: v1.0.0\n\n- name: Use Tag Check Result\n  run: |\n    if [[ \"${{ steps.check-tag.outputs.tag_exists }}\" == \"true\" ]]; then\n      echo \"Tag v1.0.0 exists with message: ${{ steps.check-tag.outputs.tag_message }}\"\n    else\n      echo \"Tag v1.0.0 does not exist\"\n    fi\n</code></pre>"},{"location":"actions/core/tag_operations/#listing-tags","title":"Listing Tags","text":"<pre><code>- name: List Tags\n  id: list-tags\n  uses: ./actions/core/tag_operations\n  with:\n    action: list\n    pattern: \"v1.*\"\n    sort: version  # Sort by semantic versioning\n\n- name: Display Tags\n  run: |\n    echo \"Found tags: ${{ steps.list-tags.outputs.tags }}\"\n</code></pre>"},{"location":"actions/core/tag_operations/#deleting-a-tag","title":"Deleting a Tag","text":"<pre><code>- name: Delete Tag\n  uses: ./actions/core/tag_operations\n  with:\n    action: delete\n    tag_name: v1.0.0\n    remote: true  # Delete from remote\n</code></pre>"},{"location":"actions/core/tag_operations/#force-pushing-a-tag","title":"Force-Pushing a Tag","text":"<pre><code>- name: Push Tag\n  uses: ./actions/core/tag_operations\n  with:\n    action: push\n    tag_name: v1.0.0\n    force: true  # Force push\n</code></pre>"},{"location":"actions/core/tag_operations/#error-handling","title":"Error Handling","text":"<p>The action handles various error conditions:</p> <ul> <li>Invalid tag names are rejected</li> <li>Attempting to create an existing tag without force flag</li> <li>Attempting to delete a non-existent tag</li> <li>Git command execution failures</li> </ul> <p>The action returns the <code>result</code> output as \"success\" or \"failure\", and sets the action's exit code accordingly.</p>"},{"location":"actions/core/tag_operations/#implementation-notes","title":"Implementation Notes","text":"<p>The tag operations action follows the single-responsibility principle, focusing solely on tag operations. It works well in conjunction with other actions like branch operations.</p> <p>Tag name validation follows Git's rules, rejecting names with spaces, control characters, and certain special characters like <code>~^:?*[]\\</code>.</p> <p>For tag listing with sorting by version, the action implements semantic versioning-aware sorting that can handle tags like <code>v1.10.0</code> correctly (sorted after <code>v1.9.0</code>). Version-like tags are prioritized over non-version tags in the sorting order, making it easy to find the most recent versions first.</p>"},{"location":"actions/core/version_calculator/","title":"Core Action: Version Calculator","text":""},{"location":"actions/core/version_calculator/#overview","title":"Overview","text":"<p>The Version Calculator is a core (atomic) action that calculates the next version number based on Git tags and commit history. It follows semantic versioning principles while providing predictable, automated version calculation.</p>"},{"location":"actions/core/version_calculator/#usage","title":"Usage","text":"<pre><code>- name: Calculate Version\n  uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n  with:\n    default_version: 'v0.1.0'      # Optional: Default if no tags exist\n    version_prefix: 'v'            # Optional: Prefix for version tags\n    tag_pattern: 'v*'             # Optional: Pattern to match version tags\n</code></pre>"},{"location":"actions/core/version_calculator/#inputs","title":"Inputs","text":"Input Description Required Default <code>default_version</code> Default version when no tags exist. Must match prefix format (e.g., 'v0.1.0' or 'ver0.1.0') No <code>v0.1.0</code> <code>version_prefix</code> Prefix for version tags (e.g., 'v' in v1.0.0) No <code>v</code> <code>tag_pattern</code> Pattern to match version tags No <code>v*</code>"},{"location":"actions/core/version_calculator/#outputs","title":"Outputs","text":"Output Description <code>next_version</code> The calculated next version, based on commit count since current version <code>current_version</code> Current version (latest matching tag or default_version if no tags) <code>commit_count</code> Number of commits since the current version (0 if using default version)"},{"location":"actions/core/version_calculator/#behavior-matrix","title":"Behavior Matrix","text":""},{"location":"actions/core/version_calculator/#no-tags-exist","title":"No Tags Exist","text":"<ul> <li><code>current_version</code> = default_version</li> <li><code>next_version</code> = default_version</li> <li><code>commit_count</code> = 0</li> </ul>"},{"location":"actions/core/version_calculator/#tags-exist-no-new-commits","title":"Tags Exist, No New Commits","text":"<ul> <li><code>current_version</code> = latest matching tag</li> <li><code>next_version</code> = latest matching tag</li> <li><code>commit_count</code> = 0</li> </ul>"},{"location":"actions/core/version_calculator/#tags-exist-new-commits","title":"Tags Exist, New Commits","text":"<ul> <li><code>current_version</code> = latest matching tag</li> <li><code>next_version</code> = increment patch version by commit count</li> <li><code>commit_count</code> = number of commits since tag</li> </ul>"},{"location":"actions/core/version_calculator/#custom-prefix","title":"Custom Prefix","text":"<p>Note: When using a custom prefix, default_version must match the prefix</p> <pre><code>- uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n  with:\n    default_version: 'ver0.1.0'  # Must match prefix\n    version_prefix: 'ver'\n    tag_pattern: 'ver*'\n</code></pre>"},{"location":"actions/core/version_calculator/#example-use-cases","title":"Example Use Cases","text":""},{"location":"actions/core/version_calculator/#basic-version-calculation","title":"Basic Version Calculation","text":"<pre><code>steps:\n  - name: Calculate Version\n    id: version\n    uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n\n  - name: Use Outputs\n    run: |\n      echo \"Current: ${{ steps.version.outputs.current_version }}\"\n      echo \"Next: ${{ steps.version.outputs.next_version }}\"\n      echo \"Commits: ${{ steps.version.outputs.commit_count }}\"\n</code></pre>"},{"location":"actions/core/version_calculator/#custom-version-prefix","title":"Custom Version Prefix","text":"<pre><code>steps:\n  - name: Calculate Version\n    uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n    with:\n      default_version: 'ver0.1.0'\n      version_prefix: 'ver'\n      tag_pattern: 'ver*'\n</code></pre>"},{"location":"actions/core/version_calculator/#error-cases","title":"Error Cases","text":"<p>The action will fail with clear error messages in these cases:</p> <ol> <li> <p>Invalid Version Format</p> <ul> <li>Version doesn't match pattern: <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> <li>Default version doesn't match specified prefix</li> <li>Tag found with invalid format</li> </ul> </li> <li> <p>Git Errors</p> <ul> <li>Unable to access repository</li> <li>Git configuration issues</li> <li>Tag retrieval fails</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>Mismatched prefix and default_version</li> <li>Invalid version pattern</li> <li>Invalid tag pattern</li> </ul> </li> </ol>"},{"location":"actions/core/version_calculator/#implementation","title":"Implementation","text":""},{"location":"actions/core/version_calculator/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Version calculation logic</li> <li><code>action.yml</code>: Action metadata and input/output definitions</li> <li><code>Dockerfile</code>: Standardized container configuration</li> </ul>"},{"location":"actions/core/version_calculator/#docker-configuration","title":"Docker Configuration","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /action\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y git &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Configure git for workspace\nRUN git config --global --add safe.directory /github/workspace\n\n# Copy action files\nCOPY *.py /action/\nCOPY action.yml /action/\n\nENTRYPOINT [\"python\", \"/action/main.py\"]\n</code></pre>"},{"location":"actions/core/version_updater/","title":"Core Action: Version Updater","text":""},{"location":"actions/core/version_updater/#overview","title":"Overview","text":"<p>The Version Updater is a core (atomic) action that updates version numbers across multiple file types. It handles YAML, JSON, and text files while preserving file structure and formatting.</p>"},{"location":"actions/core/version_updater/#usage","title":"Usage","text":"<pre><code>- name: Update Versions\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'       # Required\n    files: |               # Required\n      \"package.json\"\n      \"version.yml\"\n    strip_v_prefix: true   # Optional\n</code></pre>"},{"location":"actions/core/version_updater/#inputs","title":"Inputs","text":"Input Description Required Default <code>version</code> Version number to set (format: v1.2.3 or 1.2.3) Yes - <code>files</code> Files to update (one per line) Yes - <code>strip_v_prefix</code> Remove 'v' prefix when updating files No <code>true</code>"},{"location":"actions/core/version_updater/#outputs","title":"Outputs","text":"Output Description <code>files</code> JSON array of successfully updated files"},{"location":"actions/core/version_updater/#file-type-support","title":"File Type Support","text":""},{"location":"actions/core/version_updater/#yaml-files-yml-yaml","title":"YAML Files (.yml, .yaml)","text":"<pre><code># Input\nversion: 1.0.0\n\n# Output (with strip_v_prefix: true)\nversion: 2.0.0\n\n# Output (with strip_v_prefix: false)\nversion: v2.0.0\n</code></pre>"},{"location":"actions/core/version_updater/#json-files-json","title":"JSON Files (.json)","text":"<pre><code>// Input\n{\n  \"version\": \"1.0.0\"\n}\n\n// Output (with strip_v_prefix: true)\n{\n  \"version\": \"2.0.0\"\n}\n</code></pre>"},{"location":"actions/core/version_updater/#text-files-any-extension","title":"Text Files (any extension)","text":"<p>Uses regex pattern matching to find and update version numbers. Matches patterns like:</p> <ul> <li><code>version = 1.0.0</code></li> <li><code>version: \"1.0.0\"</code></li> <li><code>\"version\": \"1.0.0\"</code></li> </ul>"},{"location":"actions/core/version_updater/#error-handling","title":"Error Handling","text":"<p>The action provides clear error messages and appropriate exit codes:</p> <ol> <li> <p>Version Format</p> <ul> <li>Invalid format provided</li> <li>Missing version input</li> </ul> </li> <li> <p>File Operations</p> <ul> <li>File not found</li> <li>Permission denied</li> <li>Invalid file format (JSON)</li> </ul> </li> <li> <p>Version Fields</p> <ul> <li>No version field found in file</li> <li>Multiple version fields in file</li> </ul> </li> </ol> <p>Exit Codes:</p> <ul> <li>0: All files successfully updated</li> <li>1: One or more files failed to update</li> </ul>"},{"location":"actions/core/version_updater/#implementation","title":"Implementation","text":""},{"location":"actions/core/version_updater/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Version update logic</li> <li><code>action.yml</code>: Action metadata and interface</li> <li><code>Dockerfile</code>: Standardized container configuration</li> <li><code>requirements.txt</code>: Python dependencies</li> </ul>"},{"location":"actions/core/version_updater/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.9</li> <li>PyYAML 6.0.1</li> <li>Git (for workspace configuration)</li> </ul>"},{"location":"actions/core/version_updater/#example-use-cases","title":"Example Use Cases","text":""},{"location":"actions/core/version_updater/#basic-single-file-update","title":"Basic Single File Update","text":"<pre><code>- name: Update Package Version\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'\n    files: |\n      \"package.json\"\n</code></pre>"},{"location":"actions/core/version_updater/#multiple-files-with-different-formats","title":"Multiple Files with Different Formats","text":"<pre><code>- name: Update All Versions\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'\n    files: |\n      \"package.json\"\n      \"version.yml\"\n      \"VERSION\"\n</code></pre>"},{"location":"actions/core/version_updater/#keep-version-prefix","title":"Keep Version Prefix","text":"<pre><code>- name: Update with Prefix\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'\n    files: |\n      \"config.yml\"\n    strip_v_prefix: false\n</code></pre>"},{"location":"actions/core/version_updater/#testing","title":"Testing","text":"<p>Each feature is verified through automated tests:</p> <ol> <li> <p>File Type Support:</p> <ul> <li>YAML updates</li> <li>JSON updates</li> <li>Text file updates</li> </ul> </li> <li> <p>Version Handling:</p> <ul> <li>With/without v prefix</li> <li>Multiple formats</li> <li>Invalid formats</li> </ul> </li> <li> <p>Error Cases:</p> <ul> <li>Missing files</li> <li>Invalid formats</li> <li>Permission issues</li> </ul> </li> </ol>"},{"location":"appendix/branching-strategy/","title":"Git Branching Strategy","text":"<p>This document outlines the Git branching strategy used across our projects. This approach is designed to support both continuous integration and structured releases while maintaining a clear, predictable workflow.</p>"},{"location":"appendix/branching-strategy/#visual-overview","title":"Visual Overview","text":""},{"location":"appendix/branching-strategy/#core-branches","title":"Core Branches","text":"<p>Our workflow revolves around five types of branches, each with a specific purpose:</p>"},{"location":"appendix/branching-strategy/#1-main-production","title":"1. <code>main</code> (Production)","text":"<ul> <li>Purpose: Represents the production-ready state</li> <li>Protection: Locked down - no direct commits allowed</li> <li>Creation: Initial repository setup only</li> <li>Lifetime: Permanent</li> <li>Merges From: Only <code>release/*</code> and <code>hotfix/*</code> branches</li> <li>Naming: Always <code>main</code></li> </ul>"},{"location":"appendix/branching-strategy/#2-staging-pre-production","title":"2. <code>staging</code> (Pre-production)","text":"<ul> <li>Purpose: Integration branch for all development work</li> <li>Protection: Limited - requires PR review</li> <li>Creation: Initial repository setup only</li> <li>Lifetime: Permanent</li> <li>Merges From: <code>develop/*</code> branches, <code>hotfix/*</code> branches</li> <li>Naming: Always <code>staging</code></li> </ul>"},{"location":"appendix/branching-strategy/#3-develop-development","title":"3. <code>develop/*</code> (Development)","text":"<ul> <li>Purpose: Implementation of specific features, fixes, or improvements</li> <li>Protection: None</li> <li>Creation: Branch from <code>staging</code></li> <li>Lifetime: Temporary - deleted after merging</li> <li>Merges To: <code>staging</code> via pull request</li> <li>Naming: <code>develop/descriptive-name</code></li> </ul>"},{"location":"appendix/branching-strategy/#4-release-release-preparation","title":"4. <code>release/*</code> (Release Preparation)","text":"<ul> <li>Purpose: Prepare and finalize a specific release</li> <li>Protection: Limited - requires PR review</li> <li>Creation: Branch from <code>staging</code> when ready to release</li> <li>Lifetime: Temporary - deleted after merging</li> <li>Merges To: Both <code>main</code> and <code>staging</code></li> <li>Naming: <code>release/vX.Y.Z</code> (using semantic versioning)</li> </ul>"},{"location":"appendix/branching-strategy/#5-hotfix-emergency-fixes","title":"5. <code>hotfix/*</code> (Emergency Fixes)","text":"<ul> <li>Purpose: Address critical issues in production</li> <li>Protection: Limited - requires PR review</li> <li>Creation: Branch from <code>main</code></li> <li>Lifetime: Temporary - deleted after merging</li> <li>Merges To: Both <code>main</code> and <code>staging</code></li> <li>Naming: <code>hotfix/brief-description</code></li> </ul>"},{"location":"appendix/branching-strategy/#workflow-process","title":"Workflow Process","text":""},{"location":"appendix/branching-strategy/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a development branch from <code>staging</code>:    <pre><code>git checkout staging\ngit pull\ngit checkout -b develop/my-feature\n</code></pre></p> </li> <li> <p>Implement changes, committing regularly:    <pre><code>git add .\ngit commit -m \"Descriptive message\"\n</code></pre></p> </li> <li> <p>Push branch to remote:    <pre><code>git push -u origin develop/my-feature\n</code></pre></p> </li> <li> <p>Create pull request to merge into <code>staging</code></p> </li> <li>After review and approval, merge the PR</li> <li>Delete the development branch when no longer needed</li> </ol>"},{"location":"appendix/branching-strategy/#release-workflow","title":"Release Workflow","text":"<ol> <li> <p>Create a release branch from <code>staging</code>:    <pre><code>git checkout staging\ngit pull\ngit checkout -b release/v1.0.0\n</code></pre></p> </li> <li> <p>Make any final adjustments and version updates:    <pre><code># Update version numbers in relevant files\ngit add .\ngit commit -m \"Prepare release v1.0.0\"\n</code></pre></p> </li> <li> <p>Push branch to remote:    <pre><code>git push -u origin release/v1.0.0\n</code></pre></p> </li> <li> <p>Create pull request to merge into <code>main</code></p> </li> <li>After review and approval, merge the PR</li> <li> <p>Tag the release on <code>main</code>:    <pre><code>git checkout main\ngit pull\ngit tag -a v1.0.0 -m \"Release v1.0.0\"\ngit push origin v1.0.0\n</code></pre></p> </li> <li> <p>Merge the release back to <code>staging</code>:    <pre><code>git checkout staging\ngit pull\ngit merge --no-ff release/v1.0.0\ngit push\n</code></pre></p> </li> </ol>"},{"location":"appendix/branching-strategy/#hotfix-workflow","title":"Hotfix Workflow","text":"<ol> <li> <p>Create a hotfix branch from <code>main</code>:    <pre><code>git checkout main\ngit pull\ngit checkout -b hotfix/critical-bug\n</code></pre></p> </li> <li> <p>Implement the fix:    <pre><code>git add .\ngit commit -m \"Fix critical bug\"\n</code></pre></p> </li> <li> <p>Push branch to remote:    <pre><code>git push -u origin hotfix/critical-bug\n</code></pre></p> </li> <li> <p>Create pull request to merge into <code>main</code></p> </li> <li>After review and approval, merge the PR</li> <li> <p>Tag the hotfix on <code>main</code>:    <pre><code>git checkout main\ngit pull\ngit tag -a v1.0.1 -m \"Hotfix v1.0.1\"\ngit push origin v1.0.1\n</code></pre></p> </li> <li> <p>Merge the hotfix back to <code>staging</code>:    <pre><code>git checkout staging\ngit pull\ngit merge --no-ff hotfix/critical-bug\ngit push\n</code></pre></p> </li> </ol>"},{"location":"appendix/branching-strategy/#using-git-clients","title":"Using Git Clients","text":"<p>Team members may use different Git clients to interact with our repositories. Here's guidance for popular clients that team members currently use:</p>"},{"location":"appendix/branching-strategy/#using-gitkraken-with-gitflow","title":"Using GitKraken with GitFlow","text":"<p>If using GitKraken with GitFlow, the workflow is simplified:</p> <ol> <li>Initialize GitFlow in the repository</li> <li>Select <code>develop</code> as your <code>staging</code> branch</li> <li>Use GitFlow buttons to:<ul> <li>Start Feature (creates <code>develop/*</code> branch)</li> <li>Finish Feature (merges to <code>staging</code>)</li> <li>Start Release (creates <code>release/*</code> branch)</li> <li>Finish Release (merges to <code>main</code> and back to <code>staging</code>)</li> <li>Start Hotfix (creates <code>hotfix/*</code> from <code>main</code>)</li> <li>Finish Hotfix (merges to <code>main</code> and <code>staging</code>)</li> </ul> </li> </ol>"},{"location":"appendix/branching-strategy/#using-fork-git-client","title":"Using Fork Git Client","text":"<p>For team members who prefer the Fork Git client:</p> <ol> <li> <p>Repository Setup:</p> <ul> <li>Clone the repository using Fork's clone button</li> <li>Switch to the Repository settings to ensure the correct remotes are set up</li> </ul> </li> <li> <p>Branch Management:</p> <ul> <li>Create branches by right-clicking on the source branch (e.g., <code>staging</code>) and selecting \"Create Branch\"</li> <li>Use our naming conventions: <code>develop/feature-name</code>, <code>release/vX.Y.Z</code>, <code>hotfix/issue-name</code></li> </ul> </li> <li> <p>Development Workflow:</p> <ul> <li>Use Fork's commit interface with stage/unstage functionality</li> <li>View changes with Fork's diff viewer</li> <li>Use the \"Fetch\" and \"Pull\" buttons regularly to stay up-to-date</li> </ul> </li> <li> <p>Pull Requests:</p> <ul> <li>Push your branch using the \"Push\" button</li> <li>Use Fork's \"Create Pull Request\" feature (Repository \u2192 Create Pull Request) to create PRs to <code>staging</code> or <code>main</code></li> </ul> </li> <li> <p>Viewing History:</p> <ul> <li>Use Fork's graph view to visualize branches and commits</li> <li>Filter branches in the sidebar to focus on specific work</li> </ul> </li> <li> <p>Stashing Changes:</p> <ul> <li>Use Fork's stash functionality (Repository \u2192 Stash Changes) when you need to switch branches with uncommitted work</li> </ul> </li> </ol>"},{"location":"appendix/branching-strategy/#using-command-line-git","title":"Using Command Line Git","text":"<p>For those who prefer the Git command line:</p> <ol> <li>Follow the workflow process steps outlined earlier in this document</li> <li>Use standard Git commands for branching, committing, and pushing</li> </ol>"},{"location":"appendix/branching-strategy/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>This branching strategy integrates with our CI/CD pipelines:</p> <ul> <li>Push to <code>develop/*</code>: Triggers tests and code quality checks</li> <li>PR to <code>staging</code>: Triggers comprehensive test suite and deploys to staging environment</li> <li>PR to <code>main</code>: Triggers production deployment preparation</li> <li>Tag on <code>main</code>: Triggers production deployment</li> </ul>"},{"location":"appendix/branching-strategy/#versioning-strategy","title":"Versioning Strategy","text":"<p>We follow semantic versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Incompatible API changes</li> <li>MINOR: New functionality in a backward-compatible manner</li> <li>PATCH: Backward-compatible bug fixes</li> </ul> <p>Version bumps are determined by:</p> <ul> <li>Regular releases: Planned MAJOR or MINOR version increases</li> <li>Hotfixes: PATCH version increases</li> </ul>"},{"location":"appendix/branching-strategy/#best-practices","title":"Best Practices","text":"<ol> <li>Keep branches current: Regularly pull changes from <code>staging</code> into development branches</li> <li>Descriptive naming: Use clear, descriptive names for branches</li> <li>Clean commits: Make focused, atomic commits with clear messages</li> <li>Pull requests: Always use PRs for merging to <code>staging</code> and <code>main</code></li> <li>Code reviews: Ensure all PRs receive proper review</li> <li>Clean up: Delete branches after they're merged</li> <li>Use client tools effectively: Leverage features of your preferred Git client that support this workflow</li> </ol>"},{"location":"appendix/branching-strategy/#references","title":"References","text":"<ul> <li>Semantic Versioning 2.0.0</li> <li>GitHub Flow</li> <li>GitFlow Workflow</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>The GitHub Toolkit is built on a sophisticated architecture that enables scalable, maintainable, and reliable automation. This section provides deep technical insights into the architectural decisions, patterns, and implementations that power the toolkit.</p>"},{"location":"architecture/#architectural-overview","title":"Architectural Overview","text":"<p>The toolkit employs several key architectural patterns:</p> <ul> <li>Six-Layer Architecture - Hierarchical organization from axioms to ecosystems</li> <li>FCM Bridge System - Source-code approach to capability definition</li> <li>Meta-Level Design - Self-describing and self-modifying system characteristics</li> </ul>"},{"location":"architecture/#core-architectural-principles","title":"Core Architectural Principles","text":""},{"location":"architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<ul> <li>Capability Definition (FCM files) separate from Implementation (generated actions)</li> <li>Interface (action.yml) separate from Logic (main.py)</li> <li>Configuration (workflow files) separate from Execution (runtime)</li> </ul>"},{"location":"architecture/#2-code-as-data","title":"2. Code as Data","text":"<ul> <li>FCM files define capabilities as structured data</li> <li>Generated actions are compiled artifacts</li> <li>Workflows are configuration, not code</li> </ul>"},{"location":"architecture/#3-immutable-infrastructure","title":"3. Immutable Infrastructure","text":"<ul> <li>Generated components are not manually edited</li> <li>Source changes trigger regeneration</li> <li>Version control tracks both source and generated artifacts</li> </ul>"},{"location":"architecture/#4-self-describing-systems","title":"4. Self-Describing Systems","text":"<ul> <li>Components include metadata about their origin</li> <li>Synchronization status is trackable</li> <li>System can validate its own consistency</li> </ul>"},{"location":"architecture/#technical-architecture","title":"Technical Architecture","text":""},{"location":"architecture/#generation-pipeline","title":"Generation Pipeline","text":"<pre><code>graph TD\n    A[FCM Files] --&gt; B[Bridge Generator]\n    B --&gt; C[GitHub Actions]\n    B --&gt; D[Sync Metadata]\n    C --&gt; E[Composite Actions]\n    E --&gt; F[Workflows]\n    F --&gt; G[Complete Solutions]</code></pre>"},{"location":"architecture/#runtime-architecture","title":"Runtime Architecture","text":"<pre><code>graph LR\n    A[GitHub Event] --&gt; B[Workflow Trigger]\n    B --&gt; C[Composite Action]\n    C --&gt; D[Core Action]\n    D --&gt; E[Docker Container]\n    E --&gt; F[Python Implementation]\n    F --&gt; G[Git Operations]</code></pre>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<pre><code>sequenceDiagram\n    participant W as Workflow\n    participant C as Composite Action\n    participant A as Core Action\n    participant D as Docker Container\n    participant G as Git Repository\n\n    W-&gt;&gt;C: Parameters\n    C-&gt;&gt;A: Processed Parameters\n    A-&gt;&gt;D: Environment Variables\n    D-&gt;&gt;G: Git Commands\n    G--&gt;&gt;D: Results\n    D--&gt;&gt;A: Outputs\n    A--&gt;&gt;C: Structured Results\n    C--&gt;&gt;W: Final Outputs</code></pre>"},{"location":"architecture/#design-patterns","title":"Design Patterns","text":""},{"location":"architecture/#1-bridge-pattern","title":"1. Bridge Pattern","text":"<ul> <li>Problem: Manual action maintenance doesn't scale</li> <li>Solution: Generate actions from capability definitions</li> <li>Implementation: FCM \u2192 Bridge Generator \u2192 GitHub Actions</li> </ul>"},{"location":"architecture/#2-template-method-pattern","title":"2. Template Method Pattern","text":"<ul> <li>Problem: Common patterns repeated across actions</li> <li>Solution: LCMCP pattern provides template structure</li> <li>Implementation: Log \u2192 Check \u2192 Modify \u2192 Check \u2192 Push</li> </ul>"},{"location":"architecture/#3-factory-pattern","title":"3. Factory Pattern","text":"<ul> <li>Problem: Different actions need different implementations</li> <li>Solution: Bridge generator creates appropriate action structure</li> <li>Implementation: FCM type determines generation strategy</li> </ul>"},{"location":"architecture/#4-observer-pattern","title":"4. Observer Pattern","text":"<ul> <li>Problem: Need to track synchronization status</li> <li>Solution: Sync metadata observes FCM changes</li> <li>Implementation: Checksums and timestamps track changes</li> </ul>"},{"location":"architecture/#quality-attributes","title":"Quality Attributes","text":""},{"location":"architecture/#scalability","title":"Scalability","text":"<ul> <li>Horizontal: Add new domains without affecting existing ones</li> <li>Vertical: Add complexity at appropriate architectural layers</li> <li>Temporal: Handle increasing automation requirements over time</li> </ul>"},{"location":"architecture/#maintainability","title":"Maintainability","text":"<ul> <li>Separation: Clear boundaries between generated and manual code</li> <li>Traceability: Every action traces back to its source FCM</li> <li>Validation: Automated checks ensure consistency</li> </ul>"},{"location":"architecture/#reliability","title":"Reliability","text":"<ul> <li>Atomic Operations: LCMCP pattern ensures consistency</li> <li>Error Handling: Comprehensive error detection and recovery</li> <li>Validation: Multiple validation layers prevent failures</li> </ul>"},{"location":"architecture/#performance","title":"Performance","text":"<ul> <li>Lazy Loading: Only generate actions when FCMs change</li> <li>Caching: Avoid regeneration when possible</li> <li>Parallelization: Independent actions can be generated concurrently</li> </ul>"},{"location":"architecture/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/#fcm-processing","title":"FCM Processing","text":"<ol> <li>Parse FCM Files: Extract structured capability definitions</li> <li>Validate Schema: Ensure FCM files meet requirements</li> <li>Generate Templates: Create action.yml and Dockerfile</li> <li>Create Metadata: Generate .bridge-sync tracking files</li> </ol>"},{"location":"architecture/#synchronization-system","title":"Synchronization System","text":"<ol> <li>Checksum Calculation: SHA256 of FCM content</li> <li>Timestamp Tracking: When FCM was last modified</li> <li>Version Management: Track FCM and generator versions</li> <li>Drift Detection: Identify when regeneration is needed</li> </ol>"},{"location":"architecture/#validation-framework","title":"Validation Framework","text":"<ol> <li>Schema Validation: FCM files match expected structure</li> <li>Interface Validation: Generated actions are valid GitHub Actions</li> <li>Sync Validation: All actions have corresponding FCMs</li> <li>Integration Testing: Actions work in real workflows</li> </ol>"},{"location":"architecture/#extension-points","title":"Extension Points","text":""},{"location":"architecture/#adding-new-domains","title":"Adding New Domains","text":"<ol> <li>Create domain directory in <code>axioms/</code></li> <li>Define FCM files for domain capabilities</li> <li>Implement domain-specific logic patterns</li> <li>Generate and validate new actions</li> </ol>"},{"location":"architecture/#custom-generation-logic","title":"Custom Generation Logic","text":"<ol> <li>Extend bridge generator for special cases</li> <li>Add domain-specific templates</li> <li>Implement custom validation rules</li> <li>Update documentation and examples</li> </ol>"},{"location":"architecture/#integration-hooks","title":"Integration Hooks","text":"<ol> <li>Pre-generation validation hooks</li> <li>Post-generation processing hooks</li> <li>Custom deployment pipelines</li> <li>Monitoring and alerting integration</li> </ol>"},{"location":"architecture/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"architecture/#metrics","title":"Metrics","text":"<ul> <li>FCM file changes over time</li> <li>Generation frequency and duration</li> <li>Action usage across repositories</li> <li>Error rates and types</li> </ul>"},{"location":"architecture/#logging","title":"Logging","text":"<ul> <li>Generation process logging</li> <li>Validation result logging</li> <li>Synchronization status logging</li> <li>Usage pattern logging</li> </ul>"},{"location":"architecture/#alerting","title":"Alerting","text":"<ul> <li>Failed generations</li> <li>Synchronization drift</li> <li>Validation failures</li> <li>Performance degradation</li> </ul>"},{"location":"architecture/#future-architecture","title":"Future Architecture","text":""},{"location":"architecture/#planned-enhancements","title":"Planned Enhancements","text":"<ul> <li>Distributed Generation: Generate actions across multiple repositories</li> <li>Real-time Synchronization: Immediate updates when FCMs change</li> <li>Advanced Analytics: Usage patterns and optimization recommendations</li> <li>Enhanced Validation: Semantic validation beyond syntax checking</li> </ul>"},{"location":"architecture/#research-areas","title":"Research Areas","text":"<ul> <li>AI-Assisted Generation: Machine learning for optimization</li> <li>Declarative Workflows: Higher-level workflow descriptions</li> <li>Cross-Platform Support: Beyond GitHub Actions</li> <li>Integration Standards: Industry-standard automation interfaces</li> </ul>"},{"location":"architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Core Concepts - Fundamental concepts and patterns</li> <li>User Guide - Practical implementation guidance</li> <li>Development - Contributing to the architecture</li> <li>Reference - Complete API documentation</li> </ul>"},{"location":"architecture/#summary","title":"Summary","text":"<p>The GitHub Toolkit architecture represents a novel approach to automation that treats capability definitions as source code and generated actions as compiled artifacts. This approach provides unprecedented scalability, maintainability, and reliability while maintaining the flexibility needed for real-world automation requirements.</p> <p>The architecture continues to evolve based on usage patterns, performance requirements, and the growing ecosystem of automation needs across different domains and organizations.</p>"},{"location":"architecture/meta-level/","title":"Meta-Level Documentation: FCM Architecture and Development Workflows","text":""},{"location":"architecture/meta-level/#overview","title":"Overview","text":"<p>This document provides a meta-level analysis of the repository's Formal Conceptual Model (FCM) architecture and development workflows. The repository has evolved from a traditional action collection to a six-layer architecture with bridge-based generation, achieving both architectural purity and GitHub compatibility.</p>"},{"location":"architecture/meta-level/#architecture-evolution","title":"Architecture Evolution","text":""},{"location":"architecture/meta-level/#traditional-structure-fcm-architecture","title":"Traditional Structure \u2192 FCM Architecture","text":"<p>The repository has transformed from mixed architecture-operation structure to pure architectural patterns:</p> <ul> <li>Before: Actions contained both definitions and implementations</li> <li>After: Pure FCM definitions with generated GitHub interfaces</li> <li>Bridge: Automated generation maintains GitHub compatibility</li> </ul>"},{"location":"architecture/meta-level/#six-layer-fcm-structure","title":"Six-Layer FCM Structure","text":"<ol> <li>Axioms (<code>axioms/</code>) - Foundational capability definitions</li> <li>Logic (<code>logic/</code>) - Compositions and relationships  </li> <li>Patterns (<code>patterns/</code>) - Reusable workflow structures</li> <li>Mechanics (<code>mechanics/</code>) - Implementation templates</li> <li>Reflection (<code>reflection/</code>) - Self-awareness and analysis</li> <li>Emergence (<code>emergence/</code>) - Discovered system properties</li> </ol>"},{"location":"architecture/meta-level/#core-workflows","title":"Core Workflows","text":""},{"location":"architecture/meta-level/#1-development-workflow","title":"1. Development Workflow","text":""},{"location":"architecture/meta-level/#purpose","title":"Purpose","text":"<ul> <li>Supports feature development, bug fixes, and other contributions using a branch-based workflow.</li> </ul>"},{"location":"architecture/meta-level/#key-components","title":"Key Components","text":"<ul> <li>Branches:</li> <li><code>main</code>: Stable release branch.</li> <li><code>staging</code>: Active development branch for integration testing.</li> <li>Feature branches: For specific tasks or issues.</li> <li>Commits: Follow conventional commit messages to ensure clarity.</li> <li>Pull Requests (PRs): Used to merge feature branches into <code>staging</code>.</li> </ul>"},{"location":"architecture/meta-level/#tools-and-actions","title":"Tools and Actions","text":"<ul> <li>Git CLI for branch management.</li> <li>Automated checks triggered by PR events (e.g., linting, testing).</li> </ul>"},{"location":"architecture/meta-level/#known-issues","title":"Known Issues","text":"<ul> <li>Need for clearer branch naming conventions.</li> <li>Standardization of commit message format.</li> </ul>"},{"location":"architecture/meta-level/#gaps-and-recommendations","title":"Gaps and Recommendations","text":"<ul> <li>Document branch naming conventions explicitly.</li> <li>Integrate a commit linter to enforce standards.</li> </ul>"},{"location":"architecture/meta-level/#2-release-management-workflow","title":"2. Release Management Workflow","text":""},{"location":"architecture/meta-level/#purpose_1","title":"Purpose","text":"<ul> <li>Manages the preparation, validation, and deployment of new releases.</li> </ul>"},{"location":"architecture/meta-level/#key-components_1","title":"Key Components","text":"<ul> <li>Tagging:</li> <li>Pre-release tags: <code>prep-vX.Y.Z</code> to trigger workflows.</li> <li>Final release tags: <code>vX.Y.Z</code> for stable releases.</li> <li>Changelog Updates: Automated updates during release preparation.</li> <li>Release Branches: Created during the preparation of major or minor versions.</li> </ul>"},{"location":"architecture/meta-level/#tools-and-actions_1","title":"Tools and Actions","text":"<ul> <li>Release Drafter: Generates draft release notes based on merged PRs.</li> <li>Generated Actions: All actions are now generated from FCM axioms:</li> <li><code>axioms/version/calculate.fcm</code> \u2192 <code>actions/core/version-calculator/</code></li> <li><code>axioms/release/changelog.fcm</code> \u2192 <code>actions/core/update-changelog/</code></li> <li><code>axioms/git/tag.fcm</code> \u2192 <code>actions/core/tag-operations/</code></li> </ul>"},{"location":"architecture/meta-level/#bridge-integration","title":"Bridge Integration","text":"<ul> <li>Source of Truth: FCM definitions in <code>axioms/</code></li> <li>Generated Interface: GitHub-compatible actions in <code>actions/</code></li> <li>Validation: Automated alignment checking via <code>.bridge/validator.py</code></li> <li>Regeneration: Actions updated when FCMs change</li> </ul>"},{"location":"architecture/meta-level/#fcm-migration-status","title":"FCM Migration Status","text":"<ul> <li>\u2705 Architecture established</li> <li>\u2705 Bridge generation system operational  </li> <li>\u2705 First axiom (tag-operations) generated</li> <li>\ud83d\udd04 Migration of remaining actions in progress</li> </ul>"},{"location":"architecture/meta-level/#known-issues_1","title":"Known Issues","text":"<ul> <li>Inconsistent changelog updates during pre-release workflows.</li> <li>Potential gaps in tagging validation.</li> </ul>"},{"location":"architecture/meta-level/#gaps-and-recommendations_1","title":"Gaps and Recommendations","text":"<ul> <li>Align release draft workflow with GitHub\u2019s generation process.</li> <li>Automate validation of tags and ensure consistency with semantic versioning.</li> </ul>"},{"location":"architecture/meta-level/#3-deployment-workflow","title":"3. Deployment Workflow","text":""},{"location":"architecture/meta-level/#purpose_2","title":"Purpose","text":"<ul> <li>Builds and deploys the documentation site via GitHub Pages.</li> </ul>"},{"location":"architecture/meta-level/#key-components_2","title":"Key Components","text":"<ul> <li>Pages Workflow: Automatically deploys changes from <code>main</code> to the GitHub Pages site.</li> <li>MkDocs: Static site generator for documentation.</li> </ul>"},{"location":"architecture/meta-level/#tools-and-actions_2","title":"Tools and Actions","text":"<ul> <li>GitHub Actions:</li> <li><code>mkdocs-gh-pages.yml</code> for deployment.</li> <li>Dependencies:</li> <li>Listed in <code>requirements.txt</code>.</li> </ul>"},{"location":"architecture/meta-level/#known-issues_2","title":"Known Issues","text":"<ul> <li>Occasional version mismatches between deployed site and repository source.</li> <li>Lack of validation for MkDocs version consistency.</li> </ul>"},{"location":"architecture/meta-level/#gaps-and-recommendations_2","title":"Gaps and Recommendations","text":"<ul> <li>Create a GitHub Action to validate MkDocs version consistency (back burner).</li> <li>Add deployment logs for improved troubleshooting.</li> </ul>"},{"location":"architecture/meta-level/#testing-strategy","title":"Testing Strategy","text":"<p>To ensure the reliability of these workflows:</p> <ol> <li>Unit Tests for Custom Actions:<ul> <li>Validate scripts like <code>version_calculation.py</code> and <code>update_changelog.py</code>.</li> </ul> </li> <li>Integration Tests:<ul> <li>Simulate end-to-end workflows to confirm alignment.</li> </ul> </li> <li>Manual QA:<ul> <li>Periodically review Pages deployments for accuracy.</li> </ul> </li> </ol>"},{"location":"architecture/meta-level/#documentation-goals","title":"Documentation Goals","text":"<ul> <li>Create detailed guides for each workflow in the <code>docs/</code> directory.</li> <li>Ensure README and MkDocs documentation align with actual practices.</li> <li>Maintain an up-to-date changelog that reflects all workflow updates.</li> </ul>"},{"location":"architecture/meta-level/#next-steps","title":"Next Steps","text":"<ol> <li>Audit Existing Workflows: Review YAML files and custom scripts for inconsistencies.</li> <li>Refine Documentation: Ensure all workflows are documented clearly and concisely.</li> <li>Test and Validate: Execute workflows to identify and fix gaps.</li> <li>Abstract and Generalize: Simplify changelog and versioning processes for flexibility.</li> </ol>"},{"location":"architecture/meta-level/#conclusion","title":"Conclusion","text":"<p>By documenting, testing, and refining these workflows, the repository can achieve consistency, clarity, and alignment across development and deployment processes. These steps will help stabilize the repository and move toward the 0.1 milestone.</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>Welcome to the Core Concepts section of the GitHub Toolkit documentation. This section provides a comprehensive understanding of the fundamental concepts and architecture that power the toolkit.</p>"},{"location":"concepts/#overview","title":"Overview","text":"<p>The GitHub Toolkit is built on innovative architectural patterns that enable scalable, maintainable, and reusable automation. Before diving into implementation details, it's essential to understand these core concepts.</p>"},{"location":"concepts/#key-concepts","title":"Key Concepts","text":""},{"location":"concepts/#fcm-bridge-system","title":"FCM Bridge System","text":"<p>The revolutionary approach that treats capability definitions as source code and generates GitHub Actions automatically. This is the foundation of the entire toolkit.</p>"},{"location":"concepts/#six-layer-architecture","title":"Six-Layer Architecture","text":"<p>Understanding the layered architecture (Axioms, Particles, Atoms, Molecules, Organisms, Ecosystems) that organizes capabilities from atomic operations to complex systems.</p>"},{"location":"concepts/#naming-conventions","title":"Naming Conventions","text":"<p>Learn about the hyphen vs underscore naming pattern and how it indicates whether components are generated or manually maintained.</p>"},{"location":"concepts/#lcmcp-pattern","title":"LCMCP Pattern","text":"<p>Discover the Log-Check-Modify-Check-Push pattern that ensures reliable Git operations across all toolkit actions.</p>"},{"location":"concepts/#quick-start-guide","title":"Quick Start Guide","text":"<ol> <li>Start with FCM Bridge: Understand how capabilities are defined and generated</li> <li>Learn the Layers: See how components build upon each other</li> <li>Understand Naming: Recognize generated vs manual components</li> <li>Master Patterns: Apply consistent patterns in your implementations</li> </ol>"},{"location":"concepts/#why-these-concepts-matter","title":"Why These Concepts Matter","text":"<ul> <li>Consistency: Uniform patterns across all components</li> <li>Maintainability: Clear separation of concerns and automated generation</li> <li>Scalability: Layered architecture supports growth</li> <li>Reliability: Proven patterns prevent common errors</li> </ul>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Explore each concept in detail through the linked pages</li> <li>Review the User Guide for practical implementation</li> <li>Check the Reference documentation for specific components</li> <li>Study Examples to see concepts in action</li> </ul>"},{"location":"concepts/fcm-bridge/","title":"Understanding the FCM Bridge System","text":"<p>The FCM Bridge System is the core innovation of the GitHub Toolkit, enabling the automated generation of GitHub Actions from Formal Conceptual Models (FCMs). This system maintains architectural purity while ensuring practical GitHub compatibility.</p>"},{"location":"concepts/fcm-bridge/#what-is-the-fcm-bridge","title":"What is the FCM Bridge?","text":"<p>The FCM Bridge is an automated compilation system that:</p> <ul> <li>Transforms FCM definitions into GitHub-compatible actions</li> <li>Maintains perfect synchronization between source and generated code</li> <li>Validates alignment between conceptual models and implementations</li> <li>Enforces the \"FCM as single source of truth\" principle</li> </ul>"},{"location":"concepts/fcm-bridge/#key-principle-fcms-are-source-code","title":"Key Principle: FCMs are Source Code","text":"<p>Critical Understanding: Generated actions (with hyphens in names) should never be edited directly\u2014they will be overwritten during regeneration. Manual actions (with underscores) contain custom implementation logic.</p> <pre><code>axioms/git/branch-operations.fcm  \u2192  actions/core/branch-operations/\n       (SOURCE)                          (GENERATED)\n</code></pre> <p>Think of it like compiling source code to binaries: - FCM files = Source code - Generated actions = Compiled binaries - Bridge system = Compiler</p>"},{"location":"concepts/fcm-bridge/#naming-convention","title":"Naming Convention","text":"<p>The repository uses a dual naming convention to distinguish between generated and manual actions:</p> <ul> <li>Generated Actions: Use hyphens (<code>branch-operations</code>, <code>tag-operations</code>) </li> <li>Created automatically from FCM definitions</li> <li>Should not be edited manually</li> <li> <p>Include <code>.bridge-sync</code> metadata files</p> </li> <li> <p>Manual Actions: Use underscores (<code>branch_operations</code>, <code>tag_operations</code>)</p> </li> <li>Contain custom implementation logic</li> <li>Include test suites and documentation</li> <li>Can be edited and maintained manually</li> </ul>"},{"location":"concepts/fcm-bridge/#bridge-architecture","title":"Bridge Architecture","text":"<p>The bridge system resolves the fundamental duality between architectural purity and GitHub's operational requirements:</p>"},{"location":"concepts/fcm-bridge/#three-layer-architecture","title":"Three-Layer Architecture","text":"<ol> <li>Source Layer: Pure FCM definitions (<code>axioms/</code>)</li> <li>Bridge Layer: Generation and validation machinery (<code>.bridge/</code>)</li> <li>Interface Layer: GitHub-compatible actions (<code>actions/</code>)</li> </ol> <pre><code>Repository Structure:\n\u251c\u2500\u2500 axioms/                 # SOURCE: Pure FCM definitions\n\u2502   \u251c\u2500\u2500 git/               # Git operations\n\u2502   \u2502   \u251c\u2500\u2500 branch-operations.fcm\n\u2502   \u2502   \u251c\u2500\u2500 tag-operations.fcm\n\u2502   \u2502   \u2514\u2500\u2500 commit-operations.fcm\n\u2502   \u2514\u2500\u2500 test/              # Test capabilities\n\u2502       \u2514\u2500\u2500 minimal.fcm\n\u2502\n\u251c\u2500\u2500 .bridge/               # BRIDGE: Generation system (if exists)\n\u2502   \u251c\u2500\u2500 generator.py       # FCM-to-action compiler\n\u2502   \u251c\u2500\u2500 validator.py       # Alignment checker\n\u2502   \u2514\u2500\u2500 manifest.json      # Source mappings\n\u2502\n\u2514\u2500\u2500 actions/               # INTERFACE: Generated actions\n    \u251c\u2500\u2500 core/              # Generated from axioms\n    \u2502   \u251c\u2500\u2500 branch-operations/  # Generated actions use hyphens\n    \u2502   \u2502   \u251c\u2500\u2500 action.yml      # Generated\n    \u2502   \u2502   \u251c\u2500\u2500 Dockerfile      # Generated\n    \u2502   \u2502   \u2514\u2500\u2500 .bridge-sync    # Generation metadata\n    \u2502   \u251c\u2500\u2500 branch_operations/  # Manual actions use underscores\n    \u2502   \u2502   \u251c\u2500\u2500 action.yml      # Manual\n    \u2502   \u2502   \u251c\u2500\u2500 main.py         # Manual implementation\n    \u2502   \u2502   \u2514\u2500\u2500 tests/          # Test suite\n    \u2502   \u2514\u2500\u2500 tag_operations/\n    \u2514\u2500\u2500 composite/         # Composite actions\n</code></pre>"},{"location":"concepts/fcm-bridge/#fcm-format-specification","title":"FCM Format Specification","text":"<p>FCMs use a structured format to define capabilities:</p>"},{"location":"concepts/fcm-bridge/#complete-fcm-example","title":"Complete FCM Example","text":"<p>Using <code>axioms/git/tag-operations.fcm</code> as reference:</p> <pre><code># Tag Operations Axiom - Formal Conceptual Model\nModel: git.tag-operations\nVersion: 1.0.0\nLayer: Axiom\nDomain: git\n\nCapability: Manage git tags with create, delete, list, push, and check operations\n\nParameters:\n  - action: create|delete|list|push|check\n  - tag_name: string (optional)\n  - message: string (optional)\n  - remote: boolean (optional)\n  - force: boolean (optional)\n  - target_commit: string (optional)\n  - prefix: string (optional)\n\nOutputs:\n  - tag_created\n  - tag_deleted\n  - tags_list\n  - tag_exists\n  - operation_status\n\nInterface:\n  type: docker\n  image: python:3.9-slim\n  requirements: [git]\n\nDependencies:\n  - git\n  - github-token (optional)\n\nPatterns:\n  - git-operation\n  - tag-management\n  - version-control\n</code></pre>"},{"location":"concepts/fcm-bridge/#fcm-structure-breakdown","title":"FCM Structure Breakdown","text":""},{"location":"concepts/fcm-bridge/#header-section","title":"Header Section","text":"<pre><code>Model: domain.capability-name    # Unique identifier\nVersion: 1.0.0                 # Semantic version\nLayer: Axiom                   # Architectural layer\nDomain: git                    # Functional domain\n</code></pre>"},{"location":"concepts/fcm-bridge/#capability-description","title":"Capability Description","text":"<pre><code>Capability: Brief description of what this capability provides\n</code></pre>"},{"location":"concepts/fcm-bridge/#parameters-section","title":"Parameters Section","text":"<pre><code>Parameters:\n  - action: create|delete|list   # Choice parameter with options\n  - tag_name: string (optional)  # Optional string parameter\n  - force: boolean               # Required boolean parameter\n</code></pre> <p>Parameter Types: - <code>string</code>: Text input - <code>boolean</code>: True/false value - <code>number</code>: Numeric input - <code>choice</code>: Pipe-separated options (<code>create|delete|list</code>) - <code>(optional)</code>: Marks parameter as not required</p>"},{"location":"concepts/fcm-bridge/#outputs-section","title":"Outputs Section","text":"<pre><code>Outputs:\n  - operation_result    # Simple output name\n  - data_list          # List output\n  - status_flag        # Boolean output\n</code></pre>"},{"location":"concepts/fcm-bridge/#interface-definition","title":"Interface Definition","text":"<pre><code>Interface:\n  type: docker              # Execution type (always docker)\n  image: python:3.9-slim    # Base Docker image\n  requirements: [git]       # System dependencies\n</code></pre>"},{"location":"concepts/fcm-bridge/#dependencies-and-patterns","title":"Dependencies and Patterns","text":"<pre><code>Dependencies:\n  - git                     # Required system tools\n  - github-token (optional) # Optional secrets\n\nPatterns:\n  - git-operation          # Capability patterns\n  - version-control        # Domain patterns\n</code></pre>"},{"location":"concepts/fcm-bridge/#generation-process","title":"Generation Process","text":"<p>The bridge system generates GitHub Actions through these steps:</p>"},{"location":"concepts/fcm-bridge/#1-fcm-parsing","title":"1. FCM Parsing","text":"<p>The generator extracts: - Model metadata and versioning - Parameter definitions and types - Output specifications - Interface requirements - Dependencies and patterns</p>"},{"location":"concepts/fcm-bridge/#2-github-action-generation","title":"2. GitHub Action Generation","text":"<p>Generated <code>action.yml</code>: <pre><code>name: 'Tag Operations'\ndescription: 'Manage git tags with create, delete, list, push, and check operations'\nauthor: 'Deepworks'\ninputs:\n  action:\n    description: 'Tag operation to perform (create, delete, list, push, check)'\n    required: true\n  tag_name:\n    description: 'Name of the tag to operate on'\n    required: false\n  # ... other parameters\noutputs:\n  operation_status:\n    description: 'Operation result status'\n  # ... other outputs\nruns:\n  using: 'docker'\n  image: 'Dockerfile'\n</code></pre></p> <p>Generated <code>Dockerfile</code>: <pre><code>FROM python:3.9-slim\n\n# Install git (from FCM requirements)\nRUN apt-get update &amp;&amp; apt-get install -y git &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /app\n\n# Copy implementation\nCOPY main.py .\n\n# Set entrypoint\nENTRYPOINT [\"python\", \"/app/main.py\"]\n</code></pre></p>"},{"location":"concepts/fcm-bridge/#3-sync-metadata-generation","title":"3. Sync Metadata Generation","text":"<p>Generated <code>.bridge-sync</code>: <pre><code>{\n  \"source_fcm\": \"axioms/git/tag-operations.fcm\",\n  \"model\": \"git.tag-operations\",\n  \"version\": \"1.0.0\",\n  \"generated_at\": \"2025-06-07T16:01:14Z\",\n  \"generator_version\": \"production-1.0.0\",\n  \"checksum\": \"97af7b6124d0ed7a87e8e6e87c4c61698aa9c35a5220c5c5a8604e13ab7b25e8\"\n}\n</code></pre></p> <p>This metadata enables: - Source tracking: Links action back to originating FCM - Version control: Tracks FCM and generator versions - Integrity validation: Checksum ensures synchronization - Generation history: Timestamps for change tracking</p>"},{"location":"concepts/fcm-bridge/#working-with-the-bridge-system","title":"Working with the Bridge System","text":""},{"location":"concepts/fcm-bridge/#creating-new-capabilities","title":"Creating New Capabilities","text":"<ol> <li>Define the FCM: Create a new <code>.fcm</code> file in the appropriate <code>axioms/</code> subdirectory</li> </ol> <pre><code># axioms/git/new-operation.fcm\nModel: git.new-operation\nVersion: 1.0.0\nLayer: Axiom\nDomain: git\n\nCapability: Perform new git operation\n\nParameters:\n  - action: create|delete\n  - name: string\n\nOutputs:\n  - result\n\nInterface:\n  type: docker\n  image: python:3.9-slim\n  requirements: [git]\n</code></pre> <ol> <li>Generate the Action: Use the bridge generation system</li> </ol> <pre><code># Via Makefile\nmake generate\n\n# Or directly (if .bridge scripts exist)\nbash .bridge/production-generator.sh\n</code></pre> <ol> <li> <p>Implement the Logic: Create the <code>main.py</code> implementation following the patterns from existing actions</p> </li> <li> <p>Validate: Ensure the generated action works correctly</p> </li> </ol> <pre><code># Validation\nmake validate\n</code></pre>"},{"location":"concepts/fcm-bridge/#modifying-existing-capabilities","title":"Modifying Existing Capabilities","text":"<p>IMPORTANT: Never edit generated actions directly. Always modify the FCM source.</p> <ol> <li>Edit the FCM: Modify the source definition in <code>axioms/</code></li> </ol> <pre><code># Edit axioms/git/branch-operations.fcm\nParameters:\n  - action: create|delete|list|checkout|merge\n  - new_parameter: string (optional)  # Add new parameter\n</code></pre> <ol> <li>Regenerate: Run the bridge generation</li> </ol> <pre><code>make generate\n</code></pre> <ol> <li> <p>Update Implementation: Modify <code>main.py</code> to handle new parameters (if needed)</p> </li> <li> <p>Validate: Check that everything works</p> </li> </ol> <pre><code>make validate\n</code></pre>"},{"location":"concepts/fcm-bridge/#bridge-commands","title":"Bridge Commands","text":"<p>The bridge system provides several operational commands via <code>Makefile.bridge</code>:</p> <pre><code># Generate all actions from FCMs\nmake generate\n\n# Validate all generated actions\nmake validate\n\n# Check synchronization status\nmake sync\n\n# Check if regeneration is needed\nmake check\n\n# Clean generated metadata (preserves FCMs)\nmake clean\n\n# Show help\nmake help\n</code></pre>"},{"location":"concepts/fcm-bridge/#bridge-production-pipeline","title":"Bridge Production Pipeline","text":"<p>The bridge system includes automated CI/CD integration:</p> <p>Location: <code>.github/workflows/bridge-production.yml</code></p> <p>Triggers: - Changes to FCM files (<code>axioms/**/*.fcm</code>) - Changes to bridge system (<code>.bridge/**</code>) - Manual dispatch - Version tags</p> <p>Process: 1. Generate: Creates actions from all FCMs 2. Validate: Ensures generated actions are correct 3. Commit: Automatically commits generated changes 4. Push: Updates repository with generated actions</p> <p>Example workflow run: <pre><code>- name: Generate Actions from FCMs\n  run: |\n    bash .bridge/production-generator.sh\n\n- name: Validate Generated Actions\n  run: |\n    bash .bridge/production-validator.sh\n\n- name: Commit Generated Actions\n  if: steps.check-changes.outputs.changes == 'true'\n  run: |\n    git add actions/\n    git commit -m \"chore: Regenerate actions from FCMs [skip ci]\"\n</code></pre></p>"},{"location":"concepts/fcm-bridge/#validation-system","title":"Validation System","text":"<p>The bridge includes comprehensive validation to ensure integrity:</p>"},{"location":"concepts/fcm-bridge/#automatic-validation-checks","title":"Automatic Validation Checks","text":"<ol> <li>Source-Interface Alignment: Every FCM has corresponding action</li> <li>Sync Metadata Validation: Every generated action has <code>.bridge-sync</code></li> <li>Checksum Verification: Generated actions match FCM checksums</li> <li>GitHub Compatibility: Actions follow GitHub Action specifications</li> <li>No Manual Edits: Ensures generated files haven't been manually modified</li> </ol>"},{"location":"concepts/fcm-bridge/#sync-monitoring","title":"Sync Monitoring","text":"<p>The system tracks: - FCM-to-Action mappings: Which FCM generates which action - Generation timestamps: When actions were last generated - Version tracking: FCM versions and generator versions - Integrity checksums: SHA256 hashes for change detection</p>"},{"location":"concepts/fcm-bridge/#example-sync-check","title":"Example Sync Check","text":"<pre><code>make sync\n# Output:\n# Checking FCM-Action synchronization...\n#   \u2713 In sync: axioms/git/branch-operations.fcm\n#   \u2713 In sync: axioms/git/tag-operations.fcm\n#   \u2717 Out of sync: axioms/git/commit-operations.fcm\n</code></pre>"},{"location":"concepts/fcm-bridge/#best-practices","title":"Best Practices","text":""},{"location":"concepts/fcm-bridge/#fcm-development","title":"FCM Development","text":"<ol> <li>Single Responsibility: Each FCM defines one atomic capability</li> <li>Clear Naming: Use descriptive model names and parameter names</li> <li>Proper Typing: Use appropriate parameter types and constraints</li> <li>Minimal Dependencies: Reduce external requirements where possible</li> <li>Version Management: Update versions for significant changes</li> </ol>"},{"location":"concepts/fcm-bridge/#bridge-operations","title":"Bridge Operations","text":"<ol> <li>Regular Validation: Run <code>make sync</code> after FCM changes</li> <li>Clean Generation: Always regenerate after modifications</li> <li>Test Generated Actions: Verify functionality after generation</li> <li>Document Changes: Update documentation when FCMs change</li> </ol>"},{"location":"concepts/fcm-bridge/#integration-guidelines","title":"Integration Guidelines","text":"<ol> <li>Use Generated Actions: Always reference actions from <code>actions/</code> directory</li> <li>Implement Logic Separately: Provide actual functionality in <code>main.py</code></li> <li>Follow Patterns: Use established patterns from existing actions</li> <li>Test Thoroughly: Include comprehensive test coverage</li> </ol>"},{"location":"concepts/fcm-bridge/#migration-from-traditional-actions","title":"Migration from Traditional Actions","text":""},{"location":"concepts/fcm-bridge/#process","title":"Process","text":"<ol> <li>Analyze Existing Action: Review current structure and functionality</li> <li>Extract FCM Definition: Create FCM capturing the capability</li> <li>Generate New Action: Use bridge to create action from FCM</li> <li>Implement Logic: Port existing logic to generated structure</li> <li>Validate Functionality: Ensure equivalent behavior</li> <li>Replace References: Update workflows to use generated action</li> </ol>"},{"location":"concepts/fcm-bridge/#example-migration","title":"Example Migration","text":"<p>Before (Traditional action): <pre><code># actions/manual/my-action/action.yml\nname: My Action\ndescription: Does something\ninputs:\n  param1:\n    description: Parameter 1\n    required: true\n# ... manual maintenance\n</code></pre></p> <p>After (FCM-generated): <pre><code># axioms/domain/my-action.fcm\nModel: domain.my-action\nVersion: 1.0.0\nLayer: Axiom\nDomain: domain\n\nCapability: Does something\n\nParameters:\n  - param1: string\n\nOutputs:\n  - result\n\nInterface:\n  type: docker\n  image: python:3.9-slim\n</code></pre></p>"},{"location":"concepts/fcm-bridge/#troubleshooting","title":"Troubleshooting","text":""},{"location":"concepts/fcm-bridge/#common-issues","title":"Common Issues","text":"<p>Generation Failures: - Check FCM syntax and required sections - Verify parameter definitions are correct - Ensure proper indentation and formatting</p> <p>Validation Errors: - Run <code>make sync</code> to check synchronization status - Verify no manual edits were made to generated files - Check that FCM hasn't changed since last generation</p> <p>Action Compatibility: - Validate <code>action.yml</code> structure follows GitHub specs - Test generated actions in actual workflows - Check Docker image and entrypoint configuration</p>"},{"location":"concepts/fcm-bridge/#debug-commands","title":"Debug Commands","text":"<pre><code># Check FCM syntax\ncat axioms/git/branch-operations.fcm\n\n# View sync status\ncat actions/core/branch-operations/.bridge-sync\n\n# Check generated action\ncat actions/core/branch-operations/action.yml\n\n# Test sync status\nmake sync\n\n# Regenerate specific action (via make)\nmake clean &amp;&amp; make generate\n</code></pre>"},{"location":"concepts/fcm-bridge/#future-enhancements","title":"Future Enhancements","text":"<p>The FCM Bridge system is designed for continuous evolution:</p>"},{"location":"concepts/fcm-bridge/#planned-features","title":"Planned Features","text":"<ul> <li>Pattern Generation: Composite actions from workflow patterns</li> <li>Dependency Resolution: Automatic package management</li> <li>Live Monitoring: Real-time synchronization validation</li> <li>Enhanced Templates: Improved generation templates</li> </ul>"},{"location":"concepts/fcm-bridge/#integration-opportunities","title":"Integration Opportunities","text":"<ul> <li>CI/CD Integration: Automated generation triggers</li> <li>Documentation Generation: Automatic docs from FCMs</li> <li>Testing Framework: Automated action testing</li> <li>Registry Integration: Automatic action publishing</li> </ul>"},{"location":"concepts/fcm-bridge/#related-guides","title":"Related Guides","text":"<ul> <li>Understanding Actions - Learn about generated actions</li> <li>Understanding Workflows - How to use generated actions</li> <li>Testing Framework - Testing generated actions</li> </ul>"},{"location":"concepts/fcm-bridge/#summary","title":"Summary","text":"<p>The FCM Bridge System is the foundation that enables the GitHub Toolkit to maintain both architectural purity and practical utility. By treating FCMs as source code and actions as compiled artifacts, the system ensures consistency, reliability, and maintainability while providing the flexibility needed for real-world automation.</p>"},{"location":"concepts/lcmcp-pattern/","title":"LCMCP Pattern","text":"<p>The Loosely Coupled Modular Composition Pattern (LCMCP) is a fundamental architectural pattern used throughout the GitHub Toolkit. This pattern ensures components can be combined effectively while maintaining independence and flexibility.</p>"},{"location":"concepts/lcmcp-pattern/#pattern-overview","title":"Pattern Overview","text":"<p>LCMCP enables the toolkit's modular architecture by defining how components at different layers interact while remaining loosely coupled.</p> <p>Note: This documentation is currently incomplete. The LCMCP pattern is referenced throughout the codebase but needs detailed documentation from the project maintainers.</p>"},{"location":"concepts/lcmcp-pattern/#key-principles","title":"Key Principles","text":"<p>Based on the name and usage throughout the toolkit, LCMCP appears to follow these principles:</p>"},{"location":"concepts/lcmcp-pattern/#loosely-coupled","title":"Loosely Coupled","text":"<ul> <li>Components depend on interfaces, not implementations</li> <li>Changes in one component don't require changes in others</li> <li>Clear boundaries between different architectural layers</li> </ul>"},{"location":"concepts/lcmcp-pattern/#modular","title":"Modular","text":"<ul> <li>Each component has a single, focused responsibility</li> <li>Components can be developed and tested independently</li> <li>Functionality is organized into discrete, reusable modules</li> </ul>"},{"location":"concepts/lcmcp-pattern/#composition","title":"Composition","text":"<ul> <li>Complex functionality built by combining simpler components</li> <li>Higher-level components orchestrate lower-level ones</li> <li>Flexible assembly of capabilities to create solutions</li> </ul>"},{"location":"concepts/lcmcp-pattern/#usage-in-the-toolkit","title":"Usage in the Toolkit","text":"<p>The LCMCP pattern is evident in several areas:</p>"},{"location":"concepts/lcmcp-pattern/#layer-composition","title":"Layer Composition","text":"<ul> <li>Atoms (generated actions) compose into Molecules (composite actions)</li> <li>Molecules compose into Organisms (workflows)</li> <li>Each layer builds upon the previous while remaining independent</li> </ul>"},{"location":"concepts/lcmcp-pattern/#action-design","title":"Action Design","text":"<ul> <li>Actions have clear input/output interfaces</li> <li>Actions can be combined in different workflows</li> <li>Implementation details are hidden behind interfaces</li> </ul>"},{"location":"concepts/lcmcp-pattern/#fcm-bridge-system","title":"FCM Bridge System","text":"<ul> <li>FCM definitions are loosely coupled from implementations</li> <li>Generated actions are modular and composable</li> <li>Bridge system enables flexible composition of capabilities</li> </ul>"},{"location":"concepts/lcmcp-pattern/#documentation-needed","title":"Documentation Needed","text":"<p>This pattern requires additional documentation covering:</p> <ul> <li> Detailed pattern definition and rules</li> <li> Implementation guidelines for each layer</li> <li> Examples of proper LCMCP application</li> <li> Anti-patterns and what to avoid</li> <li> Testing strategies for loosely coupled systems</li> </ul>"},{"location":"concepts/lcmcp-pattern/#references","title":"References","text":"<p>See the Documentation Gaps page for other concepts that need detailed documentation.</p>"},{"location":"concepts/lcmcp-pattern/#contributing","title":"Contributing","text":"<p>If you have knowledge of the LCMCP pattern as implemented in this toolkit, please contribute to this documentation by:</p> <ol> <li>Adding detailed pattern description</li> <li>Providing implementation examples</li> <li>Documenting best practices</li> <li>Including anti-patterns to avoid</li> </ol>"},{"location":"concepts/naming-convention/","title":"Naming Conventions","text":"<p>\u26a0\ufe0f Documentation Warning: This page describes observed naming patterns but may overstate their systematic application. The hyphen vs underscore distinction and other conventions need verification against the actual codebase implementation. See Documentation Gaps.</p> <p>The GitHub Toolkit appears to use certain naming patterns that may indicate component characteristics. This documentation attempts to capture observed patterns but requires validation.</p>"},{"location":"concepts/naming-convention/#overview","title":"Overview","text":"<p>Naming conventions in the toolkit serve as visual indicators of: - Component origin (generated vs manual) - Visibility scope (private vs public) - Architectural layer (atoms, molecules, organisms) - Functional domain (git, versioning, release)</p>"},{"location":"concepts/naming-convention/#core-naming-patterns","title":"Core Naming Patterns","text":""},{"location":"concepts/naming-convention/#hyphen-vs-underscore-convention","title":"Hyphen vs Underscore Convention","text":"<p>This is the most important naming distinction in the toolkit:</p>"},{"location":"concepts/naming-convention/#hyphenated-names-kebab-case","title":"Hyphenated Names (kebab-case)","text":"<p>Pattern: <code>component-name</code> Indicates: Generated from FCM files via the bridge system Example: <code>branch-operations</code>, <code>tag-operations</code>, <code>version-calculator</code></p> <p>Characteristics: - Automatically generated - Should never be edited manually - Found in <code>actions/core/</code> directory - Have accompanying <code>.bridge-sync</code> metadata</p>"},{"location":"concepts/naming-convention/#underscore-names-snake_case","title":"Underscore Names (snake_case)","text":"<p>Pattern: <code>component_name</code> Indicates: Manually created and maintained Example: <code>git_ops</code>, <code>release_operations</code>, <code>update_changelog</code></p> <p>Characteristics: - Hand-crafted implementations - Can be edited directly - Found in <code>actions/composite/</code> directory - No bridge synchronization</p>"},{"location":"concepts/naming-convention/#workflow-naming-conventions","title":"Workflow Naming Conventions","text":""},{"location":"concepts/naming-convention/#privateinternal-workflows","title":"Private/Internal Workflows","text":"<p>Pattern: <code>.category.name.yml</code> Purpose: Repository-specific workflows not for external use Examples: - <code>.flow.update_version.yml</code> - <code>.core.internal_setup.yml</code></p> <p>Usage: <pre><code># Can only be used within the same repository\nuses: ./.github/workflows/.flow.update_version.yml\n</code></pre></p>"},{"location":"concepts/naming-convention/#public-workflows","title":"Public Workflows","text":"<p>Pattern: <code>category.name.yml</code> (no leading dot) Purpose: Reusable workflows for external consumption Examples: - <code>flow.prepare-release.yml</code> - <code>core.action.version-calculator.yml</code></p> <p>Usage: <pre><code># Can be used from external repositories\nuses: deepworks-net/github.toolkit/.github/workflows/flow.prepare-release.yml@v1\n</code></pre></p>"},{"location":"concepts/naming-convention/#category-prefixes","title":"Category Prefixes","text":""},{"location":"concepts/naming-convention/#core-actions","title":"Core Actions","text":"<p>Pattern: <code>core.action.name</code> Purpose: Atomic, reusable operations Example: <code>core.action.branch_operations.yml</code></p>"},{"location":"concepts/naming-convention/#flow-workflows","title":"Flow Workflows","text":"<p>Pattern: <code>flow.name</code> Purpose: Higher-level business processes Example: <code>flow.prepare-release.yml</code></p>"},{"location":"concepts/naming-convention/#test-workflows","title":"Test Workflows","text":"<p>Pattern: <code>test.type.name</code> Purpose: Validation and testing Example: <code>test.core.action.version_calculator.yml</code></p>"},{"location":"concepts/naming-convention/#file-and-directory-naming","title":"File and Directory Naming","text":""},{"location":"concepts/naming-convention/#action-directories","title":"Action Directories","text":"<pre><code>actions/\n\u251c\u2500\u2500 core/                    # Generated actions (hyphenated)\n\u2502   \u251c\u2500\u2500 branch-operations/\n\u2502   \u251c\u2500\u2500 tag-operations/\n\u2502   \u2514\u2500\u2500 version-calculator/\n\u251c\u2500\u2500 composite/              # Manual actions (underscored)\n\u2502   \u251c\u2500\u2500 git_ops/\n\u2502   \u2514\u2500\u2500 release_operations/\n</code></pre>"},{"location":"concepts/naming-convention/#fcm-files","title":"FCM Files","text":"<p>Pattern: <code>domain/capability-name.fcm</code> Location: <code>axioms/domain/capability-name.fcm</code> Examples: - <code>axioms/git/branch-operations.fcm</code> - <code>axioms/versioning/calculator.fcm</code></p>"},{"location":"concepts/naming-convention/#documentation-files","title":"Documentation Files","text":"<p>Pattern: <code>descriptive-name.md</code> (always hyphenated) Examples: - <code>understanding-workflows.md</code> - <code>fcm-bridge.md</code> - <code>six-layers.md</code></p>"},{"location":"concepts/naming-convention/#domain-naming","title":"Domain Naming","text":""},{"location":"concepts/naming-convention/#git-domain","title":"Git Domain","text":"<ul> <li>Prefix: <code>git.</code></li> <li>Examples: <code>git.branch-operations</code>, <code>git.tag-operations</code></li> </ul>"},{"location":"concepts/naming-convention/#versioning-domain","title":"Versioning Domain","text":"<ul> <li>Prefix: <code>versioning.</code></li> <li>Examples: <code>versioning.calculator</code>, <code>versioning.updater</code></li> </ul>"},{"location":"concepts/naming-convention/#release-domain","title":"Release Domain","text":"<ul> <li>Prefix: <code>release.</code></li> <li>Examples: <code>release.notes</code>, <code>release.operations</code></li> </ul>"},{"location":"concepts/naming-convention/#parameter-and-output-naming","title":"Parameter and Output Naming","text":""},{"location":"concepts/naming-convention/#input-parameters","title":"Input Parameters","text":"<p>Pattern: <code>snake_case</code> Examples: - <code>branch_name</code> - <code>tag_prefix</code> - <code>commit_message</code></p>"},{"location":"concepts/naming-convention/#output-variables","title":"Output Variables","text":"<p>Pattern: <code>snake_case</code> Examples: - <code>operation_status</code> - <code>created_branch</code> - <code>next_version</code></p>"},{"location":"concepts/naming-convention/#special-naming-rules","title":"Special Naming Rules","text":""},{"location":"concepts/naming-convention/#version-tags","title":"Version Tags","text":"<p>Pattern: <code>v{major}.{minor}.{patch}</code> Examples: <code>v1.0.0</code>, <code>v2.1.3</code></p>"},{"location":"concepts/naming-convention/#branch-names","title":"Branch Names","text":"<p>Development: <code>develop</code>, <code>main</code>, <code>staging</code> Features: <code>feature/description</code> Releases: <code>release/v1.0.0</code></p>"},{"location":"concepts/naming-convention/#commit-messages","title":"Commit Messages","text":"<p>Pattern: <code>type: description</code> Types: <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>chore</code>, <code>test</code></p>"},{"location":"concepts/naming-convention/#anti-patterns-to-avoid","title":"Anti-Patterns to Avoid","text":""},{"location":"concepts/naming-convention/#1-mixing-conventions","title":"1. Mixing Conventions","text":"<p>\u274c <code>branch_operations</code> (underscore for generated action) \u274c <code>git-ops</code> (hyphen for manual action) \u2705 <code>branch-operations</code> (generated) \u2705 <code>git_ops</code> (manual)</p>"},{"location":"concepts/naming-convention/#2-unclear-visibility","title":"2. Unclear Visibility","text":"<p>\u274c <code>flow.internal.yml</code> (unclear if private) \u2705 <code>.flow.internal.yml</code> (clearly private)</p>"},{"location":"concepts/naming-convention/#3-inconsistent-casing","title":"3. Inconsistent Casing","text":"<p>\u274c <code>Branch-Operations</code> (mixed case) \u274c <code>BRANCH_OPERATIONS</code> (all caps) \u2705 <code>branch-operations</code> (consistent)</p>"},{"location":"concepts/naming-convention/#4-generic-names","title":"4. Generic Names","text":"<p>\u274c <code>operations</code>, <code>utils</code>, <code>helpers</code> \u2705 <code>git-operations</code>, <code>version-utils</code>, <code>release-helpers</code></p>"},{"location":"concepts/naming-convention/#migration-guidelines","title":"Migration Guidelines","text":"<p>When renaming components:</p> <ol> <li>Check Dependencies: Find all references to the old name</li> <li>Update Systematically: Rename in order:</li> <li>FCM source (if applicable)</li> <li>Action/workflow files</li> <li>Documentation</li> <li>Tests</li> <li>Maintain Compatibility: Consider aliases or redirects</li> <li>Document Changes: Update CHANGELOG and migration guides</li> </ol>"},{"location":"concepts/naming-convention/#validation-tools","title":"Validation Tools","text":"<p>The toolkit includes validation for naming:</p> <pre><code># Check naming conventions\nmake validate-naming\n\n# Common issues detected:\n# - Underscores in generated actions\n# - Missing dot prefix for private workflows\n# - Inconsistent parameter naming\n</code></pre>"},{"location":"concepts/naming-convention/#quick-reference","title":"Quick Reference","text":"Component Type Pattern Example Location Generated Action <code>hyphen-case</code> <code>branch-operations</code> <code>actions/core/</code> Manual Action <code>snake_case</code> <code>git_ops</code> <code>actions/composite/</code> Private Workflow <code>.prefix.name.yml</code> <code>.flow.internal.yml</code> <code>.github/workflows/</code> Public Workflow <code>prefix.name.yml</code> <code>flow.release.yml</code> <code>.github/workflows/</code> FCM File <code>domain/name.fcm</code> <code>git/branches.fcm</code> <code>axioms/</code> Parameters <code>snake_case</code> <code>branch_name</code> Action inputs Documentation <code>hyphen-case.md</code> <code>user-guide.md</code> <code>docs/</code>"},{"location":"concepts/naming-convention/#summary","title":"Summary","text":"<p>Consistent naming conventions are essential for maintaining a clean, understandable codebase. By following these conventions, you help ensure that: - Component origins are immediately clear - Public/private boundaries are respected - The codebase remains navigable - Automation tools work correctly</p> <p>Remember: when in doubt, check existing similar components and follow their pattern.</p>"},{"location":"concepts/six-layers/","title":"Six-Layer Architecture","text":"<p>\u26a0\ufe0f Documentation Warning: This page describes a conceptual architectural model that may not fully reflect the current implementation. The \"six-layer\" terminology and specific layer definitions need validation against the actual codebase. See Documentation Gaps for more information.</p> <p>The GitHub Toolkit appears to employ a layered architecture that organizes capabilities from basic operations to complex solutions. This page attempts to document the observed patterns but requires verification.</p>"},{"location":"concepts/six-layers/#architecture-overview","title":"Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        6. ECOSYSTEMS               \u2502 Complete solutions\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        5. ORGANISMS                \u2502 Complex workflows\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        4. MOLECULES                \u2502 Composite actions\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        3. ATOMS                    \u2502 Basic actions\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        2. PARTICLES                \u2502 Shared utilities\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        1. AXIOMS                   \u2502 Core capabilities\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"concepts/six-layers/#layer-definitions","title":"Layer Definitions","text":""},{"location":"concepts/six-layers/#1-axioms-foundation-layer","title":"1. Axioms (Foundation Layer)","text":"<p>Purpose: Define fundamental capabilities as FCM (Functional Capability Model) files</p> <p>Characteristics: - Source of truth for all generated actions - Domain-specific capability definitions - No implementation logic, pure specifications - Located in <code>axioms/</code> directory</p> <p>Example: <pre><code>Model: git.branch-operations\nVersion: 1.0.0\nLayer: Axiom\nDomain: git\nCapability: Create, delete, list branches\n</code></pre></p>"},{"location":"concepts/six-layers/#2-particles-utility-layer","title":"2. Particles (Utility Layer)","text":"<p>Purpose: Shared utilities and helper functions used across multiple actions</p> <p>Characteristics: - Reusable code snippets - Common patterns and functions - Not exposed as actions themselves - Support code for higher layers</p> <p>Examples: - Git command utilities - Error handling functions - Input validation helpers - Output formatting utilities</p>"},{"location":"concepts/six-layers/#3-atoms-core-actions-layer","title":"3. Atoms (Core Actions Layer)","text":"<p>Purpose: Basic, single-purpose GitHub Actions generated from Axioms</p> <p>Characteristics: - Generated automatically from FCM definitions - Atomic operations (do one thing well) - Hyphenated names (e.g., <code>branch-operations</code>) - Located in <code>actions/core/</code></p> <p>Examples: - <code>branch-operations</code>: Create, delete, list branches - <code>tag-operations</code>: Manage Git tags - <code>commit-operations</code>: Handle commits</p>"},{"location":"concepts/six-layers/#4-molecules-composite-actions-layer","title":"4. Molecules (Composite Actions Layer)","text":"<p>Purpose: Combine multiple atoms into higher-level operations</p> <p>Characteristics: - Manually created composite actions - Underscore naming (e.g., <code>git_ops</code>) - Orchestrate multiple atomic actions - Located in <code>actions/composite/</code></p> <p>Examples: - <code>git_ops</code>: Combines branch, commit, and push operations - <code>release_operations</code>: Orchestrates release workflow - <code>update_changelog</code>: Manages changelog updates</p>"},{"location":"concepts/six-layers/#5-organisms-workflow-layer","title":"5. Organisms (Workflow Layer)","text":"<p>Purpose: Complete workflow implementations for specific processes</p> <p>Characteristics: - Full GitHub workflow files - Implement business processes - Use molecules and atoms - Located in <code>.github/workflows/</code></p> <p>Examples: - <code>prepare-release.yml</code>: Complete release preparation - <code>update-changelog.yml</code>: Changelog management workflow - <code>create-release-tag.yml</code>: Tag creation workflow</p>"},{"location":"concepts/six-layers/#6-ecosystems-solution-layer","title":"6. Ecosystems (Solution Layer)","text":"<p>Purpose: Complete, integrated solutions for entire domains</p> <p>Characteristics: - Full end-to-end automation - Multiple workflows working together - Complete CI/CD pipelines - Domain-specific solutions</p> <p>Examples: - Complete release management system - Full project automation suite - Integrated development workflow</p>"},{"location":"concepts/six-layers/#layer-interactions","title":"Layer Interactions","text":""},{"location":"concepts/six-layers/#bottom-up-dependencies","title":"Bottom-Up Dependencies","text":"<pre><code>Axioms \u2192 Atoms \u2192 Molecules \u2192 Organisms \u2192 Ecosystems\n</code></pre> <p>Each layer can only depend on layers below it: - Atoms are generated from Axioms - Molecules use Atoms - Organisms use Molecules and Atoms - Ecosystems orchestrate Organisms</p>"},{"location":"concepts/six-layers/#communication-patterns","title":"Communication Patterns","text":"<ol> <li>Parameter Passing: Higher layers pass parameters to lower layers</li> <li>Output Consumption: Higher layers consume outputs from lower layers</li> <li>Error Propagation: Errors bubble up through layers</li> <li>State Management: Each layer manages its own state</li> </ol>"},{"location":"concepts/six-layers/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"concepts/six-layers/#axiom-layer-rules","title":"Axiom Layer Rules","text":"<ol> <li>Define capabilities, not implementations</li> <li>Keep specifications atomic and focused</li> <li>Version changes carefully</li> <li>Document all parameters and outputs</li> </ol>"},{"location":"concepts/six-layers/#atom-layer-rules","title":"Atom Layer Rules","text":"<ol> <li>Never edit generated files directly</li> <li>Implement single, focused operations</li> <li>Follow LCMCP pattern for Git operations</li> <li>Provide comprehensive error handling</li> </ol>"},{"location":"concepts/six-layers/#molecule-layer-rules","title":"Molecule Layer Rules","text":"<ol> <li>Combine atoms for specific use cases</li> <li>Add value through orchestration</li> <li>Handle complex state management</li> <li>Provide clear interfaces</li> </ol>"},{"location":"concepts/six-layers/#organism-layer-rules","title":"Organism Layer Rules","text":"<ol> <li>Implement complete business processes</li> <li>Handle all edge cases</li> <li>Provide clear documentation</li> <li>Include error recovery</li> </ol>"},{"location":"concepts/six-layers/#ecosystem-layer-rules","title":"Ecosystem Layer Rules","text":"<ol> <li>Provide complete solutions</li> <li>Document integration points</li> <li>Include deployment guides</li> <li>Maintain backward compatibility</li> </ol>"},{"location":"concepts/six-layers/#benefits-of-layered-architecture","title":"Benefits of Layered Architecture","text":""},{"location":"concepts/six-layers/#1-modularity","title":"1. Modularity","text":"<ul> <li>Each layer has clear responsibilities</li> <li>Components are loosely coupled</li> <li>Easy to modify individual layers</li> </ul>"},{"location":"concepts/six-layers/#2-reusability","title":"2. Reusability","text":"<ul> <li>Lower layers used by multiple higher layers</li> <li>Common patterns implemented once</li> <li>Reduced code duplication</li> </ul>"},{"location":"concepts/six-layers/#3-testability","title":"3. Testability","text":"<ul> <li>Each layer can be tested independently</li> <li>Clear interfaces between layers</li> <li>Isolated failure points</li> </ul>"},{"location":"concepts/six-layers/#4-maintainability","title":"4. Maintainability","text":"<ul> <li>Changes isolated to specific layers</li> <li>Clear dependency management</li> <li>Predictable impact analysis</li> </ul>"},{"location":"concepts/six-layers/#5-scalability","title":"5. Scalability","text":"<ul> <li>New capabilities added at appropriate layer</li> <li>Existing layers extended without breaking changes</li> <li>Growth doesn't increase complexity exponentially</li> </ul>"},{"location":"concepts/six-layers/#practical-examples","title":"Practical Examples","text":""},{"location":"concepts/six-layers/#example-1-creating-a-release","title":"Example 1: Creating a Release","text":"<pre><code>Ecosystem: Release Management System\n    \u2193\nOrganism: prepare-release.yml workflow\n    \u2193\nMolecules: git_ops, release_operations\n    \u2193\nAtoms: branch-operations, tag-operations, commit-operations\n    \u2193\nAxioms: git.branch-operations.fcm, git.tag-operations.fcm\n</code></pre>"},{"location":"concepts/six-layers/#example-2-managing-versions","title":"Example 2: Managing Versions","text":"<pre><code>Organism: Version update workflow\n    \u2193\nMolecules: version_update composite action\n    \u2193\nAtoms: version-calculator, version-updater\n    \u2193\nAxioms: versioning.calculator.fcm, versioning.updater.fcm\n</code></pre>"},{"location":"concepts/six-layers/#best-practices","title":"Best Practices","text":""},{"location":"concepts/six-layers/#1-layer-selection","title":"1. Layer Selection","text":"<ul> <li>Start at the lowest appropriate layer</li> <li>Don't skip layers unnecessarily</li> <li>Consider reusability needs</li> </ul>"},{"location":"concepts/six-layers/#2-interface-design","title":"2. Interface Design","text":"<ul> <li>Keep interfaces simple and clear</li> <li>Document all inputs and outputs</li> <li>Version interfaces carefully</li> </ul>"},{"location":"concepts/six-layers/#3-error-handling","title":"3. Error Handling","text":"<ul> <li>Handle errors at appropriate layer</li> <li>Provide meaningful error messages</li> <li>Include recovery mechanisms</li> </ul>"},{"location":"concepts/six-layers/#4-documentation","title":"4. Documentation","text":"<ul> <li>Document each layer's purpose</li> <li>Provide usage examples</li> <li>Maintain architecture diagrams</li> </ul>"},{"location":"concepts/six-layers/#migration-strategy","title":"Migration Strategy","text":"<p>When adding new capabilities:</p> <ol> <li>Identify the Layer: Determine appropriate architectural layer</li> <li>Check Existing Components: Reuse lower-layer components</li> <li>Design Interfaces: Define clear inputs and outputs</li> <li>Implement: Follow layer-specific guidelines</li> <li>Test: Validate at each layer</li> <li>Document: Update architecture documentation</li> </ol>"},{"location":"concepts/six-layers/#summary","title":"Summary","text":"<p>The six-layer architecture provides a robust foundation for building scalable GitHub automation. By understanding and following this architecture, you ensure that your contributions maintain the toolkit's quality, consistency, and maintainability standards.</p>"},{"location":"development/","title":"Development","text":"<p>Welcome to the Development section of the GitHub Toolkit documentation. This section provides comprehensive guidance for contributors, maintainers, and anyone looking to extend or modify the toolkit.</p>"},{"location":"development/#getting-started-as-a-contributor","title":"Getting Started as a Contributor","text":""},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Understanding of Core Concepts</li> <li>Familiarity with GitHub Actions</li> <li>Knowledge of Git and Python</li> <li>Understanding of the Architecture</li> </ul>"},{"location":"development/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/deepworks-net/github.toolkit.git\ncd github.toolkit\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code># Install Python dependencies (if any)\npip install -r requirements.txt\n\n# Install development tools\nmake install-dev\n</code></pre></p> </li> <li> <p>Validate Setup <pre><code># Run validation suite\nmake validate\n\n# Check synchronization\nmake sync\n</code></pre></p> </li> </ol>"},{"location":"development/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"development/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"development/#1-new-capabilities-fcm-based","title":"1. New Capabilities (FCM-based)","text":"<p>Purpose: Add new atomic capabilities to the toolkit</p> <p>Process: 1. Create FCM file in appropriate <code>axioms/</code> subdirectory 2. Generate action using bridge system 3. Implement Python logic in generated action 4. Add comprehensive tests 5. Update documentation</p> <p>Example: Adding git stash operations <pre><code># axioms/git/stash-operations.fcm\nModel: git.stash-operations\nVersion: 1.0.0\nLayer: Axiom\nDomain: git\n\nCapability: Create, apply, list, and drop git stashes\n\nParameters:\n  - action: create|apply|list|drop|show\n  - stash_name: string (optional)\n  - message: string (optional)\n  - include_untracked: boolean (optional)\n\nOutputs:\n  - stash_created\n  - stash_applied\n  - stashes_list\n  - operation_status\n</code></pre></p>"},{"location":"development/#2-composite-actions","title":"2. Composite Actions","text":"<p>Purpose: Combine existing capabilities for higher-level operations</p> <p>Process: 1. Identify combination of existing actions needed 2. Create composite action in <code>actions/composite/</code> 3. Use underscore naming convention 4. Implement error handling and state management 5. Add integration tests</p>"},{"location":"development/#3-workflows","title":"3. Workflows","text":"<p>Purpose: Complete automation solutions for specific processes</p> <p>Process: 1. Design workflow using existing actions 2. Follow naming conventions (private vs public) 3. Implement proper triggers and conditions 4. Add comprehensive documentation 5. Test in real scenarios</p>"},{"location":"development/#4-documentation","title":"4. Documentation","text":"<p>Purpose: Improve understanding and usability</p> <p>Process: 1. Follow documentation structure 2. Include practical examples 3. Update navigation if needed 4. Validate links and references</p>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#feature-development","title":"Feature Development","text":"<ol> <li> <p>Create Feature Branch <pre><code>git checkout -b feature/descriptive-name\n</code></pre></p> </li> <li> <p>Develop Incrementally</p> </li> <li>Make small, focused commits</li> <li>Test frequently</li> <li> <p>Validate changes with <code>make validate</code></p> </li> <li> <p>Update Documentation</p> </li> <li>Add or update relevant documentation</li> <li>Include examples and usage patterns</li> <li> <p>Update navigation if needed</p> </li> <li> <p>Submit Pull Request</p> </li> <li>Provide clear description</li> <li>Reference any related issues</li> <li>Include testing information</li> </ol>"},{"location":"development/#bridge-development","title":"Bridge Development","text":"<p>When working with FCM files and generated actions:</p> <ol> <li> <p>Modify FCM File <pre><code># Edit the capability definition\nvim axioms/git/new-capability.fcm\n</code></pre></p> </li> <li> <p>Generate Actions <pre><code># Generate from all FCMs\nmake generate\n\n# Or generate specific action\nbash .bridge/production-generator.sh axioms/git/new-capability.fcm\n</code></pre></p> </li> <li> <p>Implement Logic <pre><code># Edit the generated main.py\nvim actions/core/new-capability/main.py\n</code></pre></p> </li> <li> <p>Validate Results <pre><code># Check synchronization\nmake sync\n\n# Run validation\nmake validate\n</code></pre></p> </li> </ol>"},{"location":"development/#code-standards","title":"Code Standards","text":""},{"location":"development/#fcm-files","title":"FCM Files","text":"<ul> <li>Use clear, descriptive capability descriptions</li> <li>Define all parameters with appropriate types</li> <li>Include comprehensive output definitions</li> <li>Version changes appropriately</li> <li>Document complex parameter interactions</li> </ul>"},{"location":"development/#python-implementation","title":"Python Implementation","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Implement LCMCP pattern for Git operations</li> <li>Provide comprehensive error handling</li> <li>Include debug logging</li> <li>Use type hints where appropriate</li> </ul>"},{"location":"development/#action-interfaces","title":"Action Interfaces","text":"<ul> <li>Clear parameter descriptions</li> <li>Appropriate requirement flags</li> <li>Comprehensive output definitions</li> <li>Proper default values</li> <li>Examples in descriptions</li> </ul>"},{"location":"development/#documentation","title":"Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include practical examples</li> <li>Maintain consistent formatting</li> <li>Update cross-references</li> <li>Test all code examples</li> </ul>"},{"location":"development/#testing-requirements","title":"Testing Requirements","text":""},{"location":"development/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test each function independently</li> <li>Cover success and failure scenarios</li> <li>Mock external dependencies</li> <li>Validate input/output handling</li> </ul>"},{"location":"development/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test actions in realistic workflows</li> <li>Verify cross-action compatibility</li> <li>Test error propagation</li> <li>Validate end-to-end scenarios</li> </ul>"},{"location":"development/#validation-tests","title":"Validation Tests","text":"<ul> <li>Ensure FCM files are valid</li> <li>Verify generated actions are correct</li> <li>Check synchronization consistency</li> <li>Validate documentation links</li> </ul>"},{"location":"development/#release-process","title":"Release Process","text":"<p>The toolkit follows a structured release process:</p>"},{"location":"development/#version-management","title":"Version Management","text":"<ul> <li>Major: Breaking changes or significant new functionality</li> <li>Minor: New features, backward compatible</li> <li>Patch: Bug fixes and minor improvements</li> </ul>"},{"location":"development/#release-workflow","title":"Release Workflow","text":"<ol> <li>Release Process - Detailed release procedures</li> <li>Version calculation using semantic versioning</li> <li>Automated changelog generation</li> <li>Tag creation and release notes</li> </ol>"},{"location":"development/#quality-gates","title":"Quality Gates","text":"<ul> <li>All tests must pass</li> <li>Documentation must be updated</li> <li>Validation suite must succeed</li> <li>Manual review by maintainers</li> </ul>"},{"location":"development/#advanced-topics","title":"Advanced Topics","text":""},{"location":"development/#bridge-system-development","title":"Bridge System Development","text":"<ul> <li>Understanding the generation pipeline</li> <li>Extending templates and generators</li> <li>Adding new FCM features</li> <li>Custom validation rules</li> </ul>"},{"location":"development/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Profiling action execution</li> <li>Optimizing Docker images</li> <li>Reducing workflow complexity</li> <li>Caching strategies</li> </ul>"},{"location":"development/#integration-development","title":"Integration Development","text":"<ul> <li>Adding new domains</li> <li>Creating domain-specific patterns</li> <li>Implementing custom workflows</li> <li>External system integration</li> </ul>"},{"location":"development/#troubleshooting-development-issues","title":"Troubleshooting Development Issues","text":""},{"location":"development/#common-problems","title":"Common Problems","text":""},{"location":"development/#generation-failures","title":"Generation Failures","text":"<pre><code># Check FCM syntax\ncat axioms/domain/capability.fcm\n\n# Validate FCM structure\nmake validate-fcm\n\n# Check generation logs\nbash .bridge/production-generator.sh --verbose\n</code></pre>"},{"location":"development/#synchronization-issues","title":"Synchronization Issues","text":"<pre><code># Check sync status\nmake sync\n\n# Force regeneration\nmake clean &amp;&amp; make generate\n\n# Verify checksums\ncat actions/core/action-name/.bridge-sync\n</code></pre>"},{"location":"development/#testing-failures","title":"Testing Failures","text":"<pre><code># Run specific tests\nmake test-action action=branch-operations\n\n# Debug test failures\nmake test-debug\n\n# Check test logs\ncat test-results.log\n</code></pre>"},{"location":"development/#getting-help","title":"Getting Help","text":""},{"location":"development/#documentation_1","title":"Documentation","text":"<ul> <li>Review Architecture for deep understanding</li> <li>Check User Guide for usage patterns</li> <li>Consult Reference for API details</li> </ul>"},{"location":"development/#community","title":"Community","text":"<ul> <li>Open GitHub issues for bugs</li> <li>Create discussions for questions</li> <li>Submit pull requests for improvements</li> <li>Join development meetings (if available)</li> </ul>"},{"location":"development/#documentation_2","title":"Documentation","text":"<ul> <li>Check Documentation Gaps for areas needing content</li> <li>Contribute to incomplete documentation</li> <li>Verify existing content accuracy</li> </ul>"},{"location":"development/#development-tools","title":"Development Tools","text":""},{"location":"development/#makefile-commands","title":"Makefile Commands","text":"<pre><code>make help           # Show all available commands\nmake validate       # Run full validation suite\nmake generate       # Generate all actions from FCMs\nmake sync           # Check synchronization status\nmake test          # Run test suite\nmake clean         # Clean generated files\nmake docs          # Build documentation\n</code></pre>"},{"location":"development/#scripts-and-utilities","title":"Scripts and Utilities","text":"<ul> <li>Bridge Generator: <code>.bridge/production-generator.sh</code></li> <li>Validation Tools: <code>.bridge/production-validator.sh</code></li> <li>Sync Checker: Various sync validation scripts</li> <li>Test Framework: Comprehensive testing utilities</li> </ul>"},{"location":"development/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork and Branch: Create feature branch from main</li> <li>Develop: Implement changes following standards</li> <li>Test: Ensure all tests pass</li> <li>Document: Update relevant documentation</li> <li>Submit: Create pull request with clear description</li> </ol>"},{"location":"development/#code-review-process","title":"Code Review Process","text":"<ul> <li>Automated checks must pass</li> <li>Manual review by maintainers</li> <li>Documentation review</li> <li>Testing validation</li> <li>Approval by at least one maintainer</li> </ul>"},{"location":"development/#merge-requirements","title":"Merge Requirements","text":"<ul> <li>All CI checks pass</li> <li>Documentation is updated</li> <li>Tests are comprehensive</li> <li>Code follows standards</li> <li>Breaking changes are documented</li> </ul>"},{"location":"development/#summary","title":"Summary","text":"<p>Contributing to the GitHub Toolkit requires understanding of the unique architecture and following established patterns. The development process is designed to maintain high quality while enabling rapid innovation and extension of capabilities.</p> <p>Whether you're adding new capabilities, improving existing functionality, or enhancing documentation, following these guidelines ensures your contributions integrate seamlessly with the existing system and provide value to the broader community.</p>"},{"location":"development/documentation-gaps/","title":"Documentation Gaps","text":"<p>This page tracks concepts, patterns, and features that are referenced in the codebase or mentioned in documentation but need more complete documentation.</p>"},{"location":"development/documentation-gaps/#critical-documentation-issues","title":"Critical Documentation Issues","text":""},{"location":"development/documentation-gaps/#major-potentially-fictional-content","title":"\u26a0\ufe0f MAJOR: Potentially Fictional Content","text":"<p>Status: Needs immediate review and correction Issue: Recent documentation reorganization introduced potentially inaccurate or speculative content</p> <p>Files Requiring Validation: - [ ] <code>concepts/six-layers.md</code> - \"Six-layer architecture\" may be conceptual, not actual - [ ] <code>concepts/naming-convention.md</code> - Overstates systematic naming patterns - [ ] <code>architecture.md</code> - Contains aspirational rather than actual architecture - [ ] <code>architecture/index.md</code> - Mermaid diagrams may not reflect real implementation - [ ] <code>development/index.md</code> - References tools and processes that may not exist</p> <p>Action Required: Review against actual codebase and mark speculative content clearly.</p>"},{"location":"development/documentation-gaps/#high-priority-gaps","title":"High Priority Gaps","text":""},{"location":"development/documentation-gaps/#lcmcp-pattern","title":"LCMCP Pattern","text":"<p>Status: Corrected but incomplete Location: concepts/lcmcp-pattern.md Issue: Corrected to \"Loosely Coupled Modular Composition Pattern\" but needs actual implementation details</p> <p>Needs Documentation: - [ ] Detailed pattern definition and rules - [ ] Implementation guidelines for each architectural layer - [ ] Concrete examples of LCMCP application - [ ] Anti-patterns and common mistakes - [ ] Testing strategies for loosely coupled systems</p>"},{"location":"development/documentation-gaps/#bridge-system-internals","title":"Bridge System Internals","text":"<p>Status: Missing Referenced In: Various FCM and generation contexts  </p> <p>Needs Documentation: - [ ] FCM file format specification - [ ] Bridge generation pipeline details - [ ] Custom template creation - [ ] Generator extension points - [ ] Validation rule implementation</p>"},{"location":"development/documentation-gaps/#six-layer-implementation-details","title":"Six-Layer Implementation Details","text":"<p>Status: Concept documented, implementation gaps Location: concepts/six-layers.md </p> <p>Needs Documentation: - [ ] Specific implementation patterns for each layer - [ ] Interface design guidelines between layers - [ ] Error propagation patterns - [ ] Performance considerations per layer - [ ] Migration strategies between layers</p>"},{"location":"development/documentation-gaps/#medium-priority-gaps","title":"Medium Priority Gaps","text":""},{"location":"development/documentation-gaps/#fcm-authoring-guide","title":"FCM Authoring Guide","text":"<p>Status: Missing Referenced In: Development documentation  </p> <p>Needs Documentation: - [ ] FCM syntax specification - [ ] Parameter type definitions - [ ] Output specification rules - [ ] Version management for FCMs - [ ] Domain organization guidelines</p>"},{"location":"development/documentation-gaps/#testing-framework-details","title":"Testing Framework Details","text":"<p>Status: Referenced but not fully documented Location: Mentioned in guides  </p> <p>Needs Documentation: - [ ] Test structure and organization - [ ] Action testing patterns - [ ] Workflow testing strategies - [ ] Integration test requirements - [ ] Performance testing guidelines</p>"},{"location":"development/documentation-gaps/#deployment-and-cicd-integration","title":"Deployment and CI/CD Integration","text":"<p>Status: Partially documented Referenced In: Workflow files  </p> <p>Needs Documentation: - [ ] Complete CI/CD pipeline documentation - [ ] Deployment strategies - [ ] Environment configuration - [ ] Monitoring and alerting setup - [ ] Rollback procedures</p>"},{"location":"development/documentation-gaps/#low-priority-gaps","title":"Low Priority Gaps","text":""},{"location":"development/documentation-gaps/#advanced-patterns","title":"Advanced Patterns","text":"<p>Status: Missing  </p> <p>Needs Documentation: - [ ] Cross-repository action usage - [ ] Complex workflow orchestration - [ ] Error recovery patterns - [ ] Performance optimization techniques - [ ] Security best practices</p>"},{"location":"development/documentation-gaps/#tool-and-script-documentation","title":"Tool and Script Documentation","text":"<p>Status: Minimal Referenced In: Makefile and .bridge/ directory  </p> <p>Needs Documentation: - [ ] Complete Makefile command reference - [ ] Bridge script usage and options - [ ] Development environment setup - [ ] Debugging tools and techniques - [ ] Custom tool creation</p>"},{"location":"development/documentation-gaps/#integration-examples","title":"Integration Examples","text":"<p>Status: Basic examples exist Location: examples/ directory  </p> <p>Needs Documentation: - [ ] Real-world usage patterns - [ ] Industry-specific implementations - [ ] Integration with popular tools - [ ] Custom domain implementations - [ ] Performance benchmarks</p>"},{"location":"development/documentation-gaps/#documentation-quality-issues","title":"Documentation Quality Issues","text":""},{"location":"development/documentation-gaps/#concepts-needing-validation","title":"Concepts Needing Validation","text":"<p>These concepts were mentioned but may need verification:</p> <ol> <li>\"Meta-Level Design\" - Referenced in architecture but needs verification</li> <li>\"Self-Describing Systems\" - Mentioned but implementation details unclear</li> <li>\"Immutable Infrastructure\" - Referenced but needs concrete examples</li> <li>Specific Git operation patterns - Many referenced but not documented</li> </ol>"},{"location":"development/documentation-gaps/#links-and-references","title":"Links and References","text":"<ul> <li> Audit all internal links after reorganization</li> <li> Verify external links are current</li> <li> Update cross-references between sections</li> <li> Add missing code examples</li> </ul>"},{"location":"development/documentation-gaps/#contributing-to-documentation","title":"Contributing to Documentation","text":""},{"location":"development/documentation-gaps/#how-to-help","title":"How to Help","text":"<ol> <li>Identify Gaps: Add new gaps to this page when you find them</li> <li>Contribute Content: Pick a gap and create documentation</li> <li>Verify Information: Validate existing content against implementation</li> <li>Improve Structure: Suggest better organization or presentation</li> </ol>"},{"location":"development/documentation-gaps/#documentation-standards","title":"Documentation Standards","text":"<p>When filling gaps: - Start with a clear overview - Include practical examples - Reference actual code where possible - Avoid speculation or assumptions - Mark uncertain content clearly</p>"},{"location":"development/documentation-gaps/#review-process","title":"Review Process","text":"<ol> <li>Create documentation for a gap</li> <li>Mark the gap as \"In Progress\" </li> <li>Submit for review by maintainers</li> <li>Update this page when complete</li> <li>Remove from gaps list when fully documented</li> </ol>"},{"location":"development/documentation-gaps/#tracking-progress","title":"Tracking Progress","text":""},{"location":"development/documentation-gaps/#recently-completed","title":"Recently Completed","text":"<ul> <li> Workflow naming conventions (dot prefix for private workflows)</li> <li> Core Concepts section reorganization</li> <li> Navigation structure improvement</li> </ul>"},{"location":"development/documentation-gaps/#in-progress","title":"In Progress","text":"<ul> <li> LCMCP pattern detailed documentation</li> <li> Internal link updates after reorganization</li> </ul>"},{"location":"development/documentation-gaps/#needs-assignment","title":"Needs Assignment","text":"<ul> <li> Bridge system internals</li> <li> FCM authoring guide</li> <li> Testing framework details</li> <li> Deployment documentation</li> </ul>"},{"location":"development/documentation-gaps/#maintenance","title":"Maintenance","text":"<p>This page should be updated regularly: - Add new gaps as they're discovered - Move completed items to \"Recently Completed\" - Update priority based on user needs - Remove outdated or resolved gaps</p> <p>Last Updated: During documentation reorganization Next Review: After LCMCP pattern completion</p>"},{"location":"development/release-process/","title":"Release Process Guide","text":"<p>This guide details the complete release process used across Deepworks repositories.</p>"},{"location":"development/release-process/#release-lifecycle","title":"Release Lifecycle","text":""},{"location":"development/release-process/#1-development-phase","title":"1. Development Phase","text":"<pre><code>graph TD\n    A[Develop Branch] --&gt; B[Create PR]\n    B --&gt; C[Merge to Staging]\n    C --&gt; D[Update Changelog]\n    C --&gt; E[Update Draft Release]\n    D --&gt; F[Next Development]\n    E --&gt; F</code></pre>"},{"location":"development/release-process/#activities","title":"Activities","text":"<ul> <li>Feature development in develop branch</li> <li>PRs created for review (develop \u2192 staging)</li> <li>Merges trigger automatic updates</li> <li>Changelog entries added</li> <li>Draft release updated</li> </ul>"},{"location":"development/release-process/#2-release-preparation","title":"2. Release Preparation","text":"<pre><code>graph TD\n    A[Staging Branch] --&gt; B[Create 'prep' Tag]\n    B --&gt; C[Version Auto-Calculated]\n    C --&gt; D[Create Release Branch vX.Y.Z]\n    D --&gt; E[Update Version Files]\n    E --&gt; F[Generate Release Notes]\n    F --&gt; G[Create Release PR]\n    G --&gt; H[Review &amp; Merge to Main]</code></pre>"},{"location":"development/release-process/#process-simplified","title":"Process (Simplified)","text":"<ol> <li>Create prep tag (no version needed):</li> </ol> <pre><code>git tag prep\ngit push origin prep\n</code></pre> <ol> <li>Automated GitHub Actions workflow:</li> <li>Version Calculation: Uses commit count since last tag to determine next version</li> <li>Version Drift Prevention: If already on a release branch, uses version from branch name (prevents drift from release process commits)</li> <li>Release Branch: Creates <code>release/vX.Y.Z</code> automatically from staging</li> <li>File Updates: Updates <code>mkdocs.yml</code> and other configured version files</li> <li>Changelog: Auto-generates from PRs and commits using Release Drafter</li> <li>Release PR: Creates PR with complete description and release notes</li> </ol>"},{"location":"development/release-process/#3-release-publication","title":"3. Release Publication","text":"<pre><code>graph TD\n    A[Merged Release PR] --&gt; B[Create Version Tag]\n    B --&gt; C[Publish Release]\n    C --&gt; D[Update Documentation]\n    D --&gt; E[Close Release Cycle]</code></pre>"},{"location":"development/release-process/#version-calculation","title":"Version Calculation","text":""},{"location":"development/release-process/#automatic-version-incrementing","title":"Automatic Version Incrementing","text":"<ul> <li>Based on semantic versioning</li> <li>Patch version = previous patch + commit count</li> <li>Example:</li> </ul> <pre><code>Current: v1.0.16\n3 new commits\nNext: v1.0.19\n</code></pre>"},{"location":"development/release-process/#version-tag-format","title":"Version Tag Format","text":"<ul> <li>Release tags: <code>v1.0.0</code> (created after PR merge to main)</li> <li>Prep tags: <code>prep</code> (simple trigger, no version specified)</li> <li>Version calculation: Automatic based on commit count since last release tag</li> <li>Format: <code>v{major}.{minor}.{patch + commit_count}</code></li> </ul>"},{"location":"development/release-process/#changelog-management","title":"Changelog Management","text":""},{"location":"development/release-process/#structure","title":"Structure","text":"<pre><code># Changelog\n\n## **[(01/03/2025) - v1.0.16](link)**\n- PR #45: Feature addition\n- PR #44: Bug fix\n\n## **01/03/2025 - Unreleased**\n- PR #46: New feature\n</code></pre>"},{"location":"development/release-process/#automation","title":"Automation","text":"<ol> <li>PR merges add entries</li> <li>Release prep converts format</li> <li>Links added automatically</li> <li>Dates managed by workflow</li> </ol>"},{"location":"development/release-process/#release-types","title":"Release Types","text":""},{"location":"development/release-process/#draft-releases","title":"Draft Releases","text":"<ul> <li>Updated automatically</li> <li>Track ongoing changes</li> <li>Version calculated dynamically</li> <li>No manual intervention needed</li> </ul>"},{"location":"development/release-process/#prep-releases","title":"Prep Releases","text":"<ul> <li>Created via prep tags</li> <li>Convert changelog format</li> <li>Create release branches</li> <li>Generate release PRs</li> </ul>"},{"location":"development/release-process/#final-releases","title":"Final Releases","text":"<ul> <li>Published via version tags</li> <li>Include all changes</li> <li>Link to changelog</li> <li>Permanent versions</li> </ul>"},{"location":"development/release-process/#release-branch-strategy","title":"Release Branch Strategy","text":""},{"location":"development/release-process/#branch-flow","title":"Branch Flow","text":"<pre><code>graph LR\n    A[Develop] --&gt; B[Staging]\n    B --&gt; C[Release Branch]\n    C --&gt; D[Main]\n    D --&gt; E[Version Tag]</code></pre>"},{"location":"development/release-process/#branch-naming","title":"Branch Naming","text":"<ul> <li>Development: <code>develop</code> (active development)</li> <li>Pre-production: <code>staging</code> (testing/integration)</li> <li>Release: <code>release/v*</code> (preparation branches)</li> <li>Production: <code>main</code> (stable releases)</li> </ul>"},{"location":"development/release-process/#common-scenarios","title":"Common Scenarios","text":""},{"location":"development/release-process/#regular-development","title":"Regular Development","text":"<ol> <li>Work in develop branch</li> <li>Make changes and test locally</li> <li>Create PR (develop \u2192 staging)</li> <li>Merge to staging for integration testing</li> <li>Automatic updates occur</li> </ol>"},{"location":"development/release-process/#release-creation-automated","title":"Release Creation (Automated)","text":"<ol> <li>Trigger: Push <code>prep</code> tag to staging branch</li> <li>GitHub Actions: Automatically calculates version, creates release branch, updates files</li> <li>Review: Review generated release PR (release/vX.Y.Z \u2192 main)</li> <li>Merge: Merge release PR to main</li> <li>Publish: Version tag and GitHub release created automatically</li> </ol>"},{"location":"development/release-process/#hotfix-process","title":"Hotfix Process","text":"<ol> <li>Branch from main</li> <li>Fix issue</li> <li>Create PR</li> <li>Special version handling</li> <li>Release creation</li> </ol>"},{"location":"development/release-process/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/release-process/#version-issues","title":"Version Issues","text":"<ul> <li>Check tag format</li> <li>Verify commit history</li> <li>Review version calculation</li> </ul>"},{"location":"development/release-process/#release-problems","title":"Release Problems","text":"<ul> <li>Check workflow permissions</li> <li>Verify branch names</li> <li>Review workflow logs</li> </ul>"},{"location":"development/release-process/#changelog-issues","title":"Changelog Issues","text":"<ul> <li>Check file format</li> <li>Verify PR process</li> <li>Review automation logs</li> </ul>"},{"location":"development/release-process/#best-practices","title":"Best Practices","text":"<ol> <li>Version Tagging</li> <li>Use semantic versioning</li> <li>Follow tag format exactly</li> <li> <p>Don't skip versions</p> </li> <li> <p>Changelog Entries</p> </li> <li>Clear descriptions</li> <li>Reference PR numbers</li> <li> <p>Keep format consistent</p> </li> <li> <p>Release Process</p> </li> <li>Follow order exactly</li> <li>Review all changes</li> <li>Test before release</li> </ol>"},{"location":"development/release-process/#customization-points","title":"Customization Points","text":""},{"location":"development/release-process/#version-calculation_1","title":"Version Calculation","text":"<ul> <li>Default Version: <code>v0.1.0</code> (configurable in workflow)</li> <li>Version Prefix: <code>v</code> (can be changed to suit project needs)</li> <li>Tag Pattern: <code>v*</code> (filters which tags to consider for version calculation)</li> <li>File Updates: Configure which files get version updates (default: <code>mkdocs.yml</code>)</li> </ul>"},{"location":"development/release-process/#workflow-triggers","title":"Workflow Triggers","text":"<ul> <li>Prep Tag: Currently <code>prep</code> (simple and clean)</li> <li>Base Branch: Default <code>staging</code> (can be overridden via workflow_call)</li> <li>Target Branch: Always <code>main</code> for releases</li> </ul>"},{"location":"development/release-process/#automation-behavior","title":"Automation Behavior","text":"<ul> <li>Release Notes: Auto-generated from PRs and commits</li> <li>Changelog: Automatically updated and formatted</li> <li>Branch Creation: <code>release/vX.Y.Z</code> naming convention</li> <li>PR Templates: Standardized release PR descriptions</li> </ul>"},{"location":"development/release-process/#repository-specific-configuration","title":"Repository-Specific Configuration","text":"<pre><code># In repository's workflow file\nuses: deepworks-net/github.toolkit/workflows/prepare-release.yml@v1\nwith:\n  base-branch: 'staging'  # or 'develop' for different flow\n  files: 'package.json mkdocs.yml VERSION'  # files to update\n</code></pre>"},{"location":"development/release-process/#integration-points","title":"Integration Points","text":""},{"location":"development/release-process/#github-actions","title":"GitHub Actions","text":"<ul> <li>Version Calculator: Core logic for semantic versioning</li> <li>Release Notes Generator: PR and commit aggregation</li> <li>Git Operations: Branch creation, file updates, PR creation</li> <li>Changelog Updater: Automated formatting and linking</li> </ul>"},{"location":"development/release-process/#repository-settings","title":"Repository Settings","text":"<ul> <li>Branch Protection: Prevent direct pushes to main/staging</li> <li>Required Reviews: Ensure release PRs are reviewed</li> <li>Status Checks: Run tests before allowing merges</li> <li>Release Permissions: Control who can trigger releases</li> </ul>"},{"location":"development/release-process/#documentation","title":"Documentation","text":"<ul> <li>Version Synchronization: Keep docs in sync with releases</li> <li>Release Notes: Auto-linked from changelogs</li> <li>Deployment Triggers: Releases trigger documentation builds</li> </ul>"},{"location":"examples/complete-action-example/","title":"Complete Action Example: File Operations","text":"<p>This example demonstrates the complete structure and configuration for creating a GitHub Action following the Loosely Coupled Modular Composition Pattern (LCMCP) used in the GitHub Toolkit.</p>"},{"location":"examples/complete-action-example/#overview","title":"Overview","text":"<p>This example shows how to create a <code>file_operations</code> action that: - Follows the LCMCP design principles - Includes complete test coverage - Integrates with the FCM Bridge system - Provides both Core and Composite action patterns</p>"},{"location":"examples/complete-action-example/#directory-structure","title":"Directory Structure","text":"<p>The complete example is located in the repository at:</p> <pre><code>examples/complete-action-example/\n\u251c\u2500\u2500 README.md                           # Overview documentation\n\u251c\u2500\u2500 fcm/                               # Formal Conceptual Model\n\u2502   \u2514\u2500\u2500 file-operations.fcm            # FCM definition\n\u251c\u2500\u2500 action/                            # Complete action implementation\n\u2502   \u251c\u2500\u2500 action.yml                     # GitHub Action metadata\n\u2502   \u251c\u2500\u2500 Dockerfile                     # Container definition\n\u2502   \u251c\u2500\u2500 main.py                       # Implementation\n\u2502   \u251c\u2500\u2500 requirements.txt              # Python dependencies\n\u2502   \u251c\u2500\u2500 pytest.ini                    # Test configuration\n\u2502   \u2514\u2500\u2500 tests/                        # Test suite\n\u2502       \u251c\u2500\u2500 conftest.py               # Test fixtures\n\u2502       \u251c\u2500\u2500 test_unit.py              # Unit tests\n\u2502       \u2514\u2500\u2500 test_integration.py       # Integration tests\n\u251c\u2500\u2500 workflow/                          # Example workflows\n\u2502   \u251c\u2500\u2500 use-action.yml                # Direct action usage\n\u2502   \u2514\u2500\u2500 reusable-workflow.yml         # Reusable workflow pattern\n\u2514\u2500\u2500 docs/                             # Documentation\n    \u2514\u2500\u2500 file-operations.md            # Complete documentation\n</code></pre>"},{"location":"examples/complete-action-example/#key-components","title":"Key Components","text":""},{"location":"examples/complete-action-example/#1-fcm-definition-fcmfile-operationsfcm","title":"1. FCM Definition (<code>fcm/file-operations.fcm</code>)","text":"<p>Defines the conceptual model for the action, including: - Parameters and their types - Expected outputs - Interface requirements - Dependencies</p>"},{"location":"examples/complete-action-example/#2-action-implementation-action","title":"2. Action Implementation (<code>action/</code>)","text":"<p>Complete Docker-based action following LCMCP principles: - Single responsibility (file operations) - Explicit interfaces (inputs/outputs) - Complete encapsulation - No hidden dependencies</p>"},{"location":"examples/complete-action-example/#3-test-suite-actiontests","title":"3. Test Suite (<code>action/tests/</code>)","text":"<p>Comprehensive testing with: - Unit tests for individual functions - Integration tests for complete workflows - 80%+ code coverage requirement - Standardized fixtures from test framework</p>"},{"location":"examples/complete-action-example/#4-workflow-examples-workflow","title":"4. Workflow Examples (<code>workflow/</code>)","text":"<p>Shows how to use the action: - Direct usage in workflows - Creating reusable workflows - Integration with other actions</p>"},{"location":"examples/complete-action-example/#design-principles-applied","title":"Design Principles Applied","text":"<ol> <li>Modularity: The action is completely self-contained</li> <li>Encapsulation: All implementation details are hidden</li> <li>Composition: Can be easily combined with other actions</li> <li>Testability: Comprehensive test coverage</li> <li>Documentation: Clear, complete documentation</li> </ol>"},{"location":"examples/complete-action-example/#getting-started","title":"Getting Started","text":"<ol> <li>Review the FCM definition to understand the action's purpose</li> <li>Examine the implementation to see LCMCP principles in practice</li> <li>Run the tests to verify functionality</li> <li>Use the workflow examples as templates</li> </ol>"},{"location":"examples/complete-action-example/#integration-points","title":"Integration Points","text":"<ul> <li>FCM Bridge: Can be generated from the FCM definition</li> <li>Test Framework: Uses standardized testing patterns</li> <li>GitHub Actions: Compatible with standard GitHub Actions runtime</li> <li>Docker: Consistent execution environment</li> </ul> <p>This example serves as a template for creating new actions that follow the GitHub Toolkit's architectural patterns.</p>"},{"location":"examples/complete-action-example/#related-documentation","title":"Related Documentation","text":"<ul> <li>File Operations Action Details - Complete API documentation and usage examples</li> <li>Understanding Actions - Learn about the LCMCP pattern</li> <li>Testing Framework - Testing patterns used in this example</li> <li>Understanding FCM Bridge - How FCMs generate actions</li> </ul>"},{"location":"examples/complete-action-example/file-operations/","title":"File Operations Action Documentation","text":""},{"location":"examples/complete-action-example/file-operations/#overview","title":"Overview","text":"<p>The File Operations action demonstrates a complete implementation of the Loosely Coupled Modular Composition Pattern (LCMCP) for GitHub Actions. It provides comprehensive file system operations while maintaining strict encapsulation and modularity.</p>"},{"location":"examples/complete-action-example/file-operations/#features","title":"Features","text":"<ul> <li>Complete File Operations: Create, read, update, delete, copy, move, and search files</li> <li>Multiple Encodings: Support for UTF-8, ASCII, and Base64 encoding</li> <li>Directory Management: Automatic directory creation and management</li> <li>Error Handling: Comprehensive error handling with descriptive messages</li> <li>LCMCP Compliance: Follows all LCMCP principles for modularity and composition</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>action</code> File operation to perform Yes - Choice: create, read, update, delete, copy, move, search <code>file_path</code> Path to the file to operate on No* - String <code>content</code> Content for create/update operations No \"\" String <code>destination</code> Destination path for copy/move operations No* - String <code>pattern</code> Pattern for search operations (glob) No* - String <code>encoding</code> File encoding No utf-8 Choice: utf-8, ascii, base64 <code>create_dirs</code> Create parent directories if needed No true Boolean <code>overwrite</code> Overwrite existing files No false Boolean <p>*Required depending on the action selected</p>"},{"location":"examples/complete-action-example/file-operations/#outputs","title":"Outputs","text":"Name Description Available For <code>operation_status</code> Status of the operation (success/failure) All actions <code>file_exists</code> Whether the file exists (true/false) All except search <code>file_created</code> Path of created file create <code>file_content</code> Content of the file read <code>file_deleted</code> Path of deleted file delete <code>files_found</code> Comma-separated list of found files search <code>file_size</code> Size of the file in bytes create, update, read"},{"location":"examples/complete-action-example/file-operations/#usage-examples","title":"Usage Examples","text":""},{"location":"examples/complete-action-example/file-operations/#basic-file-creation","title":"Basic File Creation","text":"<pre><code>- name: Create File\n  uses: ./examples/complete-action-example/action\n  with:\n    action: create\n    file_path: docs/example.txt\n    content: \"Hello, World!\"\n    create_dirs: true\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#read-file-content","title":"Read File Content","text":"<pre><code>- name: Read Configuration\n  id: read-config\n  uses: ./examples/complete-action-example/action\n  with:\n    action: read\n    file_path: config/settings.json\n\n- name: Use File Content\n  run: echo \"Config: ${{ steps.read-config.outputs.file_content }}\"\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#copy-with-directory-creation","title":"Copy with Directory Creation","text":"<pre><code>- name: Copy Template\n  uses: ./examples/complete-action-example/action\n  with:\n    action: copy\n    file_path: templates/default.yml\n    destination: instances/new-instance/config.yml\n    create_dirs: true\n    overwrite: true\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#search-for-files","title":"Search for Files","text":"<pre><code>- name: Find Test Files\n  id: find-tests\n  uses: ./examples/complete-action-example/action\n  with:\n    action: search\n    pattern: \"**/*test*.py\"\n\n- name: Process Found Files\n  run: |\n    IFS=',' read -ra FILES &lt;&lt;&lt; \"${{ steps.find-tests.outputs.files_found }}\"\n    for file in \"${FILES[@]}\"; do\n      echo \"Found test file: $file\"\n    done\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#base64-file-operations","title":"Base64 File Operations","text":"<pre><code>- name: Create Binary File\n  uses: ./examples/complete-action-example/action\n  with:\n    action: create\n    file_path: data/binary.dat\n    content: \"SGVsbG8gV29ybGQh\"  # \"Hello World!\" in base64\n    encoding: base64\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#error-handling","title":"Error Handling","text":"<p>The action provides comprehensive error handling:</p> <pre><code>- name: Safe File Operation\n  id: file-op\n  continue-on-error: true\n  uses: ./examples/complete-action-example/action\n  with:\n    action: read\n    file_path: might-not-exist.txt\n\n- name: Handle Result\n  run: |\n    if [ \"${{ steps.file-op.outputs.operation_status }}\" = \"success\" ]; then\n      echo \"File content: ${{ steps.file-op.outputs.file_content }}\"\n    else\n      echo \"File operation failed\"\n    fi\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#lcmcp-principles-demonstrated","title":"LCMCP Principles Demonstrated","text":""},{"location":"examples/complete-action-example/file-operations/#1-modularity","title":"1. Modularity","text":"<ul> <li>Single, well-defined responsibility (file operations)</li> <li>No dependencies on external actions or workflows</li> <li>Complete self-containment</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#2-encapsulation","title":"2. Encapsulation","text":"<ul> <li>All implementation details hidden inside Docker container</li> <li>Clean input/output interface</li> <li>No side effects or global state</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#3-composition","title":"3. Composition","text":"<ul> <li>Can be easily combined with other actions</li> <li>Outputs can be inputs to subsequent actions</li> <li>No coupling to specific workflows</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#4-explicit-interfaces","title":"4. Explicit Interfaces","text":"<ul> <li>All inputs and outputs clearly defined</li> <li>Type information provided</li> <li>Required vs optional inputs specified</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#5-error-isolation","title":"5. Error Isolation","text":"<ul> <li>Errors are contained within the action</li> <li>Clear success/failure status reporting</li> <li>Descriptive error messages</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#testing","title":"Testing","text":"<p>The action includes comprehensive tests:</p> <pre><code>cd examples/complete-action-example/action\npip install -r requirements.txt\npytest --cov=. --cov-report=term-missing\n</code></pre>"},{"location":"examples/complete-action-example/file-operations/#test-coverage","title":"Test Coverage","text":"<ul> <li>Unit Tests: Individual method testing</li> <li>Integration Tests: Complete workflow testing</li> <li>Error Handling: Failure scenario testing</li> <li>Encoding Tests: Multiple encoding validation</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#architecture-notes","title":"Architecture Notes","text":""},{"location":"examples/complete-action-example/file-operations/#docker-implementation","title":"Docker Implementation","text":"<p>The action uses Docker for complete environment isolation: - No host system dependencies - Consistent execution across environments - Easy local testing and development</p>"},{"location":"examples/complete-action-example/file-operations/#state-management","title":"State Management","text":"<p>The action maintains no persistent state: - Each execution is independent - No configuration files or databases - Pure functional approach</p>"},{"location":"examples/complete-action-example/file-operations/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Minimal container overhead</li> <li>Efficient file operations using Python pathlib</li> <li>Memory-conscious for large files</li> </ul>"},{"location":"examples/complete-action-example/file-operations/#extending-the-action","title":"Extending the Action","text":"<p>To add new file operations:</p> <ol> <li>Add the operation to the <code>action</code> input choices in <code>action.yml</code></li> <li>Implement the method in the <code>FileOperations</code> class</li> <li>Add the operation handling in the <code>main()</code> function</li> <li>Write comprehensive tests for the new operation</li> <li>Update documentation</li> </ol>"},{"location":"examples/complete-action-example/file-operations/#related-examples","title":"Related Examples","text":"<ul> <li>Reusable Workflow: See <code>workflow/reusable-workflow.yml</code> for creating reusable patterns</li> <li>Error Handling: See <code>workflow/use-action.yml</code> for comprehensive error handling</li> <li>Testing Patterns: See <code>tests/</code> directory for testing best practices</li> </ul> <p>This action serves as a complete reference implementation for creating GitHub Actions that follow the LCMCP pattern and integrate seamlessly with the GitHub Toolkit architecture.</p>"},{"location":"guides/","title":"User Guide","text":"<p>The User Guide provides practical, how-to documentation for using the GitHub Toolkit effectively. Whether you're implementing actions in your workflows or contributing to the toolkit, these guides will help you succeed.</p>"},{"location":"guides/#getting-started","title":"Getting Started","text":"<p>If you're new to the GitHub Toolkit, start here:</p> <ol> <li>Getting Started - Quick start guide</li> <li>Core Concepts - Understand the fundamentals</li> <li>Using Actions - Learn to implement toolkit actions</li> <li>Using Workflows - Create effective automation workflows</li> </ol>"},{"location":"guides/#how-to-guides","title":"How-To Guides","text":""},{"location":"guides/#working-with-actions","title":"Working with Actions","text":"<ul> <li>Using Actions - Implement generated actions in your workflows</li> <li>Testing Actions - Validate action implementations</li> </ul>"},{"location":"guides/#working-with-workflows","title":"Working with Workflows","text":"<ul> <li>Using Workflows - Create and maintain workflow files</li> <li>Git Utilities - Common Git operation patterns</li> </ul>"},{"location":"guides/#migration-and-maintenance","title":"Migration and Maintenance","text":"<ul> <li>Migration Guide - Move to atomic Git operations</li> <li>Best Practices - Follow toolkit conventions and patterns</li> </ul>"},{"location":"guides/#common-use-cases","title":"Common Use Cases","text":""},{"location":"guides/#release-management","title":"Release Management","text":"<ul> <li>Set up automated release preparation</li> <li>Configure changelog generation</li> <li>Implement version management</li> </ul>"},{"location":"guides/#git-operations","title":"Git Operations","text":"<ul> <li>Manage branches automatically</li> <li>Handle tag operations</li> <li>Implement atomic Git workflows</li> </ul>"},{"location":"guides/#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>Integrate toolkit actions in pipelines</li> <li>Configure workflow triggers</li> <li>Handle errors and edge cases</li> </ul>"},{"location":"guides/#best-practices","title":"Best Practices","text":""},{"location":"guides/#action-usage","title":"Action Usage","text":"<ol> <li>Use Generated Actions: Prefer toolkit actions over custom implementations</li> <li>Follow Patterns: Use established LCMCP patterns</li> <li>Handle Errors: Implement proper error handling</li> <li>Document Usage: Clearly document workflow implementations</li> </ol>"},{"location":"guides/#workflow-design","title":"Workflow Design","text":"<ol> <li>Keep Workflows Simple: Focus on single responsibilities</li> <li>Use Reusable Workflows: Leverage <code>workflow_call</code> for common patterns</li> <li>Name Consistently: Follow naming conventions</li> <li>Version Dependencies: Pin action versions for stability</li> </ol>"},{"location":"guides/#testing-and-validation","title":"Testing and Validation","text":"<ol> <li>Test Workflows: Validate in development branches</li> <li>Use Dry Run: Test changes without side effects</li> <li>Monitor Results: Check action outputs and logs</li> <li>Handle Edge Cases: Test failure scenarios</li> </ol>"},{"location":"guides/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/#common-issues","title":"Common Issues","text":"<ul> <li>Action Not Found: Check action name and version</li> <li>Permission Errors: Verify token permissions</li> <li>Git Conflicts: Use atomic operations and proper sequencing</li> <li>Workflow Failures: Check logs and error messages</li> </ul>"},{"location":"guides/#getting-help","title":"Getting Help","text":"<ul> <li>Check the Reference documentation</li> <li>Review Examples for patterns</li> <li>Consult Architecture for deep understanding</li> <li>See Development for contribution guidelines</li> </ul>"},{"location":"guides/#next-steps","title":"Next Steps","text":"<ul> <li>Explore specific guides for detailed implementation instructions</li> <li>Check the Reference section for complete API documentation</li> <li>Review Examples for real-world usage patterns</li> <li>Contribute improvements following the Development guidelines</li> </ul>"},{"location":"guides/fcm-bridge-architecture/","title":"FCM Bridge Architecture Guide","text":""},{"location":"guides/fcm-bridge-architecture/#overview","title":"Overview","text":"<p>The FCM Bridge Architecture maintains GitHub Actions compatibility while achieving architectural purity through automated generation. This system resolves the duality between Formal Conceptual Models (FCM) and GitHub's practical requirements.</p>"},{"location":"guides/fcm-bridge-architecture/#architecture-principles","title":"Architecture Principles","text":""},{"location":"guides/fcm-bridge-architecture/#duality-resolution","title":"Duality Resolution","text":"<p>The bridge system maintains two complementary layers:</p> <ul> <li>Source Layer: Pure FCM definitions without operational concerns</li> <li>Interface Layer: GitHub-compatible actions for practical use</li> <li>Bridge Layer: Automated generation maintaining perfect synchronization</li> </ul>"},{"location":"guides/fcm-bridge-architecture/#single-source-of-truth","title":"Single Source of Truth","text":"<p>All capabilities are defined once in FCM format:</p> <pre><code>axioms/git/tag-operations.fcm  \u2192  actions/core/tag-operations/\n</code></pre> <p>The <code>actions/</code> directory becomes a \"compiled\" view of the architecture, similar to how binary files are generated from source code.</p>"},{"location":"guides/fcm-bridge-architecture/#directory-structure","title":"Directory Structure","text":"<pre><code>github.toolkit/\n\u251c\u2500\u2500 axioms/                    # SOURCE: Pure FCM definitions\n\u2502   \u251c\u2500\u2500 git/                   # Git operations\n\u2502   \u251c\u2500\u2500 version/               # Version management\n\u2502   \u251c\u2500\u2500 release/               # Release processes\n\u2502   \u2514\u2500\u2500 github/                # GitHub-specific operations\n\u251c\u2500\u2500 logic/                     # SOURCE: Relationships\n\u251c\u2500\u2500 patterns/                  # SOURCE: Workflows\n\u251c\u2500\u2500 mechanics/                 # SOURCE: Templates\n\u251c\u2500\u2500 reflection/                # SOURCE: Meta-capabilities\n\u251c\u2500\u2500 emergence/                 # SOURCE: System properties\n\u2502\n\u251c\u2500\u2500 .bridge/                   # BRIDGE: Generation machinery\n\u2502   \u251c\u2500\u2500 generator.py           # FCM-to-action compiler\n\u2502   \u251c\u2500\u2500 validator.py           # Alignment checker\n\u2502   \u2514\u2500\u2500 manifest.json          # Source-to-interface map\n\u2502\n\u2514\u2500\u2500 actions/                   # INTERFACE: GitHub conventions\n    \u251c\u2500\u2500 core/                  # Generated from axioms\n    \u2514\u2500\u2500 composite/             # Generated from patterns\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#fcm-format","title":"FCM Format","text":""},{"location":"guides/fcm-bridge-architecture/#basic-structure","title":"Basic Structure","text":"<pre><code># capability-name.fcm\nModel: domain.capability-name\nVersion: 1.0.0\nLayer: Axiom\nDomain: git\n\nCapability: Brief description of what this does\n\nParameters:\n  - param_name: type|options (optional)\n  - action: create|delete|list|push|check\n  - tag_name: string (optional)\n\nOutputs:\n  - output_name\n  - operation_status\n\nInterface:\n  type: docker\n  image: python:3.9-slim\n  requirements: [git]\n\nDependencies:\n  - git\n  - github-token (optional)\n\nPatterns:\n  - pattern-name\n  - category-operation\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#parameter-types","title":"Parameter Types","text":"<ul> <li>string: Text input</li> <li>boolean: True/false value</li> <li>choice: Enumerated options (pipe-separated)</li> <li>optional: Mark with <code>(optional)</code> suffix</li> </ul>"},{"location":"guides/fcm-bridge-architecture/#bridge-generation-process","title":"Bridge Generation Process","text":""},{"location":"guides/fcm-bridge-architecture/#1-fcm-parsing","title":"1. FCM Parsing","text":"<p>The generator parses FCM files to extract: - Capability metadata - Parameter definitions - Output specifications - Interface requirements - Dependencies</p>"},{"location":"guides/fcm-bridge-architecture/#2-action-generation","title":"2. Action Generation","text":"<p>Creates GitHub-compatible structure:</p> <pre><code># Generated action.yml\nname: Capability Name\ndescription: FCM capability description\ninputs:\n  param_name:\n    description: Parameter description\n    required: true/false\noutputs:\n  output_name:\n    description: Output description\nruns:\n  using: docker\n  image: Dockerfile\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#3-dockerfile-generation","title":"3. Dockerfile Generation","text":"<p>Creates container definition from FCM interface:</p> <pre><code># Generated Dockerfile\nFROM python:3.9-slim\nRUN apt-get update &amp;&amp; apt-get install -y git\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\nENTRYPOINT [\"/entrypoint.sh\"]\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#4-metadata-tracking","title":"4. Metadata Tracking","text":"<p>Creates <code>.bridge-sync</code> file:</p> <pre><code>{\n  \"source\": \"axioms/git/tag-operations.fcm\",\n  \"generated\": \"2025-01-06T12:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"checksum\": \"sha256:abc123...\"\n}\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#working-with-the-bridge","title":"Working with the Bridge","text":""},{"location":"guides/fcm-bridge-architecture/#creating-new-capabilities","title":"Creating New Capabilities","text":"<ol> <li>Define FCM: Create new file in appropriate <code>axioms/</code> subdirectory</li> <li>Generate Action: Run <code>.bridge/generator.py axioms/domain/name.fcm</code></li> <li>Validate: Run <code>.bridge/validator.py</code> to ensure alignment</li> <li>Implement: Provide external implementation package</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#modifying-existing-capabilities","title":"Modifying Existing Capabilities","text":"<ol> <li>Edit FCM: Modify source definition in <code>axioms/</code></li> <li>Regenerate: Run generator on modified FCM</li> <li>Validate: Check alignment and GitHub compatibility</li> <li>Never Edit Actions: Changes to <code>actions/</code> will be overwritten</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#bridge-commands","title":"Bridge Commands","text":"<pre><code># Generate all actions from FCMs\n./.bridge/generator.py --generate-all\n\n# Generate specific action\n./.bridge/generator.py axioms/git/tag-operations.fcm\n\n# Validate all alignments\n./.bridge/validator.py\n\n# Check specific action alignment\n./.bridge/validator.py actions/core/tag-operations\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#validation-system","title":"Validation System","text":""},{"location":"guides/fcm-bridge-architecture/#automatic-checks","title":"Automatic Checks","text":"<p>The validator ensures:</p> <ul> <li>\u2705 Every FCM has corresponding action</li> <li>\u2705 Every action has sync metadata</li> <li>\u2705 Checksums match between source and generated</li> <li>\u2705 No manual edits in generated files</li> <li>\u2705 GitHub Actions compatibility</li> </ul>"},{"location":"guides/fcm-bridge-architecture/#sync-monitoring","title":"Sync Monitoring","text":"<p>The bridge tracks: - Source-to-interface mappings - Generation timestamps - FCM version tracking - Checksum validation</p>"},{"location":"guides/fcm-bridge-architecture/#best-practices","title":"Best Practices","text":""},{"location":"guides/fcm-bridge-architecture/#fcm-development","title":"FCM Development","text":"<ol> <li>Single Capability: Each FCM defines one atomic capability</li> <li>Clear Parameters: Use descriptive names and appropriate types</li> <li>Minimal Dependencies: Reduce external requirements</li> <li>Domain Alignment: Place FCMs in correct domain directories</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#bridge-maintenance","title":"Bridge Maintenance","text":"<ol> <li>Regular Validation: Run validator after FCM changes</li> <li>Clean Generation: Always regenerate after modifications</li> <li>Version Tracking: Update FCM versions for significant changes</li> <li>Documentation Sync: Keep documentation aligned with FCMs</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#github-integration","title":"GitHub Integration","text":"<ol> <li>Use Generated Actions: Reference actions from <code>actions/</code> directory</li> <li>External Implementation: Provide actual functionality via packages</li> <li>Testing: Test generated actions in real workflows</li> <li>Compatibility: Ensure GitHub Actions requirements are met</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#migration-strategy","title":"Migration Strategy","text":""},{"location":"guides/fcm-bridge-architecture/#from-traditional-actions","title":"From Traditional Actions","text":"<ol> <li>Analyze Existing: Review current action structure</li> <li>Extract FCM: Create FCM definition capturing capability</li> <li>Generate New: Create action from FCM</li> <li>Compare: Validate functionality equivalence</li> <li>Replace: Swap traditional action with generated version</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#validation-process","title":"Validation Process","text":"<ol> <li>Functional Testing: Ensure generated actions work</li> <li>Parameter Mapping: Verify all inputs/outputs preserved</li> <li>Workflow Integration: Test in actual GitHub workflows</li> <li>Documentation Update: Reflect changes in guides</li> </ol>"},{"location":"guides/fcm-bridge-architecture/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/fcm-bridge-architecture/#common-issues","title":"Common Issues","text":"<p>Generation Fails: - Check FCM syntax - Verify required sections - Review parameter definitions</p> <p>Validation Errors: - Ensure FCM unchanged since generation - Check for manual edits in actions - Verify sync file integrity</p> <p>GitHub Compatibility: - Validate action.yml structure - Check required GitHub Action fields - Test in actual workflow</p>"},{"location":"guides/fcm-bridge-architecture/#debug-commands","title":"Debug Commands","text":"<pre><code># Check FCM syntax\ncat axioms/domain/name.fcm\n\n# View generation manifest\ncat .bridge/manifest.json\n\n# Check sync status\ncat actions/core/name/.bridge-sync\n\n# Test action locally\nact -j test-action\n</code></pre>"},{"location":"guides/fcm-bridge-architecture/#future-enhancements","title":"Future Enhancements","text":""},{"location":"guides/fcm-bridge-architecture/#planned-features","title":"Planned Features","text":"<ul> <li>Pattern Generation: Composite actions from workflow patterns</li> <li>Dependency Resolution: Automatic external package management</li> <li>Live Monitoring: Real-time sync validation</li> <li>Template Evolution: Improved mechanics templates</li> </ul>"},{"location":"guides/fcm-bridge-architecture/#integration-opportunities","title":"Integration Opportunities","text":"<ul> <li>GitHub Packages: Automatic implementation hosting</li> <li>CI/CD Integration: Automated generation triggers</li> <li>Documentation Generation: Automatic docs from FCMs</li> <li>Testing Framework: Automated action testing</li> </ul>"},{"location":"guides/fcm-bridge-architecture/#conclusion","title":"Conclusion","text":"<p>The FCM Bridge Architecture provides a robust foundation for maintaining both architectural purity and practical GitHub compatibility. By treating actions as compiled artifacts from FCM sources, the system ensures consistency while enabling rapid iteration and reliable automation.</p>"},{"location":"guides/git-utilities/","title":"Git Utilities","text":"<p>A shared library of Git utility functions for use across all Git-related actions.</p>"},{"location":"guides/git-utilities/#overview","title":"Overview","text":"<p>The Git Utilities module provides standardized implementations of common Git operations, reducing code duplication and ensuring consistent behavior across all actions in the toolkit. It serves as the foundation for the core/composite pattern by extracting common functionality into reusable components.</p>"},{"location":"guides/git-utilities/#components","title":"Components","text":""},{"location":"guides/git-utilities/#gitconfig","title":"GitConfig","text":"<p>Manages Git configuration operations:</p> <pre><code>from git_utils import GitConfig\n\n# Create a GitConfig instance\ngit_config = GitConfig()\n\n# Set up Git identity\ngit_config.setup_identity(name=\"GitHub Actions\", email=\"github-actions@github.com\")\n\n# Configure safe directory\ngit_config.configure_safe_directory('/github/workspace')\n\n# Set up GitHub token authentication\ngit_config.setup_github_token()\n</code></pre>"},{"location":"guides/git-utilities/#key-methods","title":"Key Methods","text":"<ul> <li><code>setup_identity(name, email, force)</code>: Sets the Git user.name and user.email</li> <li><code>configure_safe_directory(directory)</code>: Marks a directory as safe for Git operations</li> <li><code>setup_github_token(token)</code>: Configures Git to use a GitHub token for authentication</li> <li><code>setup_git_config(options, scope)</code>: Sets multiple Git configuration options</li> <li><code>is_inside_work_tree()</code>: Checks if the current directory is inside a Git repository</li> </ul>"},{"location":"guides/git-utilities/#gitvalidator","title":"GitValidator","text":"<p>Provides validation functions for Git operations:</p> <pre><code>from git_utils import GitValidator\n\n# Create a validator instance\nvalidator = GitValidator()\n\n# Validate a branch name\nif validator.is_valid_branch_name(\"feature/new-feature\"):\n    print(\"Branch name is valid\")\n\n# Check if a tag exists\nif validator.tag_exists(\"v1.0.0\"):\n    print(\"Tag exists\")\n\n# Convert a Git pattern to regex\npattern = validator.pattern_to_regex(\"v1.*\")\n</code></pre>"},{"location":"guides/git-utilities/#key-methods_1","title":"Key Methods","text":"<ul> <li><code>is_valid_repository()</code>: Checks if the current directory is a valid Git repository</li> <li><code>is_valid_branch_name(branch_name)</code>: Validates a branch name against Git's rules</li> <li><code>is_valid_tag_name(tag_name)</code>: Validates a tag name against Git's rules</li> <li><code>branch_exists(branch_name, remote)</code>: Checks if a branch exists locally or remotely</li> <li><code>tag_exists(tag_name, remote)</code>: Checks if a tag exists locally or remotely</li> <li><code>commit_exists(commit_hash)</code>: Checks if a commit exists in the repository</li> <li><code>is_valid_file_path(file_path)</code>: Validates a file path for safety</li> <li><code>pattern_to_regex(pattern)</code>: Converts a Git-style pattern to a regex pattern</li> </ul>"},{"location":"guides/git-utilities/#giterrors","title":"GitErrors","text":"<p>Provides standardized error handling for Git operations:</p> <pre><code>from git_utils import GitErrors\n\n# Create an error handler\nerror_handler = GitErrors()\n\ntry:\n    # Git operation\n    subprocess.check_call([\"git\", \"checkout\", \"branch\"])\nexcept subprocess.CalledProcessError as e:\n    # Handle the error\n    error_handler.handle_checkout_error(e, \"branch-name\")\n</code></pre>"},{"location":"guides/git-utilities/#key-methods_2","title":"Key Methods","text":"<ul> <li><code>handle_git_error(error, context, exit_on_error, set_output)</code>: Generic error handler</li> <li><code>handle_checkout_error(error, branch)</code>: Specific handler for checkout errors</li> <li><code>handle_push_error(error, ref)</code>: Specific handler for push errors</li> <li><code>handle_merge_error(error, source, target)</code>: Specific handler for merge errors</li> <li><code>handle_tag_error(error, action, tag)</code>: Specific handler for tag operation errors</li> <li><code>handle_commit_error(error, message)</code>: Specific handler for commit errors</li> </ul>"},{"location":"guides/git-utilities/#using-git-utilities-in-actions","title":"Using Git Utilities in Actions","text":""},{"location":"guides/git-utilities/#integration-with-core-actions","title":"Integration with Core Actions","text":"<pre><code>#!/usr/bin/env python3\n\nimport os\nimport sys\nimport subprocess\nfrom typing import Optional, List\n\n# Import shared git utilities\nsys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../shared')))\nfrom git_utils import GitConfig, GitValidator, GitErrors\n\nclass MyGitAction:\n    \"\"\"Custom Git operation action.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize with git configuration.\"\"\"\n        self.git_config = GitConfig()\n        self.git_validator = GitValidator()\n        self.git_errors = GitErrors()\n\n        # Configure git environment\n        self.git_config.setup_identity()\n        self.git_config.configure_safe_directory()\n\n    def my_operation(self, param: str) -&gt; bool:\n        \"\"\"\n        Perform a custom Git operation.\n\n        Args:\n            param: Operation parameter\n\n        Returns:\n            bool: True if successful, False otherwise\n        \"\"\"\n        if not self.git_validator.is_valid_branch_name(param):\n            print(f\"Invalid parameter: {param}\")\n            return False\n\n        try:\n            # Git operation\n            subprocess.check_call(['git', 'operation', param])\n            return True\n        except subprocess.CalledProcessError as e:\n            self.git_errors.handle_git_error(e, f\"Error in operation with {param}\")\n            return False\n</code></pre>"},{"location":"guides/git-utilities/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate inputs: Use the validator before performing operations</li> <li>Handle errors consistently: Use the appropriate error handler methods</li> <li>Set up Git environment: Configure Git identity and safe directories</li> <li>Use with GitHub Actions outputs: The error handlers can set GitHub outputs</li> </ol>"},{"location":"guides/git-utilities/#error-handling","title":"Error Handling","text":"<p>The GitErrors class provides standardized error handling and reporting for Git operations. It handles common error patterns and provides user-friendly error messages.</p>"},{"location":"guides/git-utilities/#example-error-messages","title":"Example Error Messages","text":"Git Error Friendly Message not a git repository The current directory is not a Git repository. does not exist The specified reference does not exist. already exists The specified reference already exists. Permission denied Permission denied. Check your credentials. refusing to merge unrelated histories Cannot merge unrelated histories. Use --allow-unrelated-histories."},{"location":"guides/git-utilities/#github-actions-integration","title":"GitHub Actions Integration","text":"<p>When used in GitHub Actions, the error handlers can automatically set outputs:</p> <pre><code>result=failure\nerror_message=Failed to checkout branch 'main': The specified branch does not exist.\n</code></pre>"},{"location":"guides/git-utilities/#testing-git-utilities","title":"Testing Git Utilities","text":"<p>The Git Utilities are designed to be easily testable:</p> <pre><code>def test_git_config(mocker):\n    # Mock subprocess\n    mock_check_call = mocker.patch('subprocess.check_call')\n    mock_check_output = mocker.patch('subprocess.check_output')\n\n    # Create GitConfig instance\n    git_config = GitConfig()\n\n    # Test setup_identity\n    git_config.setup_identity(\"Test User\", \"test@example.com\")\n\n    # Assert calls\n    mock_check_call.assert_any_call(['git', 'config', '--global', 'user.name', 'Test User'])\n</code></pre>"},{"location":"guides/git-utilities/#future-improvements","title":"Future Improvements","text":"<p>Planned enhancements for the Git Utilities:</p> <ol> <li>Performance optimization: Caching for repeated validation calls</li> <li>Extended validation: More comprehensive input validation</li> <li>Security improvements: Additional safety checks for file paths</li> <li>Language support: Multilingual error messages</li> <li>Async operations: Support for asynchronous Git operations</li> </ol>"},{"location":"guides/migrating-to-atomic-git-operations/","title":"Macro Rendering Error","text":"<p>File: <code>guides/migrating-to-atomic-git-operations.md</code></p> <p>UndefinedError: 'inputs' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 699, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 52, in top-level template code\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'inputs' is undefined\n</code></pre>"},{"location":"guides/testing-framework/","title":"Testing Framework Guide","text":"<p>This guide explains the comprehensive testing framework used throughout the GitHub Toolkit. The framework provides standardized approaches for testing both Core Actions and Composite Actions with consistent patterns and quality requirements.</p>"},{"location":"guides/testing-framework/#overview","title":"Overview","text":"<p>The testing framework ensures reliability and maintainability through:</p> <ul> <li>Standardized Structure: Consistent test organization across all actions</li> <li>Common Fixtures: Reusable testing utilities and mocks</li> <li>Coverage Requirements: Minimum 80% code coverage for all actions</li> <li>Multi-Level Testing: Unit, integration, and end-to-end testing</li> <li>CI/CD Integration: Automated testing in GitHub workflows</li> </ul>"},{"location":"guides/testing-framework/#testing-architecture","title":"Testing Architecture","text":""},{"location":"guides/testing-framework/#framework-components","title":"Framework Components","text":"<p>The testing framework consists of several key components:</p> <pre><code>actions/test_framework/\n\u251c\u2500\u2500 README.md                    # Framework documentation\n\u251c\u2500\u2500 conftest.py                  # Shared fixtures and utilities\n\u251c\u2500\u2500 pytest.ini                  # Global test configuration\n\u2514\u2500\u2500 test_templates/              # Template files for new tests\n    \u251c\u2500\u2500 test_unit_template.py\n    \u2514\u2500\u2500 test_integration_template.py\n</code></pre>"},{"location":"guides/testing-framework/#action-test-structure","title":"Action Test Structure","text":"<p>Every action follows this standardized test structure:</p> <pre><code>actions/core/[action-name]/\n\u251c\u2500\u2500 main.py                      # Implementation\n\u251c\u2500\u2500 pytest.ini                  # Test configuration\n\u2514\u2500\u2500 tests/                       # Test suite\n    \u251c\u2500\u2500 conftest.py              # Action-specific fixtures\n    \u251c\u2500\u2500 test_unit.py             # Unit tests\n    \u2514\u2500\u2500 test_integration.py      # Integration tests\n</code></pre>"},{"location":"guides/testing-framework/#test-configuration","title":"Test Configuration","text":""},{"location":"guides/testing-framework/#pytestini-configuration","title":"pytest.ini Configuration","text":"<p>Each action includes a <code>pytest.ini</code> file that defines testing behavior:</p> <pre><code>[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\nmarkers =\n    unit: unit tests\n    integration: integration tests\n    branch: tests for branch operations\naddopts = -v\n</code></pre> <p>The framework-level configuration includes additional options:</p> <pre><code>addopts = -v --cov=src --cov-report=term-missing\n</code></pre>"},{"location":"guides/testing-framework/#test-markers","title":"Test Markers","text":"<p>The framework uses standardized markers to organize tests:</p> <ul> <li><code>unit</code>: Fast, isolated unit tests</li> <li><code>integration</code>: End-to-end integration tests</li> <li><code>slow</code>: Tests that take longer to execute</li> <li><code>git</code>: Tests for git operations</li> <li><code>branch</code>: Tests for branch operations</li> <li><code>tag</code>: Tests for tag operations</li> <li><code>commit</code>: Tests for commit operations</li> <li><code>release</code>: Tests for release operations</li> <li><code>changelog</code>: Tests for changelog operations</li> <li><code>composite</code>: Tests for composite actions</li> </ul>"},{"location":"guides/testing-framework/#available-fixtures","title":"Available Fixtures","text":"<p>The framework provides comprehensive fixtures for consistent testing:</p>"},{"location":"guides/testing-framework/#core-fixtures","title":"Core Fixtures","text":""},{"location":"guides/testing-framework/#mock_subprocess","title":"mock_subprocess","text":"<p>Mocks all subprocess operations for safe testing:</p> <pre><code>@pytest.fixture\ndef mock_subprocess():\n    \"\"\"Mock subprocess for testing without executing shell commands.\"\"\"\n    with patch('subprocess.check_call') as mock_check_call, \\\n         patch('subprocess.check_output') as mock_check_output, \\\n         patch('subprocess.run') as mock_run:\n\n        # Configure default successful behavior\n        mock_check_call.return_value = 0\n        mock_check_output.return_value = \"mocked output\"\n\n        yield {\n            'check_call': mock_check_call,\n            'check_output': mock_check_output,\n            'run': mock_run\n        }\n</code></pre> <p>Usage Example: <pre><code>def test_git_operation(mock_subprocess):\n    # Act\n    result = git_ops.create_branch('test-branch')\n\n    # Assert\n    assert result is True\n    mock_subprocess['check_call'].assert_called_with(['git', 'checkout', '-b', 'test-branch'])\n</code></pre></p>"},{"location":"guides/testing-framework/#mock_git_env","title":"mock_git_env","text":"<p>Sets up GitHub Actions environment variables:</p> <pre><code>@pytest.fixture\ndef mock_git_env():\n    \"\"\"Mock environment variables for git operations.\"\"\"\n    env_vars = {\n        'GITHUB_REPOSITORY': 'test-org/test-repo',\n        'GITHUB_TOKEN': 'mock-token',\n        'GITHUB_WORKSPACE': '/github/workspace',\n        'GITHUB_OUTPUT': '/tmp/github_output'\n    }\n    # ... setup and teardown logic\n</code></pre> <p>Usage Example: <pre><code>def test_github_integration(mock_git_env):\n    assert os.environ['GITHUB_REPOSITORY'] == 'test-org/test-repo'\n</code></pre></p>"},{"location":"guides/testing-framework/#branch_outputs","title":"branch_outputs","text":"<p>Provides sample branch command outputs:</p> <pre><code>@pytest.fixture\ndef branch_outputs():\n    \"\"\"Provide sample git branch command outputs for testing.\"\"\"\n    return {\n        'show_current': \"feature/test-branch\",\n        'list_local': \"* main\\n  develop\\n  feature/test-branch\",\n        'list_remote': \"* main\\n  develop\\n  feature/test-branch\\n  remotes/origin/main\",\n        'list_pattern': \"  feature/test-branch\\n  feature/another-branch\"\n    }\n</code></pre>"},{"location":"guides/testing-framework/#specialized-fixtures","title":"Specialized Fixtures","text":"<p>Additional fixtures are available for specific testing scenarios:</p> <ul> <li><code>mock_git_repo</code>: Simulates git repository structure</li> <li><code>git_outputs</code>: General git command output samples</li> <li><code>tag_outputs</code>: Sample outputs for tag operations</li> <li><code>commit_outputs</code>: Sample outputs for commit operations</li> </ul>"},{"location":"guides/testing-framework/#testing-patterns","title":"Testing Patterns","text":""},{"location":"guides/testing-framework/#unit-testing","title":"Unit Testing","text":"<p>Unit tests focus on testing individual methods and functions in isolation:</p> <pre><code>@pytest.mark.unit\nclass TestGitBranchOperations:\n    \"\"\"Unit tests for GitBranchOperations class.\"\"\"\n\n    def test_create_branch_success(self, mock_subprocess, mock_git_env):\n        \"\"\"Test successful branch creation.\"\"\"\n        # Arrange\n        branch_ops = GitBranchOperations()\n\n        # Act\n        result = branch_ops.create_branch('feature/test-branch', 'main')\n\n        # Assert\n        assert result is True\n        expected_calls = [\n            call(['git', 'config', '--global', '--add', 'safe.directory', '/github/workspace']),\n            call(['git', 'checkout', 'main']),\n            call(['git', 'pull', 'origin', 'main']),\n            call(['git', 'checkout', '-b', 'feature/test-branch'])\n        ]\n        mock_subprocess['check_call'].assert_has_calls(expected_calls)\n</code></pre>"},{"location":"guides/testing-framework/#unit-test-best-practices","title":"Unit Test Best Practices","text":"<ol> <li>Single Responsibility: Test one function/method per test</li> <li>Clear Naming: Use descriptive test names that explain the scenario</li> <li>AAA Pattern: Arrange, Act, Assert structure</li> <li>Mock External Dependencies: Use fixtures to mock subprocess, file operations</li> <li>Test Both Success and Failure: Include error handling scenarios</li> </ol>"},{"location":"guides/testing-framework/#integration-testing","title":"Integration Testing","text":"<p>Integration tests verify complete workflows and component interactions:</p> <pre><code>@pytest.mark.integration\nclass TestBranchOperationsIntegration:\n    \"\"\"Integration tests for branch operations.\"\"\"\n\n    def test_branch_lifecycle(self, mock_subprocess, mock_git_env, branch_outputs):\n        \"\"\"Test the complete lifecycle of a branch: create, list, checkout, merge, delete.\"\"\"\n        # Arrange\n        branch_ops = GitBranchOperations()\n        branch_name = \"feature/test-lifecycle\"\n\n        # Configure mock outputs for different stages\n        mock_subprocess['check_output'].side_effect = [\n            'main',                           # Current branch check during create\n            branch_outputs['list_local'],     # List branches\n            branch_name,                      # Current branch after checkout\n            'main',                           # Current branch after merge\n        ]\n\n        # Act - Execute complete workflow\n        create_result = branch_ops.create_branch(branch_name, 'main')\n        list_result = branch_ops.list_branches()\n        checkout_result = branch_ops.checkout_branch(branch_name)\n        merge_result = branch_ops.merge_branch(branch_name, 'main')\n        delete_result = branch_ops.delete_branch(branch_name)\n\n        # Assert all operations were successful\n        assert create_result is True\n        assert 'main' in list_result\n        assert checkout_result is True\n        assert merge_result is True\n        assert delete_result is True\n</code></pre>"},{"location":"guides/testing-framework/#integration-test-best-practices","title":"Integration Test Best Practices","text":"<ol> <li>End-to-End Flows: Test complete user scenarios</li> <li>State Management: Verify state changes throughout the workflow</li> <li>Error Propagation: Test how errors flow through the system</li> <li>Resource Cleanup: Ensure proper cleanup after test execution</li> </ol>"},{"location":"guides/testing-framework/#main-function-testing","title":"Main Function Testing","text":"<p>Test the entry point functions that handle GitHub Actions integration:</p> <pre><code>@pytest.mark.unit\nclass TestMainFunction:\n    \"\"\"Unit tests for main function.\"\"\"\n\n    def test_create_action(self, mock_subprocess, mock_git_env):\n        \"\"\"Test create action in main function.\"\"\"\n        # Arrange\n        os.environ['INPUT_ACTION'] = 'create'\n        os.environ['INPUT_BRANCH_NAME'] = 'feature/test-branch'\n        os.environ['INPUT_BASE_BRANCH'] = 'develop'\n\n        mock_subprocess['check_output'].return_value = 'feature/test-branch'\n\n        # Import main here to ensure env vars are set\n        from main import main\n\n        # Act\n        main()  # Should not raise an exception\n\n        # Assert\n        with open(mock_git_env['GITHUB_OUTPUT'], 'r') as f:\n            output = f.read()\n\n        assert 'result=success' in output\n        assert 'current_branch=feature/test-branch' in output\n</code></pre>"},{"location":"guides/testing-framework/#coverage-requirements","title":"Coverage Requirements","text":"<p>All actions must maintain minimum 80% code coverage:</p>"},{"location":"guides/testing-framework/#running-coverage","title":"Running Coverage","text":"<pre><code># In action directory\npytest --cov=. --cov-report=xml --cov-report=term-missing\n\n# Check coverage percentage\nCOVERAGE=$(python -c \"import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])\")\necho \"Coverage: $(echo \"$COVERAGE * 100\" | bc)%\"\n</code></pre>"},{"location":"guides/testing-framework/#coverage-validation","title":"Coverage Validation","text":"<p>The test framework automatically validates coverage in CI:</p> <pre><code>if (( $(echo \"$COVERAGE_PCT &lt; 80\" | bc -l) )); then\n  echo \"Error: Code coverage is below 80%\"\n  exit 1\nfi\n</code></pre>"},{"location":"guides/testing-framework/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"guides/testing-framework/#test-framework-workflow","title":"Test Framework Workflow","text":"<p>Location: <code>.github/workflows/test.framework.yml</code></p> <p>The framework includes automated testing across all actions:</p> <pre><code>strategy:\n  matrix:\n    action-path:\n      - actions/core/branch_operations\n      - actions/core/version_calculator\n      - actions/core/version_updater\n      - actions/core/manage_release\n\nsteps:\n  - name: Run tests\n    working-directory: ${{ matrix.action-path }}\n    run: |\n      pytest --cov=. --cov-report=xml --cov-report=term-missing\n\n  - name: Verify coverage threshold\n    working-directory: ${{ matrix.action-path }}\n    run: |\n      COVERAGE=$(python -c \"import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])\")\n      COVERAGE_PCT=$(echo \"$COVERAGE * 100\" | bc)\n      if (( $(echo \"$COVERAGE_PCT &lt; 80\" | bc -l) )); then\n        echo \"Error: Code coverage is below 80%\"\n        exit 1\n      fi\n</code></pre>"},{"location":"guides/testing-framework/#framework-validation","title":"Framework Validation","text":"<p>The workflow also validates the framework itself:</p> <pre><code>- name: Validate test templates\n  run: |\n    python -c \"import sys; import os; sys.path.append(os.path.join(os.getcwd(), 'actions/test_framework')); from test_templates import test_unit_template, test_integration_template; print('Test templates are valid')\"\n\n- name: Verify test documentation\n  run: |\n    if [ ! -f \"actions/test_framework/README.md\" ]; then\n      echo \"Error: Test framework documentation is missing\"\n      exit 1\n    fi\n</code></pre>"},{"location":"guides/testing-framework/#setting-up-tests-for-new-actions","title":"Setting Up Tests for New Actions","text":""},{"location":"guides/testing-framework/#1-create-test-structure","title":"1. Create Test Structure","text":"<pre><code># From your action directory\nmkdir -p tests\ncp /path/to/test_framework/conftest.py tests/\ncp /path/to/test_framework/pytest.ini ./\n</code></pre>"},{"location":"guides/testing-framework/#2-create-unit-tests","title":"2. Create Unit Tests","text":"<pre><code>cp /path/to/test_framework/test_templates/test_unit_template.py tests/test_unit.py\n</code></pre> <p>Customize the template for your specific action:</p> <pre><code># Import your action class\nfrom main import YourActionClass\n\n@pytest.mark.unit\nclass TestYourActionClass:\n    \"\"\"Unit tests for YourActionClass.\"\"\"\n\n    def test_your_method_success(self, mock_subprocess, mock_git_env):\n        \"\"\"Test successful execution of your method.\"\"\"\n        # Arrange\n        action = YourActionClass()\n\n        # Act\n        result = action.your_method('test-input')\n\n        # Assert\n        assert result is True\n        mock_subprocess['check_call'].assert_called_with(['expected', 'command'])\n</code></pre>"},{"location":"guides/testing-framework/#3-create-integration-tests","title":"3. Create Integration Tests","text":"<pre><code>cp /path/to/test_framework/test_templates/test_integration_template.py tests/test_integration.py\n</code></pre>"},{"location":"guides/testing-framework/#4-run-tests","title":"4. Run Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test types\npytest -m unit\npytest -m integration\n\n# Run with coverage\npytest --cov=. --cov-report=term-missing\n</code></pre>"},{"location":"guides/testing-framework/#testing-composite-actions","title":"Testing Composite Actions","text":"<p>Composite Actions require different testing approaches:</p>"},{"location":"guides/testing-framework/#mock-component-actions","title":"Mock Component Actions","text":"<pre><code>@pytest.fixture\ndef mock_composite_action():\n    \"\"\"Mock composite actions for testing interrelated actions.\"\"\"\n    with patch('subprocess.run') as mock_run:\n        mock_result = MagicMock()\n        mock_result.returncode = 0\n        mock_result.stdout = \"success\"\n        mock_run.return_value = mock_result\n        yield mock_run\n\ndef test_composite_workflow(mock_composite_action, mock_git_env):\n    \"\"\"Test composite action workflow.\"\"\"\n    # Test the orchestration logic\n    # Mock each component action\n    # Verify proper parameter passing\n</code></pre>"},{"location":"guides/testing-framework/#test-action-orchestration","title":"Test Action Orchestration","text":"<p>Focus on testing: 1. Parameter Flow: How inputs flow between actions 2. Error Handling: How failures in one action affect the workflow 3. Conditional Logic: Different execution paths based on inputs 4. Output Aggregation: How outputs are combined and reported</p>"},{"location":"guides/testing-framework/#best-practices","title":"Best Practices","text":""},{"location":"guides/testing-framework/#test-organization","title":"Test Organization","text":"<ol> <li>Clear Structure: Follow the standardized directory structure</li> <li>Descriptive Names: Use clear, descriptive test method names</li> <li>Logical Grouping: Group related tests in classes</li> <li>Consistent Markers: Use appropriate pytest markers</li> </ol>"},{"location":"guides/testing-framework/#test-quality","title":"Test Quality","text":"<ol> <li>Single Assertion Focus: Each test should verify one specific behavior</li> <li>Independent Tests: Tests should not depend on each other</li> <li>Deterministic Results: Tests should produce consistent results</li> <li>Resource Cleanup: Properly clean up any test artifacts</li> </ol>"},{"location":"guides/testing-framework/#mock-usage","title":"Mock Usage","text":"<ol> <li>Mock External Dependencies: Always mock subprocess, file operations, network calls</li> <li>Realistic Mock Data: Use realistic sample data in fixtures</li> <li>Verify Mock Calls: Assert that mocks were called with expected parameters</li> <li>Configure Mock Behavior: Set up mocks to return appropriate values</li> </ol>"},{"location":"guides/testing-framework/#error-testing","title":"Error Testing","text":"<ol> <li>Test Failure Scenarios: Include tests for error conditions</li> <li>Exception Handling: Verify proper exception handling</li> <li>Error Messages: Test that meaningful error messages are provided</li> <li>Exit Codes: Verify correct exit codes for different scenarios</li> </ol>"},{"location":"guides/testing-framework/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/testing-framework/#common-issues","title":"Common Issues","text":"<p>Test Discovery Problems: - Ensure <code>pytest.ini</code> is configured correctly - Check that test files follow naming conventions (<code>test_*.py</code>) - Verify test classes start with <code>Test</code></p> <p>Mock Configuration Issues: - Check that fixtures are properly imported - Ensure mock return values match expected types - Verify mock side effects are configured for multiple calls</p> <p>Coverage Issues: - Review uncovered lines in coverage reports - Add tests for missing code paths - Consider if some code should be excluded from coverage</p>"},{"location":"guides/testing-framework/#debug-commands","title":"Debug Commands","text":"<pre><code># Run tests with verbose output\npytest -v\n\n# Run specific test\npytest tests/test_unit.py::TestClass::test_method\n\n# Run tests with debug output\npytest -s\n\n# Generate detailed coverage report\npytest --cov=. --cov-report=html\n</code></pre>"},{"location":"guides/testing-framework/#related-guides","title":"Related Guides","text":"<ul> <li>Understanding Actions - Learn about the actions being tested</li> <li>Understanding Workflows - How actions integrate in workflows</li> <li>Understanding FCM Bridge - Testing generated actions</li> </ul>"},{"location":"guides/testing-framework/#summary","title":"Summary","text":"<p>The testing framework provides a comprehensive foundation for ensuring the reliability and quality of the GitHub Toolkit. By following the standardized patterns and leveraging the provided fixtures, developers can create robust test suites that maintain the 80% coverage requirement while providing confidence in the system's behavior.</p>"},{"location":"guides/understanding-actions/","title":"Understanding Actions in GitHub Toolkit","text":"<p>This guide explains the two types of actions in the GitHub Toolkit: Core Actions and Composite Actions. Both follow the Loosely Coupled Modular Composition Pattern (LCMCP) for consistent architecture. Understanding these concepts is essential for effectively using and extending the toolkit.</p>"},{"location":"guides/understanding-actions/#core-actions","title":"Core Actions","text":"<p>Core Actions are atomic, self-contained operations that perform a single specific task. They follow the principle of single responsibility and are designed to be reusable building blocks.</p>"},{"location":"guides/understanding-actions/#what-is-a-core-action","title":"What is a Core Action","text":"<p>Core Actions are: - Atomic: Each action performs one specific operation - Self-contained: All dependencies are packaged within the action - Docker-based: Executed in isolated containers for consistency - Generated: Created from FCM (Formal Conceptual Model) definitions</p>"},{"location":"guides/understanding-actions/#anatomy-of-a-core-action","title":"Anatomy of a Core Action","text":"<p>Every Core Action follows this standardized structure:</p> <pre><code>actions/core/[action-name]/\n\u251c\u2500\u2500 action.yml          # GitHub Action metadata\n\u251c\u2500\u2500 Dockerfile          # Container definition\n\u251c\u2500\u2500 main.py            # Implementation logic\n\u251c\u2500\u2500 .bridge-sync       # FCM generation metadata (if generated)\n\u2514\u2500\u2500 tests/             # Test suite\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 test_unit.py\n    \u2514\u2500\u2500 test_integration.py\n</code></pre>"},{"location":"guides/understanding-actions/#key-components-explained","title":"Key Components Explained","text":""},{"location":"guides/understanding-actions/#actionyml-structure","title":"action.yml Structure","text":"<p>The <code>action.yml</code> file defines the action's interface:</p> <pre><code>name: 'Branch Operations'\ndescription: 'Perform Git branch operations'\nauthor: 'Deepworks'\ninputs:\n  action:\n    description: 'Branch operation to perform'\n    required: true\n  branch_name:\n    description: 'Name of the branch to operate on'\n    required: false\noutputs:\n  result:\n    description: 'Operation result (success/failure)'\n  current_branch:\n    description: 'Current branch after operation'\nruns:\n  using: 'docker'\n  image: 'Dockerfile'\n</code></pre>"},{"location":"guides/understanding-actions/#dockerfile-pattern","title":"Dockerfile Pattern","text":"<p>Core Actions use a consistent Docker pattern:</p> <pre><code>FROM python:3.9-slim\n\n# Install git (required for git operations)\nRUN apt-get update &amp;&amp; apt-get install -y git &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /app\n\n# Copy implementation\nCOPY main.py .\n\n# Set entrypoint\nENTRYPOINT [\"python\", \"/app/main.py\"]\n</code></pre>"},{"location":"guides/understanding-actions/#mainpy-implementation-pattern","title":"main.py Implementation Pattern","text":"<p>The main.py follows a standard structure for Core Actions:</p> <pre><code>#!/usr/bin/env python3\n\nimport os\nimport sys\nimport subprocess\n\nclass GitBranchOperations:\n    def __init__(self):\n        self._configure_git()\n\n    def _configure_git(self):\n        \"\"\"Configure git for safe directory operations.\"\"\"\n        try:\n            subprocess.check_call(['git', 'config', '--global', '--add', 'safe.directory', '/github/workspace'])\n        except subprocess.CalledProcessError as e:\n            print(f\"Error configuring git: {e}\")\n            sys.exit(1)\n\ndef main():\n    \"\"\"Main entry point for the action.\"\"\"\n    # Get inputs from environment variables\n    action = os.environ.get('INPUT_ACTION')\n    branch_name = os.environ.get('INPUT_BRANCH_NAME')\n\n    # Perform operations\n    # ...\n\n    # Set outputs\n    with open(os.environ['GITHUB_OUTPUT'], 'a') as f:\n        f.write(f\"result={'success' if result else 'failure'}\\n\")\n        f.write(f\"current_branch={current_branch}\\n\")\n\n    if not result:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"guides/understanding-actions/#inputoutput-patterns","title":"Input/Output Patterns","text":"<p>Core Actions follow GitHub's standard patterns:</p> <ul> <li>Input Variables: Accessed via <code>os.environ.get('INPUT_[NAME]')</code></li> <li>Output Variables: Written to <code>$GITHUB_OUTPUT</code> file</li> <li>Error Handling: Use appropriate exit codes (0 for success, 1+ for errors)</li> </ul>"},{"location":"guides/understanding-actions/#example-branch-operations-core-action","title":"Example: Branch Operations Core Action","text":"<p>The <code>branch_operations</code> action demonstrates a complete Core Action implementation:</p> <p>Location: <code>actions/core/branch_operations/</code></p> <p>Purpose: Provides comprehensive Git branch management capabilities</p> <p>Key Features: - Create, delete, checkout, merge, and list branches - Support for remote operations - Force operations when needed - Pattern-based branch filtering</p> <p>Usage Example: <pre><code>- uses: ./actions/core/branch_operations\n  with:\n    action: create\n    branch_name: feature/new-feature\n    base_branch: main\n    remote: true\n</code></pre></p> <p>This action showcases all the patterns and best practices for Core Actions: - Comprehensive input validation - Atomic operations with clear success/failure states - Proper error handling and logging - Standardized output format - Complete test coverage</p>"},{"location":"guides/understanding-actions/#composite-actions","title":"Composite Actions","text":"<p>Composite Actions in this toolkit follow the Loosely Coupled Modular Composition Pattern (LCMCP), a design philosophy that emphasizes modularity, encapsulation, and composition. For complete details on LCMCP principles and implementation patterns, see the LCMCP Models Repository.</p> <p>While GitHub provides a native composite action format using <code>using: composite</code> with steps, this toolkit deliberately uses Docker-based implementations for all actions, including composites.</p>"},{"location":"guides/understanding-actions/#design-philosophy-why-docker-for-composite-actions","title":"Design Philosophy: Why Docker for Composite Actions","text":"<p>The decision to use Docker for Composite Actions rather than GitHub's native composite format is based on the LCMCP principles:</p> <ol> <li>Strict Encapsulation: Docker containers provide complete encapsulation of dependencies, environment, and implementation details</li> <li>Atomic Responsibility: Each action, whether Core or Composite, maintains a single, well-defined responsibility</li> <li>Consistent Interface: All actions expose the same interface pattern regardless of complexity</li> <li>Framework Agnosticism: Docker-based actions can run in any environment that supports containers</li> <li>Progressive Complexity: Complex behavior emerges from composing simpler modules, not from inheritance or steps</li> </ol>"},{"location":"guides/understanding-actions/#what-are-composite-actions","title":"What are Composite Actions","text":"<p>In this toolkit, Composite Actions are: - Higher-level orchestrators: Combine multiple operations into unified workflows - Business logic containers: Encapsulate domain-specific processes - Docker-based modules: Use the same container pattern as Core Actions - Loosely coupled: Interact with other actions through well-defined interfaces</p>"},{"location":"guides/understanding-actions/#architecture-pattern","title":"Architecture Pattern","text":"<pre><code>name: \"Update Changelog\"\ndescription: \"Manages CHANGELOG.md file content and formatting\"\ninputs:\n  content:\n    description: 'Content to add to changelog'\n    required: true\n  mode:\n    description: 'Operation mode (unreleased, release)'\n    required: true\n  version:\n    description: 'Version number for release mode'\n    required: false\n\nruns:\n  using: \"docker\"\n  image: \"Dockerfile\"\n</code></pre> <p>This pattern provides several advantages: - Consistency: All actions follow the same execution model - Isolation: Each action runs in its own environment - Testability: Docker containers can be tested independently - Portability: Actions work identically across different systems</p>"},{"location":"guides/understanding-actions/#example-update-changelog-composite-action","title":"Example: Update Changelog Composite Action","text":"<p>The <code>update_changelog</code> action demonstrates the LCMCP pattern in practice:</p> <p>Location: <code>actions/composite/update_changelog/</code></p> <p>Purpose: Manages CHANGELOG.md file updates with complex formatting logic</p> <p>Key Design Elements: - Encapsulates all changelog logic within a single container - Exposes a simple interface hiding complex implementation - Maintains no direct dependencies on other actions - Can be composed with other actions in workflows</p> <p>Usage in Workflow: <pre><code>- uses: deepworks-net/github.toolkit/actions/composite/update_changelog@v1\n  with:\n    content: ${{ steps.notes.outputs.content }}\n    mode: 'unreleased'\n    version: ${{ steps.version.outputs.next_version }}\n</code></pre></p>"},{"location":"guides/understanding-actions/#composition-over-steps","title":"Composition Over Steps","text":"<p>Unlike traditional GitHub composite actions that define steps, LCMCP composite actions achieve complexity through:</p> <ol> <li>Internal Composition: Complex logic is handled within the container</li> <li>External Orchestration: Workflows compose multiple actions</li> <li>Clear Boundaries: Each action maintains its own state and logic</li> <li>Minimal Coupling: Actions communicate only through inputs/outputs</li> </ol> <p>Example workflow composition: <pre><code>steps:\n  # Each action is a self-contained module\n  - name: Calculate Version\n    id: version\n    uses: ./actions/core/version_calculator\n\n  - name: Generate Release Notes\n    id: notes\n    uses: ./actions/composite/release_notes\n    with:\n      version: ${{ steps.version.outputs.next_version }}\n\n  - name: Update Changelog\n    uses: ./actions/composite/update_changelog\n    with:\n      content: ${{ steps.notes.outputs.content }}\n      version: ${{ steps.version.outputs.next_version }}\n</code></pre></p>"},{"location":"guides/understanding-actions/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<ol> <li>Uniform Testing: All actions can be tested the same way</li> <li>Consistent Deployment: Same deployment pattern for all actions</li> <li>Clear Boundaries: No confusion about where logic resides</li> <li>Better Encapsulation: Implementation details truly hidden</li> <li>Easier Maintenance: Changes don't cascade through step definitions</li> </ol>"},{"location":"guides/understanding-actions/#action-development-guidelines","title":"Action Development Guidelines","text":""},{"location":"guides/understanding-actions/#when-to-create-core-actions","title":"When to Create Core Actions","text":"<p>Create Core Actions when you need: - Single-purpose, atomic operations - Reusable functionality across multiple workflows - Standardized error handling and logging - Consistent input/output patterns</p>"},{"location":"guides/understanding-actions/#when-to-create-composite-actions","title":"When to Create Composite Actions","text":"<p>Create Composite Actions when you need: - Multi-step processes that form a cohesive business operation - Complex logic that combines multiple atomic operations - Domain-specific workflows that hide implementation complexity - Reusable patterns that appear across multiple workflows</p>"},{"location":"guides/understanding-actions/#best-practices","title":"Best Practices","text":"<ol> <li>Follow the Single Responsibility Principle: Each Core Action should do one thing well</li> <li>Use Environment Variables: Follow GitHub's input/output conventions</li> <li>Implement Comprehensive Testing: Both unit and integration tests are required</li> <li>Document Thoroughly: Clear descriptions and usage examples</li> <li>Handle Errors Gracefully: Provide meaningful error messages and appropriate exit codes</li> <li>Maintain Consistency: Follow established patterns and conventions</li> </ol>"},{"location":"guides/understanding-actions/#lcmcp-principles-in-action-development","title":"LCMCP Principles in Action Development","text":"<p>When developing actions in this toolkit, follow these LCMCP principles (detailed in the LCMCP Models Repository):</p> <ol> <li>Maintain Module Independence: Each action should function without knowledge of other actions</li> <li>Use Explicit Interfaces: All inputs and outputs must be clearly defined</li> <li>Avoid Hidden Dependencies: Don't rely on external state or side effects</li> <li>Compose, Don't Inherit: Build complex behavior by combining simple actions</li> <li>Encapsulate Completely: Hide all implementation details behind the action interface</li> </ol>"},{"location":"guides/understanding-actions/#integration-with-fcm-bridge","title":"Integration with FCM Bridge","text":"<p>Many Core Actions are generated from FCM (Formal Conceptual Model) definitions. These actions include a <code>.bridge-sync</code> file that tracks their generation metadata:</p> <pre><code>source: axioms/git/branch-operations.fcm\ngenerated: 2024-01-15T10:30:00Z\nchecksum: sha256:abc123...\n</code></pre> <p>Important: Never edit generated actions directly. Instead, modify the FCM definition and regenerate the action using the bridge system.</p>"},{"location":"guides/understanding-actions/#testing-requirements","title":"Testing Requirements","text":"<p>All actions must include comprehensive test suites:</p> <ul> <li>Unit Tests: Test individual functions and methods</li> <li>Integration Tests: Test complete action workflows</li> <li>Coverage: Minimum 80% code coverage required</li> <li>Fixtures: Use standardized test fixtures from <code>actions/test_framework/</code></li> </ul> <p>See the Testing Framework Guide for detailed testing patterns and requirements.</p>"},{"location":"guides/understanding-actions/#related-guides","title":"Related Guides","text":"<ul> <li>Understanding Workflows - Learn how actions are used in workflows</li> <li>Understanding FCM Bridge - Understand action generation</li> <li>Testing Framework - Testing patterns and requirements</li> </ul>"},{"location":"guides/understanding-workflows/","title":"Understanding Workflows in GitHub Toolkit","text":"<p>This guide explains the different types of workflows in the GitHub Toolkit and how they orchestrate actions to create complete automation solutions.</p>"},{"location":"guides/understanding-workflows/#overview","title":"Overview","text":"<p>Workflows in the GitHub Toolkit are organized into three distinct categories, each serving a specific purpose in the automation ecosystem:</p> <ol> <li>Core Workflows: Execute single actions with defined interfaces</li> <li>Flow Workflows: Orchestrate multi-step business processes</li> <li>Test Workflows: Validate and verify system components</li> </ol>"},{"location":"guides/understanding-workflows/#core-workflows","title":"Core Workflows","text":"<p>Core Workflows provide standardized interfaces for executing individual Core Actions. They act as wrappers that make actions reusable across different contexts.</p>"},{"location":"guides/understanding-workflows/#characteristics","title":"Characteristics","text":"<ul> <li>Single Action Execution: Each workflow executes one Core Action</li> <li>Reusable Interface: Can be called from other workflows</li> <li>Standardized Parameters: Consistent input/output patterns</li> <li>Error Handling: Proper error propagation and status reporting</li> </ul>"},{"location":"guides/understanding-workflows/#structure-pattern","title":"Structure Pattern","text":"<p>Core Workflows follow a consistent structure:</p> <pre><code>name: Core - [Action Name]\n\non:\n  workflow_dispatch:  # Manual triggering\n  workflow_call:      # Reusable workflow\n    inputs:\n      # Action-specific inputs\n      action:\n        type: string\n        required: true\n        description: \"Operation to perform\"\n    outputs:\n      # Action-specific outputs\n      result:\n        description: \"Operation result\"\n        value: ${{ jobs.main.outputs.result }}\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    outputs:\n      result: ${{ steps.action.outputs.result }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Execute action\n        id: action\n        uses: ./actions/core/[action-name]\n        with:\n          action: ${{ inputs.action }}\n          # ... other inputs\n</code></pre>"},{"location":"guides/understanding-workflows/#example-branch-operations-core-workflow","title":"Example: Branch Operations Core Workflow","text":"<p>Location: <code>.github/workflows/core.action.branch_operations.yml</code></p> <p>Purpose: Provides a reusable interface for branch operations</p> <p>Key Features: - Supports all branch operations (create, delete, list, checkout, merge, push) - Configurable parameters for different use cases - Proper output handling and error propagation - Manual and programmatic execution support</p> <p>Usage: <pre><code>jobs:\n  create-branch:\n    uses: ./.github/workflows/core.action.branch_operations.yml\n    with:\n      action: create\n      branch_name: feature/new-feature\n      base_branch: main\n      remote: true\n</code></pre></p>"},{"location":"guides/understanding-workflows/#flow-workflows","title":"Flow Workflows","text":"<p>Flow Workflows orchestrate complex business processes by combining multiple Core Workflows and actions in logical sequences.</p>"},{"location":"guides/understanding-workflows/#characteristics_1","title":"Characteristics","text":"<ul> <li>Multi-Step Processes: Combine multiple operations</li> <li>Business Logic: Implement organizational workflows</li> <li>Conditional Execution: Support branching logic based on conditions</li> <li>State Management: Handle data flow between steps</li> </ul>"},{"location":"guides/understanding-workflows/#example-prepare-release-flow","title":"Example: Prepare Release Flow","text":"<p>Location: <code>workflows/prepare-release.yml</code></p> <p>Purpose: Automates the complete release preparation process</p> <p>Process Flow: 1. Trigger: Activated by pushing a 'prep' tag 2. Version Calculation: Determines next version number 3. Version Updates: Updates version in configuration files 4. Release Notes: Generates release documentation 5. Changelog Update: Updates CHANGELOG.md with release information 6. Branch Creation: Creates release branch and pull request</p> <p>Implementation: <pre><code>name: Prepare Release Branch\n\non:\n  push:\n    tags:\n      - 'prep'\n\njobs:\n  create-release-branch:\n    if: github.ref_type == 'tag' &amp;&amp; github.ref == 'refs/tags/prep'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v4\n        with:\n          ref: staging\n          fetch-depth: 0\n\n      - name: Calculate Version\n        uses: deepworks-net/github.toolkit/actions/version_calculation\n        id: version\n\n      - name: Update Version Numbers\n        uses: deepworks-net/github.toolkit/actions/version_update\n        with:\n          version: ${{ steps.version.outputs.next_version }}\n          files: 'mkdocs.yml'\n\n      - name: Get Release Content\n        uses: deepworks-net/github.toolkit/actions/release_notes\n        id: notes\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          mode: 'prepare-release'\n          version: ${{ steps.version.outputs.next_version }}\n\n      - name: Update Changelog File\n        uses: deepworks-net/github.toolkit/actions/update_changelog\n        with:\n          content: ${{ steps.notes.outputs.content }}\n          mode: 'release'\n          version: ${{ steps.version.outputs.next_version }}\n\n      - name: Create Release Branch &amp; PR\n        uses: deepworks-net/github.toolkit/actions/git_ops\n        with:\n          files: 'CHANGELOG.md'\n          commit-message: 'Prepare release ${{ steps.version.outputs.next_version }}'\n          create-pr: true\n          pr-title: 'Release ${{ steps.version.outputs.next_version }}'\n</code></pre></p> <p>This workflow demonstrates key Flow Workflow patterns: - Sequential Execution: Each step depends on the previous one - Data Passing: Outputs from one step become inputs to the next - Conditional Logic: Only runs when specific conditions are met - Integration: Combines multiple actions into a cohesive process</p>"},{"location":"guides/understanding-workflows/#example-update-changelog-flow","title":"Example: Update Changelog Flow","text":"<p>Location: <code>workflows/update-changelog.yml</code></p> <p>Purpose: Automatically updates changelog when PRs are merged</p> <p>Process Flow: 1. Trigger: Activated when PR is merged to staging 2. Version Calculation: Determines next version 3. Content Generation: Creates changelog content from PR information 4. File Update: Updates CHANGELOG.md with new content 5. Commit: Commits changes back to repository</p> <p>Key Features: - Event-Driven: Responds to PR merge events - Conditional Execution: Only runs for merged PRs - Automatic Content Generation: Creates changelog entries from PR data - Repository Integration: Commits changes automatically</p>"},{"location":"guides/understanding-workflows/#test-workflows","title":"Test Workflows","text":"<p>Test Workflows validate the integrity and functionality of the toolkit components.</p>"},{"location":"guides/understanding-workflows/#test-framework-workflow","title":"Test Framework Workflow","text":"<p>Location: <code>.github/workflows/test.framework.yml</code></p> <p>Purpose: Comprehensive testing of all toolkit components</p> <p>Test Categories:</p> <ol> <li>Unit and Integration Tests:</li> <li>Matrix testing across multiple actions</li> <li>Coverage verification (minimum 80%)</li> <li> <p>Dependency validation</p> </li> <li> <p>Framework Validation:</p> </li> <li>Test template verification</li> <li>Documentation completeness</li> <li> <p>Fixture availability</p> </li> <li> <p>Code Quality:</p> </li> <li>Python linting with flake8</li> <li>Syntax validation</li> <li>Complexity analysis</li> </ol> <p>Implementation Highlights: <pre><code>strategy:\n  matrix:\n    action-path:\n      - actions/core/branch_operations\n      - actions/core/version_calculator\n      - actions/core/version_updater\n      - actions/core/manage_release\n\nsteps:\n  - name: Run tests\n    working-directory: ${{ matrix.action-path }}\n    run: |\n      pytest --cov=. --cov-report=xml --cov-report=term-missing\n\n  - name: Verify coverage threshold\n    working-directory: ${{ matrix.action-path }}\n    run: |\n      COVERAGE=$(python -c \"import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])\")\n      COVERAGE_PCT=$(echo \"$COVERAGE * 100\" | bc)\n      if (( $(echo \"$COVERAGE_PCT &lt; 80\" | bc -l) )); then\n        echo \"Error: Code coverage is below 80%\"\n        exit 1\n      fi\n</code></pre></p>"},{"location":"guides/understanding-workflows/#workflow-naming-conventions","title":"Workflow Naming Conventions","text":"<p>The toolkit uses a structured naming convention to organize workflows:</p>"},{"location":"guides/understanding-workflows/#privateinternal-workflows","title":"Private/Internal Workflows","text":"<ul> <li>Pattern: <code>.flow.[name].yml</code> or <code>.core.[name].yml</code></li> <li>Purpose: Repository-specific workflows not intended for external use</li> <li>Visibility: Private to the repository (like private access modifiers in programming languages)</li> <li>Examples:</li> <li><code>.flow.update_version.yml</code> - Internal version management</li> <li><code>.core.repository_setup.yml</code> - Repository-specific setup</li> </ul> <p>Important: Workflows prefixed with a dot (<code>.</code>) are internal to the repository and should not be referenced externally via <code>uses:</code> statements. These handle repository-specific operations and may change without notice.</p>"},{"location":"guides/understanding-workflows/#core-workflows_1","title":"Core Workflows","text":"<ul> <li>Pattern: <code>core.action.[action-name].yml</code></li> <li>Purpose: Reusable wrappers for Core Actions</li> <li>Visibility: Public - can be used by external repositories</li> <li>Examples: </li> <li><code>core.action.branch_operations.yml</code></li> <li><code>core.action.version_calculator.yml</code></li> </ul>"},{"location":"guides/understanding-workflows/#flow-workflows_1","title":"Flow Workflows","text":"<ul> <li>Pattern: <code>flow.[process-name].yml</code> or <code>[process-name].yml</code></li> <li>Purpose: Business process orchestration</li> <li>Visibility: Public - can be used externally depending on exposed inputs/outputs</li> <li>Examples:</li> <li><code>flow.prepare-release.yml</code></li> <li><code>update-changelog.yml</code></li> </ul>"},{"location":"guides/understanding-workflows/#test-workflows_1","title":"Test Workflows","text":"<ul> <li>Pattern: <code>test.[component].yml</code></li> <li>Purpose: Validation and verification</li> <li>Examples:</li> <li><code>test.framework.yml</code></li> <li><code>test.core.action.branch_operations.yml</code></li> </ul>"},{"location":"guides/understanding-workflows/#workflow-anatomy","title":"Workflow Anatomy","text":""},{"location":"guides/understanding-workflows/#common-components","title":"Common Components","text":"<p>All workflows share these common elements:</p>"},{"location":"guides/understanding-workflows/#triggers-on","title":"Triggers (on:)","text":"<pre><code>on:\n  push:\n    branches: [main, staging]\n  pull_request:\n    types: [closed]\n  workflow_call:\n    inputs:\n      # Reusable workflow inputs\n  workflow_dispatch:\n    # Manual triggering\n</code></pre>"},{"location":"guides/understanding-workflows/#jobs-structure","title":"Jobs Structure","text":"<pre><code>jobs:\n  job-name:\n    runs-on: ubuntu-latest\n    if: # Conditional execution\n    outputs:\n      # Job outputs\n    steps:\n      # Sequential steps\n</code></pre>"},{"location":"guides/understanding-workflows/#steps-composition","title":"Steps Composition","text":"<pre><code>steps:\n  - name: Checkout Repository\n    uses: actions/checkout@v4\n    with:\n      fetch-depth: 0\n\n  - name: Execute Action\n    uses: ./actions/core/action-name\n    with:\n      # Action inputs\n\n  - name: Process Results\n    run: |\n      # Shell commands\n</code></pre>"},{"location":"guides/understanding-workflows/#integration-patterns","title":"Integration Patterns","text":""},{"location":"guides/understanding-workflows/#parameter-passing","title":"Parameter Passing","text":"<pre><code># From workflow input to action\nwith:\n  version: ${{ inputs.version }}\n  content: ${{ steps.previous.outputs.content }}\n</code></pre>"},{"location":"guides/understanding-workflows/#secret-management","title":"Secret Management","text":"<pre><code># Secure token handling\nwith:\n  github-token: ${{ secrets.GITHUB_TOKEN }}\nenv:\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"guides/understanding-workflows/#conditional-execution","title":"Conditional Execution","text":"<pre><code># Conditional job execution\nif: github.event.pull_request.merged == true\n\n# Conditional step execution\n- name: Deploy\n  if: steps.tests.outputs.result == 'success'\n</code></pre>"},{"location":"guides/understanding-workflows/#best-practices","title":"Best Practices","text":""},{"location":"guides/understanding-workflows/#workflow-design","title":"Workflow Design","text":"<ol> <li>Single Responsibility: Each workflow should have a clear, single purpose</li> <li>Reusability: Design workflows to be called from other workflows</li> <li>Error Handling: Implement proper error handling and status reporting</li> <li>Documentation: Include clear descriptions and usage examples</li> </ol>"},{"location":"guides/understanding-workflows/#integration-patterns_1","title":"Integration Patterns","text":"<ol> <li>Consistent Interfaces: Use standardized input/output patterns</li> <li>Proper Permissions: Set minimal required permissions</li> <li>Secure Secrets: Handle sensitive information securely</li> <li>Conditional Logic: Use conditions to control execution flow</li> </ol>"},{"location":"guides/understanding-workflows/#testing-and-validation","title":"Testing and Validation","text":"<ol> <li>Comprehensive Testing: Test all workflow paths and conditions</li> <li>Matrix Testing: Use matrix strategies for testing multiple configurations</li> <li>Coverage Requirements: Maintain minimum 80% test coverage</li> <li>Automated Validation: Include automated validation in CI/CD</li> </ol>"},{"location":"guides/understanding-workflows/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/understanding-workflows/#common-issues","title":"Common Issues","text":"<ol> <li>Permission Errors: Ensure workflows have required permissions</li> <li>Secret Issues: Verify secret names and availability</li> <li>Conditional Logic: Check condition syntax and evaluation</li> <li>Action Versions: Ensure correct action versions are specified</li> </ol>"},{"location":"guides/understanding-workflows/#debugging-techniques","title":"Debugging Techniques","text":"<ol> <li>Enable Debug Logging: Set <code>ACTIONS_STEP_DEBUG=true</code></li> <li>Add Debug Steps: Include debug output in workflows</li> <li>Check Action Logs: Review individual action execution logs</li> <li>Validate Inputs: Verify input values and types</li> </ol>"},{"location":"guides/understanding-workflows/#related-guides","title":"Related Guides","text":"<ul> <li>Understanding Actions - Learn about actions used in workflows</li> <li>Understanding FCM Bridge - Understand action generation</li> <li>Testing Framework - Testing patterns and requirements</li> </ul>"},{"location":"repo/","title":"GitHub Core Repository","text":""},{"location":"repo/#github-core-repository-files","title":"GitHub Core Repository Files","text":"READMECHANGELOGLICENSE <p>Below is the Github Core Repository Readme</p> <p>Below is the Github Core Repository Changelog</p> <p>Below is the Github Core Repository License</p>"},{"location":"repo/#github-actions-collection","title":"GitHub Actions Collection","text":"<p>NOTE THIS FILE IS INTENTIONALLY BLANK AS IT SHOULD BE OVERRIDEN WHEN GITHUB ACTIONS PUBLISHES THE MKDOCS</p>"},{"location":"repo/#githubactions-repository-changelog","title":"github.actions Repository Changelog","text":"<p>NOTE THIS FILE IS INTENTIONALLY BLANK AS IT SHOULD BE OVERRIDEN WHEN GITHUB ACTIONS PUBLISHES THE MKDOCS</p>"},{"location":"repo/#github-license-file","title":"GitHub LICENSE File","text":"<p>NOTE THIS FILE IS INTENTIONALLY BLANK AS IT SHOULD BE OVERRIDEN WHEN GITHUB ACTIONS PUBLISHES THE MKDOCS</p>"},{"location":"repo/inc/","title":"GitHub Actions Collection","text":"<p>NOTE THIS FILE IS INTENTIONALLY BLANK AS IT SHOULD BE OVERRIDEN WHEN GITHUB ACTIONS PUBLISHES THE MKDOCS</p>"},{"location":"repo/inc/CHANGELOG/","title":"github.actions Repository Changelog","text":"<p>NOTE THIS FILE IS INTENTIONALLY BLANK AS IT SHOULD BE OVERRIDEN WHEN GITHUB ACTIONS PUBLISHES THE MKDOCS</p>"},{"location":"repo/inc/LICENSE/","title":"GitHub LICENSE File","text":"<p>NOTE THIS FILE IS INTENTIONALLY BLANK AS IT SHOULD BE OVERRIDEN WHEN GITHUB ACTIONS PUBLISHES THE MKDOCS</p>"},{"location":"tests/","title":"Testing in GitHub Actions Toolkit","text":"<p>This section describes the testing approach, standards, and tools used across the repository.</p> <p>\ud83d\udcd6 For comprehensive documentation: Testing Framework Guide</p>"},{"location":"tests/#testing-framework","title":"Testing Framework","text":"<p>All actions in this repository use a standardized testing framework for consistent testing.</p>"},{"location":"tests/#test-structure","title":"Test Structure","text":"<p>Tests are organized into three categories:</p> <ol> <li>Unit Tests - Test individual functions and classes in isolation</li> <li>Integration Tests - Test interactions between components</li> <li>End-to-End Tests - Test complete workflows in a realistic environment</li> </ol>"},{"location":"tests/#coverage-requirements","title":"Coverage Requirements","text":"<p>All code must maintain a minimum of 80% test coverage. This is enforced by automated checks in the CI pipeline.</p>"},{"location":"tests/#running-tests","title":"Running Tests","text":"<p>Tests can be run using pytest:</p> <pre><code># Navigate to an action directory\ncd actions/core/branch_operations\n\n# Run all tests\npytest\n\n# Run with coverage report\npytest --cov=. --cov-report=term-missing\n\n# Run only unit tests\npytest -m unit\n\n# Run only integration tests\npytest -m integration\n</code></pre>"},{"location":"tests/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>A GitHub Actions workflow automatically runs tests on: - Pull requests to main and develop branches - Pushes to main and develop branches</p> <p>The workflow: 1. Runs tests for each action 2. Verifies minimum 80% code coverage 3. Runs linting to ensure code quality</p>"},{"location":"tests/#test-templates","title":"Test Templates","text":"<p>Standardized test templates are available to maintain consistency:</p> <pre><code># Copy unit test template\ncp actions/test_framework/test_templates/test_unit_template.py your_action/tests/test_unit.py\n\n# Copy integration test template\ncp actions/test_framework/test_templates/test_integration_template.py your_action/tests/test_integration.py\n</code></pre>"},{"location":"tests/#available-fixtures","title":"Available Fixtures","text":"<p>The test framework provides fixtures for common testing scenarios:</p> <ul> <li><code>mock_subprocess</code> - Mocks subprocess calls to git</li> <li><code>mock_git_env</code> - Sets up GitHub Actions environment variables</li> <li><code>mock_git_repo</code> - Simulates a git repository structure</li> <li><code>git_outputs</code> - Provides sample git command outputs</li> </ul>"},{"location":"tests/#common-test-patterns","title":"Common Test Patterns","text":""},{"location":"tests/#1-input-validation-tests","title":"1. Input Validation Tests","text":"<pre><code>def test_invalid_input(mock_git_env):\n    # Arrange\n    os.environ['INPUT_INVALID'] = 'invalid-value'\n\n    # Act &amp; Assert\n    with pytest.raises(SystemExit):\n        main()\n</code></pre>"},{"location":"tests/#2-output-verification-tests","title":"2. Output Verification Tests","text":"<pre><code>def test_output_format(mock_subprocess, mock_git_env):\n    # Arrange\n    os.environ['INPUT_ACTION'] = 'list'\n    mock_subprocess['check_output'].return_value = 'branch1\\nbranch2'\n\n    # Act\n    main()\n\n    # Assert\n    with open(mock_git_env['GITHUB_OUTPUT'], 'r') as f:\n        output = f.read()\n    assert 'branches=branch1,branch2' in output\n</code></pre>"},{"location":"tests/#3-error-handling-tests","title":"3. Error Handling Tests","text":"<pre><code>def test_error_handling(mock_subprocess, mock_git_env):\n    # Arrange\n    mock_subprocess['check_call'].side_effect = subprocess.CalledProcessError(1, 'git')\n\n    # Act &amp; Assert\n    with pytest.raises(SystemExit):\n        main()\n</code></pre>"},{"location":"tests/#test-file-structure","title":"Test File Structure","text":"<pre><code>actions/\n\u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 branch_operations/\n\u2502   \u2502   \u251c\u2500\u2500 tests/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 conftest.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 test_unit.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 test_integration.py\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u251c\u2500\u2500 action.yml\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u2514\u2500\u2500 pytest.ini\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 test_framework/\n    \u251c\u2500\u2500 conftest.py\n    \u251c\u2500\u2500 pytest.ini\n    \u251c\u2500\u2500 README.md\n    \u2514\u2500\u2500 test_templates/\n        \u251c\u2500\u2500 test_unit_template.py\n        \u2514\u2500\u2500 test_integration_template.py\n</code></pre>"},{"location":"tests/#available-test-suites","title":"Available Test Suites","text":"<ul> <li>Branch Operations Tests</li> <li>Version Calculator Tests</li> <li>Version Updater Tests</li> </ul>"},{"location":"tests/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive test names that explain what is being tested</li> <li>Follow the Arrange-Act-Assert pattern</li> <li>Keep unit tests focused on a single function</li> <li>Use the provided fixtures to minimize test setup code</li> <li>Mock external dependencies and API calls</li> <li>Always test error handling and edge cases</li> </ol>"},{"location":"tests/core/branch_operations/","title":"Branch Operations Tests","text":"<p>This page describes the testing approach for the Branch Operations action.</p>"},{"location":"tests/core/branch_operations/#test-structure","title":"Test Structure","text":"<p>The Branch Operations action follows the standard testing framework with:</p> <ol> <li>Unit Tests - Testing individual functions in isolation</li> <li>Integration Tests - Testing the action as a whole</li> <li>Mocked Git Operations - Using pytest fixtures to avoid actual git calls</li> </ol>"},{"location":"tests/core/branch_operations/#running-tests","title":"Running Tests","text":"<pre><code># Navigate to action directory\ncd actions/core/branch_operations\n\n# Run all tests\npython -m pytest\n\n# Run only unit tests\npython -m pytest -m unit\n\n# Run only integration tests\npython -m pytest -m integration\n\n# Run with coverage\npython -m pytest --cov=. --cov-report=term-missing\n</code></pre>"},{"location":"tests/core/branch_operations/#test-cases","title":"Test Cases","text":""},{"location":"tests/core/branch_operations/#unit-tests","title":"Unit Tests","text":"Test Description <code>test_create_branch_success</code> Verify branch creation works <code>test_delete_branch_success</code> Verify branch deletion works <code>test_delete_current_branch</code> Test behavior when deleting current branch <code>test_delete_remote_branch</code> Test remote branch deletion <code>test_list_branches</code> Test branch listing functionality <code>test_list_branches_with_pattern</code> Test pattern-based branch filtering <code>test_checkout_branch</code> Test branch checkout <code>test_merge_branch</code> Test branch merging <code>test_create_action</code> Test create action in main function <code>test_list_action</code> Test list action in main function"},{"location":"tests/core/branch_operations/#integration-tests","title":"Integration Tests","text":"Test Description <code>test_branch_lifecycle</code> End-to-end test of branch creation, listing, checkout, merge, and deletion <code>test_remote_operations</code> Test remote branch operations <code>test_force_operations</code> Test force flags for various operations"},{"location":"tests/core/branch_operations/#test-fixtures","title":"Test Fixtures","text":"<p>The tests use several fixtures from the standard testing framework:</p> <ol> <li><code>mock_subprocess</code> - Mocks subprocess calls to git</li> <li><code>mock_git_env</code> - Sets up GitHub Actions environment variables</li> <li><code>branch_outputs</code> - Provides sample branch command outputs</li> </ol>"},{"location":"tests/core/branch_operations/#example-test","title":"Example Test","text":"<pre><code>def test_create_branch_success(mock_subprocess, mock_git_env):\n    \"\"\"Test successful branch creation.\"\"\"\n    # Arrange\n    branch_ops = GitBranchOperations()\n\n    # Act\n    result = branch_ops.create_branch('feature/test-branch', 'main')\n\n    # Assert\n    assert result is True\n    assert mock_subprocess['check_call'].call_count == 3\n    expected_calls = [\n        call(['git', 'config', '--global', '--add', 'safe.directory', '/github/workspace']),\n        call(['git', 'checkout', 'main']),\n        call(['git', 'pull', 'origin', 'main']),\n        call(['git', 'checkout', '-b', 'feature/test-branch'])\n    ]\n    mock_subprocess['check_call'].assert_has_calls(expected_calls)\n</code></pre>"},{"location":"tests/core/tag_operations/","title":"Tag Operations Tests","text":"<p>This document outlines the testing approach for the Tag Operations action.</p>"},{"location":"tests/core/tag_operations/#overview","title":"Overview","text":"<p>The Tag Operations action includes comprehensive tests to ensure that it functions correctly in all scenarios. The tests are organized into two categories:</p> <ul> <li>Unit Tests: Test individual functions in isolation, using mocks to avoid actual Git operations.</li> <li>Integration Tests: Test the full functionality by performing actual Git operations in a temporary repository.</li> </ul>"},{"location":"tests/core/tag_operations/#test-requirements","title":"Test Requirements","text":"<ul> <li>All tests must pass before merging any changes to the action.</li> <li>Test coverage should be at least 80%.</li> <li>Both unit and integration tests must be included.</li> </ul>"},{"location":"tests/core/tag_operations/#unit-tests","title":"Unit Tests","text":"<p>Unit tests verify that each function in the <code>GitTagOperations</code> class works correctly in isolation. These tests use mocks to avoid making actual Git operations.</p>"},{"location":"tests/core/tag_operations/#test-cases","title":"Test Cases","text":"<ul> <li>Creating lightweight tags</li> <li>Creating annotated tags</li> <li>Creating tags at specific references</li> <li>Force creating tags</li> <li>Validating tag names</li> <li>Deleting tags (local and remote)</li> <li>Pushing tags</li> <li>Listing tags with different patterns and sorting methods</li> <li>Checking if tags exist</li> <li>Getting tag messages</li> </ul>"},{"location":"tests/core/tag_operations/#running-unit-tests","title":"Running Unit Tests","text":"<pre><code>python -m pytest tests/test_unit.py -v\n</code></pre>"},{"location":"tests/core/tag_operations/#integration-tests","title":"Integration Tests","text":"<p>Integration tests verify that the action works correctly in a real Git environment. These tests create a temporary Git repository, perform actual Git operations, and verify the results.</p>"},{"location":"tests/core/tag_operations/#test-cases_1","title":"Test Cases","text":"<ul> <li>Creating and deleting tags</li> <li>Creating annotated tags and retrieving their messages</li> <li>Creating tags at specific references</li> <li>Listing tags with pattern filtering</li> <li>Tag name validation</li> <li>Force creating tags</li> </ul>"},{"location":"tests/core/tag_operations/#running-integration-tests","title":"Running Integration Tests","text":"<pre><code>python -m pytest tests/test_integration.py -v\n</code></pre>"},{"location":"tests/core/tag_operations/#cicd-testing","title":"CI/CD Testing","text":"<p>The action is tested in CI/CD pipelines using the test workflow. This ensures that the action works correctly in a GitHub Actions environment.</p>"},{"location":"tests/core/tag_operations/#test-workflow","title":"Test Workflow","text":"<p>The test workflow creates a temporary Git repository, configures the Git environment, and runs the action with various inputs. It verifies that the action produces the expected outputs and exit codes.</p> <pre><code>name: Test Tag Operations\n\non:\n  push:\n    paths:\n      - 'actions/core/tag_operations/**'\n  pull_request:\n    paths:\n      - 'actions/core/tag_operations/**'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Git\n        run: |\n          git config --global user.name \"Test User\"\n          git config --global user.email \"test@example.com\"\n\n      - name: Run Unit Tests\n        run: |\n          cd actions/core/tag_operations\n          python -m pytest tests/test_unit.py -v --cov=main --cov-report=term\n\n      - name: Run Integration Tests\n        run: |\n          cd actions/core/tag_operations\n          python -m pytest tests/test_integration.py -v\n</code></pre>"},{"location":"tests/core/tag_operations/#test-coverage","title":"Test Coverage","text":"<p>Test coverage is monitored using the <code>pytest-cov</code> plugin. The coverage report is generated during test execution and displayed in the CI/CD pipeline.</p>"},{"location":"tests/core/tag_operations/#edge-cases-and-error-handling","title":"Edge Cases and Error Handling","text":"<p>The tests include a range of edge cases to ensure that the action handles all scenarios correctly:</p> <ul> <li>Invalid tag names</li> <li>Duplicate tag creation</li> <li>Deleting non-existent tags</li> <li>Force operations</li> <li>Various tag name patterns</li> <li>Different sorting methods</li> </ul> <p>Error handling is verified to ensure that the action provides clear error messages and appropriate exit codes in all error scenarios.</p>"},{"location":"tests/core/version_calculator/","title":"Version Calculator Tests","text":""},{"location":"tests/core/version_calculator/#overview","title":"Overview","text":"<p>The test suite for the Version Calculator core action validates functionality, error handling, and output consistency.</p>"},{"location":"tests/core/version_calculator/#test-structure","title":"Test Structure","text":"<pre><code># .github/workflows/test.core.action.version_calculator.yml\non:\n  pull_request:\n    paths:\n      - 'actions/core/version_calculator/**'\n      - '.github/workflows/core.action.version_calculator.yml'\n      - '.github/workflows/test.core.action.version_calculator.yml'\n  workflow_dispatch:\n</code></pre>"},{"location":"tests/core/version_calculator/#test-cases","title":"Test Cases","text":""},{"location":"tests/core/version_calculator/#1-default-version-no-tags","title":"1. Default Version (No Tags)","text":"<p>Tests the behavior when no Git tags exist.</p> <pre><code>test-no-tags:\n  steps:\n    - Clean Environment\n      # Remove local tags\n    - Run Calculator\n      # Input: default_version: 'v0.1.0'\n    - Verify Outputs\n      # Expect:\n      # - next_version: v0.1.0\n      # - current_version: v0.1.0\n      # - commit_count: 0\n</code></pre>"},{"location":"tests/core/version_calculator/#2-version-with-tags","title":"2. Version With Tags","text":"<p>Tests version calculation with existing tags and commits.</p> <pre><code>test-with-tag:\n  steps:\n    - Clean Environment\n    - Create Test State\n      # - Create tag v1.0.0\n      # - Add 2 commits\n    - Run Calculator\n    - Verify Outputs\n      # Expect:\n      # - next_version: v1.0.2\n      # - current_version: v1.0.0\n      # - commit_count: 2\n</code></pre>"},{"location":"tests/core/version_calculator/#3-custom-version-prefix","title":"3. Custom Version Prefix","text":"<p>Tests handling of non-standard version prefixes.</p> <pre><code>test-custom-prefix:\n  steps:\n    - Clean Environment\n    - Create Test State\n      # - Create tag ver1.0.0\n      # - Add 1 commit\n    - Run Calculator\n      # Input:\n      # - version_prefix: 'ver'\n      # - tag_pattern: 'ver*'\n    - Verify Outputs\n      # Expect:\n      # - next_version: ver1.0.1\n      # - current_version: ver1.0.0\n      # - commit_count: 1\n</code></pre>"},{"location":"tests/core/version_calculator/#4-output-verification","title":"4. Output Verification","text":"<p>Tests completeness and format of all outputs.</p> <pre><code>test-all-outputs:\n  steps:\n    - Clean Environment\n    - Create Test State\n      # - Create tag v0.1.0\n      # - Add 1 commit\n    - Run Calculator\n    - Verify All Outputs\n      # Check existence and values of:\n      # - next_version\n      # - current_version\n      # - commit_count\n</code></pre>"},{"location":"tests/core/version_calculator/#environment-setup","title":"Environment Setup","text":"<p>Each test follows a standard setup pattern:</p> <ol> <li> <p>Clean Environment</p> <pre><code>- name: Clean Local Environment\nrun: |\n    git config --global user.email \"test@github.com\"\n    git config --global user.name \"Test User\"\n    git tag -l | xargs -r git tag -d\n</code></pre> </li> <li> <p>Test State Creation</p> <pre><code>- name: Create Test State\nrun: |\n    git tag &lt;tag_name&gt;\n    git commit --allow-empty -m \"test commit\"\n</code></pre> </li> </ol>"},{"location":"tests/core/version_calculator/#output-verification","title":"Output Verification","text":""},{"location":"tests/core/version_calculator/#standard-output-check","title":"Standard Output Check","text":"<pre><code>- name: Verify Output Existence\n  run: |\n    if [[ -z \"${{ steps.version.outputs.next_version }}\" ]] || \\\n       [[ -z \"${{ steps.version.outputs.current_version }}\" ]] || \\\n       [[ -z \"${{ steps.version.outputs.commit_count }}\" ]]; then\n      echo \"Missing required outputs\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_calculator/#value-verification","title":"Value Verification","text":"<pre><code>- name: Verify Output Values\n  run: |\n    if [[ \"${{ steps.version.outputs.next_version }}\" != \"expected_value\" ]]; then\n      echo \"Expected expected_value, got ${{ steps.version.outputs.next_version }}\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_calculator/#error-handling","title":"Error Handling","text":"<p>Tests verify that the action:</p> <ol> <li>Handles missing tags appropriately</li> <li>Validates version formats</li> <li>Manages commit counting correctly</li> <li>Provides all required outputs</li> </ol>"},{"location":"tests/core/version_calculator/#local-testing","title":"Local Testing","text":"<p>To run tests locally:</p> <ol> <li>Clone repository</li> <li>Navigate to action directory</li> <li>Run test workflow:</li> </ol> <pre><code>act pull_request -W .github/workflows/test.core.action.version_calculator.yml\n</code></pre>"},{"location":"tests/core/version_updater/","title":"Version Updater Tests","text":""},{"location":"tests/core/version_updater/#overview","title":"Overview","text":"<p>The test suite for the Version Updater core action validates file updates, error handling, and output consistency across different file types.</p>"},{"location":"tests/core/version_updater/#test-structure","title":"Test Structure","text":"<pre><code># .github/workflows/test.core.action.version_updater.yml\non:\n  pull_request:\n    paths:\n      - 'actions/core/version_updater/**'\n      - '.github/workflows/core.action.version_updater.yml'\n      - '.github/workflows/test.core.action.version_updater.yml'\n  workflow_dispatch:\n</code></pre>"},{"location":"tests/core/version_updater/#test-cases","title":"Test Cases","text":""},{"location":"tests/core/version_updater/#1-yaml-file-update","title":"1. YAML File Update","text":"<p>Tests version updates in YAML files.</p> <pre><code>test-yaml-update:\n  steps:\n    - Create Test File\n      # Create YAML with version field\n    - Run Updater\n      # Input:\n      # - version: 'v2.0.0'\n      # - files: [\"test.yml\"]\n    - Verify Output\n      # Check file content and format\n</code></pre>"},{"location":"tests/core/version_updater/#2-json-file-update","title":"2. JSON File Update","text":"<p>Tests version updates in JSON files.</p> <pre><code>test-json-update:\n  steps:\n    - Create Test File\n      # Create JSON with version field\n    - Run Updater\n    - Verify Output\n      # Check JSON structure and format\n      # Use jq for comparison\n</code></pre>"},{"location":"tests/core/version_updater/#3-multiple-files-update","title":"3. Multiple Files Update","text":"<p>Tests updating multiple files simultaneously.</p> <pre><code>test-multiple-files:\n  steps:\n    - Create Test Files\n      # Create YAML and JSON files\n    - Run Updater\n      # Input: multiple files\n    - Verify Outputs\n      # Check all files updated correctly\n</code></pre>"},{"location":"tests/core/version_updater/#4-version-prefix-handling","title":"4. Version Prefix Handling","text":"<p>Tests prefix stripping and preservation.</p> <pre><code>test-keep-v-prefix:\n  steps:\n    - Create Test File\n    - Run Updater\n      # Input: strip_v_prefix: false\n    - Verify Output\n      # Check prefix maintained\n</code></pre>"},{"location":"tests/core/version_updater/#5-invalid-scenarios","title":"5. Invalid Scenarios","text":"<p>Tests error handling for various failure cases.</p> <pre><code>test-invalid-version:\n  steps:\n    - Run Updater with invalid version\n    - Verify failure\n\ntest-missing-file:\n  steps:\n    - Run Updater with nonexistent file\n    - Verify empty output array\n\ntest-no-version-field:\n  steps:\n    - Create file without version\n    - Run Updater\n    - Verify handling\n</code></pre>"},{"location":"tests/core/version_updater/#file-creation-templates","title":"File Creation Templates","text":""},{"location":"tests/core/version_updater/#yaml-test-file","title":"YAML Test File","text":"<pre><code>- name: Create Test YAML\n  run: |\n    echo \"version: 1.0.0\" &gt; test.yml\n</code></pre>"},{"location":"tests/core/version_updater/#json-test-file","title":"JSON Test File","text":"<pre><code>- name: Create Test JSON\n  run: |\n    echo '{\"version\": \"1.0.0\"}' &gt; test.json\n</code></pre>"},{"location":"tests/core/version_updater/#output-verification","title":"Output Verification","text":""},{"location":"tests/core/version_updater/#file-content-check","title":"File Content Check","text":"<pre><code>- name: Verify Output\n  run: |\n    content=$(cat test.yml)\n    if [[ \"$content\" != \"version: 2.0.0\" ]]; then\n      echo \"Expected 'version: 2.0.0', got '$content'\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_updater/#json-content-check","title":"JSON Content Check","text":"<pre><code>- name: Verify JSON Output\n  run: |\n    content=$(cat test.json | jq -c '.')\n    expected='{\"version\":\"2.0.0\"}'\n    if [[ \"$content\" != \"$expected\" ]]; then\n      echo \"Expected '$expected', got '$content'\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_updater/#output-format-check","title":"Output Format Check","text":"<pre><code>- name: Verify Output Format\n  run: |\n    output='${{ steps.updater.outputs.files }}'\n    if ! echo \"$output\" | jq -e . &gt;/dev/null 2&gt;&amp;1; then\n      echo \"Invalid JSON array output: $output\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_updater/#error-handling-verification","title":"Error Handling Verification","text":"<p>Tests verify the action:</p> <ol> <li>Validates input version format</li> <li>Handles missing/invalid files</li> <li>Reports file update status correctly</li> <li>Maintains consistent output format</li> </ol>"},{"location":"tests/core/version_updater/#common-patterns","title":"Common Patterns","text":""},{"location":"tests/core/version_updater/#test-setup","title":"Test Setup","text":"<pre><code>steps:\n  - uses: actions/checkout@v4\n  - name: Create Test File\n    run: |\n      # Create test files\n  - name: Run Version Updater\n    id: updater\n    uses: ./actions/core/version_updater\n    with:\n      # Test inputs\n</code></pre>"},{"location":"tests/core/version_updater/#output-verification_1","title":"Output Verification","text":"<pre><code>- name: Verify Outputs\n  run: |\n    # Check file contents\n    # Verify output format\n    # Validate results\n</code></pre>"},{"location":"tests/core/version_updater/#local-testing","title":"Local Testing","text":"<p>To run tests locally:</p> <ol> <li>Clone repository</li> <li>Navigate to action directory</li> <li>Run test workflow:</li> </ol> <pre><code>act pull_request -W .github/workflows/test.core.action.version_updater.yml\n</code></pre>"},{"location":"tests/core/version_updater/#adding-new-tests","title":"Adding New Tests","text":"<p>When adding tests:</p> <ol> <li>Follow existing patterns for setup/verification</li> <li>Include positive and negative test cases</li> <li>Verify all outputs and file states</li> <li>Document expected behaviors</li> <li>Include clean up steps if needed</li> </ol>"},{"location":"workflows/","title":"Workflows Overview","text":"<p>\ud83d\udcd6 For comprehensive documentation: Understanding Workflows Guide</p>"},{"location":"workflows/#structure","title":"Structure","text":"<pre><code>.github/workflows/\n\u251c\u2500\u2500 .flow.*.yml                # Private/internal flows for this repository\n\u251c\u2500\u2500 .core.*.yml                # Private/internal core workflows\n\u251c\u2500\u2500 core.action.*.yml          # Public atomic, reusable workflows\n\u251c\u2500\u2500 flow.*.yml                 # Public higher-level flows combining actions/workflows\n\u2514\u2500\u2500 test.*.yml                # Test workflows for actions/flows\n</code></pre>"},{"location":"workflows/#naming-convention","title":"Naming Convention","text":""},{"location":"workflows/#privateinternal-workflows","title":"Private/Internal Workflows","text":"<ul> <li>Pattern: <code>.flow.&lt;name&gt;.yml</code> or <code>.core.&lt;name&gt;.yml</code></li> <li>Purpose: Repository-specific workflows not intended for external use</li> <li>Visibility: Private to the repository (like private access modifiers)</li> <li>Example: <code>.flow.update_version.yml</code></li> </ul> <p>Note: Workflows prefixed with a dot (<code>.</code>) are internal to the repository and should not be referenced externally via <code>uses:</code> statements. These handle repository-specific operations.</p>"},{"location":"workflows/#core-action-workflows","title":"Core Action Workflows","text":"<ul> <li>Pattern: <code>core.action.&lt;name&gt;.yml</code></li> <li>Purpose: Atomic, reusable operations</li> <li>Visibility: Public - can be used externally</li> <li>Example: <code>core.action.version_calculator.yml</code></li> </ul>"},{"location":"workflows/#flow-workflows","title":"Flow Workflows","text":"<ul> <li>Pattern: <code>flow.&lt;name&gt;.yml</code></li> <li>Purpose: Combine core actions into higher-level operations</li> <li>Visibility: Public - can be used externally depending on exposed inputs/outputs</li> <li>Example: <code>flow.prepare_release.yml</code></li> </ul>"},{"location":"workflows/#test-workflows","title":"Test Workflows","text":"<ul> <li>Pattern: <code>test.&lt;type&gt;.&lt;name&gt;.yml</code></li> <li>Purpose: Validate actions and flows</li> <li>Example: <code>test.core.action.version_calculator.yml</code></li> </ul>"},{"location":"workflows/#implemented-workflows","title":"Implemented Workflows","text":""},{"location":"workflows/#core-action-workflows_1","title":"Core Action Workflows","text":""},{"location":"workflows/#version-calculator","title":"Version Calculator","text":"<ul> <li>Calculates next version based on Git tags</li> <li>Provides current version, next version, and commit count</li> <li>Used for automated version management</li> </ul>"},{"location":"workflows/#version-updater","title":"Version Updater","text":"<ul> <li>Updates version numbers across multiple files</li> <li>Supports YAML, JSON, and text files</li> <li>Maintains file formatting and structure</li> </ul>"},{"location":"workflows/#flow-workflows_1","title":"Flow Workflows","text":""},{"location":"workflows/#prepare-release","title":"Prepare Release","text":"<ul> <li>Combines version calculation and updating</li> <li>Manages release preparation process</li> <li>Creates release branches and PRs</li> </ul>"},{"location":"workflows/#test-workflows_1","title":"Test Workflows","text":""},{"location":"workflows/#version-calculator-tests","title":"Version Calculator Tests","text":"<ul> <li>Validates version calculation logic</li> <li>Tests with and without existing tags</li> <li>Verifies output format and error handling</li> </ul>"},{"location":"workflows/#version-updater-tests","title":"Version Updater Tests","text":"<ul> <li>Tests file updates across formats</li> <li>Validates prefix handling</li> <li>Verifies error conditions</li> </ul>"},{"location":"workflows/#usage-patterns","title":"Usage Patterns","text":""},{"location":"workflows/#using-core-action-workflows","title":"Using Core Action Workflows","text":"<pre><code>jobs:\n  calculate:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n</code></pre>"},{"location":"workflows/#using-flow-workflows","title":"Using Flow Workflows","text":"<pre><code>jobs:\n  prepare:\n    uses: deepworks-net/github.toolkit/.github/workflows/flow.prepare_release.yml@v1\n</code></pre>"},{"location":"workflows/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"workflows/#core-action-workflows_2","title":"Core Action Workflows","text":"<ol> <li>Single responsibility principle</li> <li>Clear input/output contract</li> <li>Error handling</li> <li>Comprehensive tests</li> </ol>"},{"location":"workflows/#flow-workflows_2","title":"Flow Workflows","text":"<ol> <li>Combine core actions</li> <li>Handle workflow state</li> <li>Provide higher-level operations</li> <li>Error recovery</li> </ol>"},{"location":"workflows/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Workflow Selection</p> <ul> <li>Use core actions for atomic operations</li> <li>Use flows for complex processes</li> <li>Keep responsibilities clear</li> </ul> </li> <li> <p>Version Management</p> <ul> <li>Tag releases appropriately</li> <li>Reference specific versions</li> <li>Document breaking changes</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Provide clear error messages</li> <li>Handle failure states</li> <li>Document error conditions</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Test all workflows</li> <li>Include error cases</li> <li>Verify outputs</li> </ul> </li> </ol>"},{"location":"workflows/create-release-tag/","title":"Create Release Tag Workflow","text":"<p>This workflow is part of the release automation process. It creates and pushes version tags when release PRs are merged to the main branch, triggering the final release publication.</p>"},{"location":"workflows/create-release-tag/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/create-tag.yml</code></p>"},{"location":"workflows/create-release-tag/#trigger","title":"Trigger","text":"<p>The workflow triggers when pull requests targeting the <code>main</code> branch are closed:</p> <pre><code>on:\n  pull_request:\n    branches:\n      - main\n    types: [closed]\n</code></pre>"},{"location":"workflows/create-release-tag/#conditions","title":"Conditions","text":"<p>The workflow only runs when:</p> <ol> <li>The PR was merged (not just closed)</li> <li>The source branch name starts with <code>release/v</code></li> </ol> <pre><code>if: github.event.pull_request.merged == true &amp;&amp; startsWith(github.event.pull_request.head.ref, 'release/v')\n</code></pre>"},{"location":"workflows/create-release-tag/#process","title":"Process","text":"<ol> <li>Checks out the repository</li> <li>Extracts version number from the release branch name</li> <li>Creates a git tag with that version</li> <li>Pushes the tag to the repository</li> </ol>"},{"location":"workflows/create-release-tag/#integration-points","title":"Integration Points","text":"<p>This workflow is part of the release process chain:</p> <ol> <li>Prepare Release workflow creates release branch (<code>release/vX.Y.Z</code>)</li> <li>PR is created targeting main branch</li> <li>PR is reviewed and merged</li> <li>Create Tag workflow (this one) creates version tag</li> <li>Release Drafter workflow publishes final release</li> </ol>"},{"location":"workflows/create-release-tag/#version-tag-format","title":"Version Tag Format","text":"<p>Tags created by this workflow match the release branch name:</p> <ul> <li>Branch: <code>release/v1.0.34</code></li> <li>Creates tag: <code>v1.0.34</code></li> </ul>"},{"location":"workflows/create-release-tag/#prerequisites","title":"Prerequisites","text":"<ol> <li>Source branch must:</li> <li>Start with <code>release/v</code></li> <li>Contain valid version number</li> <li> <p>Be merged to main branch</p> </li> <li> <p>Repository settings:</p> </li> <li>Allow workflows to create tags</li> <li>Proper access permissions set</li> </ol>"},{"location":"workflows/create-release-tag/#permissions","title":"Permissions","text":"<p>The workflow requires:</p> <ul> <li>Read access to repository</li> <li>Write access for tags</li> <li>Uses <code>GITHUB_TOKEN</code> with default permissions</li> </ul>"},{"location":"workflows/create-release-tag/#error-handling","title":"Error Handling","text":"<p>The workflow will fail if:</p> <ul> <li>PR is not actually merged</li> <li>Branch name doesn't match pattern</li> <li>Tag already exists</li> <li>Insufficient permissions</li> </ul>"},{"location":"workflows/create-release-tag/#usage-example","title":"Usage Example","text":"<ol> <li>Release PR is created:</li> </ol> <pre><code>release/v1.0.34 -&gt; main\n</code></pre> <ol> <li> <p>PR is merged to main</p> </li> <li> <p>Workflow automatically:</p> </li> </ol> <pre><code>git tag v1.0.34\ngit push origin v1.0.34\n</code></pre>"},{"location":"workflows/create-release-tag/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Tag Creation Fails</li> <li>Check if tag already exists</li> <li>Verify branch name format</li> <li> <p>Check workflow permissions</p> </li> <li> <p>Workflow Doesn't Trigger</p> </li> <li>Verify PR target is main branch</li> <li>Check branch name starts with <code>release/v</code></li> <li> <p>Ensure PR was merged, not just closed</p> </li> <li> <p>Push Fails</p> </li> <li>Check repository permissions</li> <li>Verify token access</li> <li>Review workflow logs</li> </ol>"},{"location":"workflows/create-release-tag/#related-workflows","title":"Related Workflows","text":"<ul> <li>Prepare Release</li> <li>Release Drafter</li> <li>Update Changelog</li> </ul>"},{"location":"workflows/create-release-tag/#next-steps","title":"Next Steps","text":"<p>After this workflow runs:</p> <ol> <li>Version tag is created</li> <li>Release Drafter workflow triggers</li> <li>Final release is published</li> </ol>"},{"location":"workflows/create-release-tag/#contributing","title":"Contributing","text":"<p>To modify this workflow:</p> <ol> <li>Fork the repository</li> <li>Edit <code>.github/workflows/create-tag.yml</code></li> <li>Test with a release branch</li> <li>Submit a pull request</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/","title":"MkDocs GitHub Pages Workflow","text":"<p>This reusable workflow automates the process of building and deploying MkDocs documentation to GitHub Pages. It can be used in any repository that uses MkDocs for documentation.</p>"},{"location":"workflows/mkdocs-gh-pages/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/mkdocs-gh-pages.yml</code></p>"},{"location":"workflows/mkdocs-gh-pages/#usage","title":"Usage","text":""},{"location":"workflows/mkdocs-gh-pages/#basic-usage","title":"Basic Usage","text":"<p>To use this workflow in your repository, create a workflow file with the following content:</p> <pre><code>name: Deploy Documentation\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre>"},{"location":"workflows/mkdocs-gh-pages/#advanced-usage","title":"Advanced Usage","text":"<p>You can customize the workflow behavior using input parameters:</p> <pre><code>name: Deploy Documentation\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n    with:\n      python-version: '3.11'\n      requirements-file: 'requirements.txt'\n      readme-source: 'README.md'\n      readme-destination: 'docs/repo/inc/README.md'\n      changelog-source: 'CHANGELOG'\n      changelog-destination: 'docs/repo/inc/CHANGELOG.md'\n      license-source: 'LICENSE'\n      license-destination: 'docs/repo/inc/LICENSE.md'\n</code></pre>"},{"location":"workflows/mkdocs-gh-pages/#input-parameters","title":"Input Parameters","text":"Parameter Description Required Default <code>python-version</code> Python version to use for the build No <code>3.x</code> <code>requirements-file</code> Path to the requirements.txt file No <code>requirements.txt</code> <code>readme-source</code> Source path for README No <code>README.md</code> <code>readme-destination</code> Destination path for README No <code>docs/repo/inc/README.md</code> <code>changelog-source</code> Source path for CHANGELOG No <code>CHANGELOG</code> <code>changelog-destination</code> Destination path for CHANGELOG No <code>docs/repo/inc/CHANGELOG.md</code> <code>license-source</code> Source path for LICENSE No <code>LICENSE</code> <code>license-destination</code> Destination path for LICENSE No <code>docs/repo/inc/LICENSE.md</code>"},{"location":"workflows/mkdocs-gh-pages/#workflow-details","title":"Workflow Details","text":"<p>The workflow performs the following steps:</p> <ol> <li>Checks out the repository with submodules</li> <li>Sets up Python environment</li> <li>Installs dependencies from requirements.txt</li> <li>Copies README.md (if it exists) to <code>docs/repo/inc</code> directory</li> <li>Copies CHANGELOG (if it exists) to <code>docs/repo/inc</code> directory</li> <li>Copies LICENSE (if it exists) to <code>docs/repo/inc</code> directory</li> <li>Builds and deploys MkDocs to GitHub Pages</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#requirements","title":"Requirements","text":"<p>To use this workflow, your repository needs:</p> <ol> <li>MkDocs configuration file (<code>mkdocs.yml</code>)</li> <li>Python dependencies file (<code>requirements.txt</code>) including MkDocs and any required theme/plugins</li> <li>GitHub Pages enabled in repository settings</li> <li>Proper permissions for GitHub Actions</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#example-requirementstxt","title":"Example requirements.txt","text":"<pre><code>mkdocs&gt;=1.6.1\nmkdocs-material&gt;=9.5.49\n</code></pre>"},{"location":"workflows/mkdocs-gh-pages/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workflows/mkdocs-gh-pages/#common-issues","title":"Common Issues","text":"<ol> <li>Build Fails: Ensure all required dependencies are listed in requirements.txt</li> <li>Deploy Fails: Check GitHub Pages settings in repository</li> <li>Missing README: Verify README.md exists at specified source path</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#workflow-logs","title":"Workflow Logs","text":"<p>To check workflow execution logs:</p> <ol> <li>Go to Actions tab in your repository</li> <li>Click on the workflow run</li> <li>Expand the deploy job to see detailed logs</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#security-considerations","title":"Security Considerations","text":"<ul> <li>The workflow runs with repository contents and GitHub token permissions</li> <li>No additional secrets are required for basic usage</li> <li>Ensure sensitive information is not exposed in documentation</li> </ul>"},{"location":"workflows/mkdocs-gh-pages/#contributing","title":"Contributing","text":"<p>Found a bug or have a suggestion? Please open an issue in the deepworks-net/github.actions repository.</p>"},{"location":"workflows/prepare-release/","title":"Prepare Release Workflow","text":"<p>This page documents the Prepare Release workflow located in the .github/workflows/prepare-release.yml file. This workflow automates the process of preparing a release branch and creating a pull request for review.</p>"},{"location":"workflows/prepare-release/#overview","title":"Overview","text":"<p>The Prepare Release workflow is triggered manually by tagging a commit with the tag: </p> <p><code>prep</code> </p> <p>It automates the following steps:</p> <ul> <li>Creates a release branch.</li> <li>Moves items from the \"Unreleased\" section of the changelog to a new versioned section.</li> <li>Removes the \"Unreleased\" section to finalize the changelog for release.</li> <li>Creates a pull request (PR) for the release branch.</li> </ul>"},{"location":"workflows/prepare-release/#trigger","title":"Trigger","text":"<p>To activate this workflow, push a tag with the prefix <code>prep-v</code>. For example:</p> <pre><code>git tag prep-v1.0.0\ngit push origin prep-v1.0.0\n</code></pre>"},{"location":"workflows/prepare-release/#workflow-steps","title":"Workflow Steps","text":""},{"location":"workflows/prepare-release/#1-check-out-repository","title":"1. Check Out Repository","text":"<p>The workflow checks out the repository code to the GitHub Actions runner to perform modifications.</p>"},{"location":"workflows/prepare-release/#2-create-release-branch","title":"2. Create Release Branch","text":"<p>A new branch named <code>release/{version}</code> is created. The version is extracted from the tag name (e.g., <code>prep-v1.0.0</code> creates <code>release/1.0.0</code>).</p>"},{"location":"workflows/prepare-release/#3-update-changelog","title":"3. Update Changelog","text":"<p>The workflow:</p> <ul> <li>Moves all changelog items under the \"Unreleased\" section to a new version section (e.g., <code>## [1.0.0]</code>).</li> <li>Adds a date to the new section (based on the workflow run date).</li> <li>Removes the \"Unreleased\" section.</li> </ul>"},{"location":"workflows/prepare-release/#4-commit-changes","title":"4. Commit Changes","text":"<p>Commits the updated changelog to the new release branch with a message like:</p> <pre><code>chore: prepare release 1.0.0\n</code></pre>"},{"location":"workflows/prepare-release/#5-create-pull-request","title":"5. Create Pull Request","text":"<p>Creates a PR from the release branch to the <code>main</code> branch. The PR title includes the version, such as:</p> <p>makefile</p> <p>Copy code</p> <p><code>Release: 1.0.0</code></p>"},{"location":"workflows/prepare-release/#requirements","title":"Requirements","text":""},{"location":"workflows/prepare-release/#repository-setup","title":"Repository Setup","text":"<ol> <li>A <code>develop</code> branch is required for ongoing development.</li> <li>A <code>Changelog.md</code> file must exist in the repository root. If not present, the workflow will create one.</li> </ol>"},{"location":"workflows/prepare-release/#permissions","title":"Permissions","text":"<ul> <li>Write access to create branches and push changes.</li> <li>Access to create and manage PRs.</li> </ul>"},{"location":"workflows/prepare-release/#usage-example","title":"Usage Example","text":"<ol> <li>Ensure your changelog has an \"Unreleased\" section with pending changes.</li> <li>Tag the repository with a release preparation version:</li> </ol> <p>bash</p> <p>Copy code</p> <p><code>git tag prep-v2.1.0 git push origin prep-v2.1.0</code></p> <ol> <li>The workflow will:<ul> <li>Create the branch <code>release/2.1.0</code>.</li> <li>Update the changelog.</li> <li>Open a PR for review and approval.</li> </ul> </li> </ol>"},{"location":"workflows/prepare-release/#outputs","title":"Outputs","text":"<ul> <li>Release Branch: <code>release/{version}</code> (e.g., <code>release/2.1.0</code>).</li> <li>Updated Changelog: Moves changes to the new version section with a date.</li> <li>Pull Request: A PR for merging the release branch into <code>main</code>.</li> </ul>"},{"location":"workflows/prepare-release/#notes","title":"Notes","text":"<ul> <li>If the changelog format deviates from the expected structure, the workflow may fail.</li> <li>Manual edits to the changelog after workflow execution are discouraged to maintain consistency.</li> </ul>"},{"location":"workflows/prepare-release/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workflows/prepare-release/#workflow-fails","title":"Workflow Fails","text":"<ol> <li>Check the workflow logs for details.</li> <li>Verify the tag format (<code>prep-v{version}</code>) and changelog structure.</li> </ol>"},{"location":"workflows/prepare-release/#missing-changelog","title":"Missing Changelog","text":"<p>If the <code>Changelog.md</code> file is missing, the workflow will create one with a default template.</p>"},{"location":"workflows/prepare-release/#contributing","title":"Contributing","text":"<p>For improvements or fixes to this workflow, follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a branch from <code>develop</code>.</li> <li>Submit a PR with a detailed description of your changes.</li> </ol>"},{"location":"workflows/prepare-release/#license","title":"License","text":"<p>This workflow is part of the Deepworks project and is licensed under the MIT License.</p> <p>For more details, visit the repository: deepworks-net/github.actions</p>"},{"location":"workflows/release-drafter/","title":"Release Drafter Workflow","text":"<p>This workflow automates the creation and management of GitHub Releases. It maintains a draft release that updates automatically with new changes. It also allows other workflows to trigger release operations via a workflow call.</p>"},{"location":"workflows/release-drafter/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/release-drafter.yml</code></p>"},{"location":"workflows/release-drafter/#triggers","title":"Triggers","text":"<p>The workflow responds to two types of events:</p> <ol> <li> <p>Push to the <code>develop</code> branch:</p> <ul> <li>Updates the draft release.</li> <li>Calculates the next version using a centralized version calculation.</li> <li>Updates release notes dynamically.</li> </ul> </li> <li> <p>Workflow call:</p> <ul> <li>Allows other workflows to trigger release operations.</li> <li>Supports custom tag names and options.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#version-calculation","title":"Version Calculation","text":"<p>The workflow calculates the next version number using the version_calculation Action, based on:</p> <ul> <li>The latest version tag (<code>vX.Y.Z</code> format).</li> <li>The number of commits since the last tag. This ensures consistent and centralized versioning logic across workflows.</li> </ul> <p>Example:</p> <ul> <li>Latest version: <code>v1.0.16</code></li> <li>3 new commits.</li> <li>Next calculated version: <code>v1.0.19</code>.</li> </ul>"},{"location":"workflows/release-drafter/#jobs","title":"Jobs","text":""},{"location":"workflows/release-drafter/#1-update-release-draft","title":"1. Update Release Draft","text":"<p>Triggered when changes are pushed to the <code>develop</code> branch:</p> <pre><code>jobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n</code></pre> <p>Steps:</p> <ol> <li>Checkout Repository:<ul> <li>Ensures the <code>develop</code> branch is checked out.</li> <li>Fetches the full Git history for accurate version calculations.</li> </ul> </li> <li>Debugging Steps:<ul> <li>Confirms the repository structure and Action files are present.</li> </ul> </li> <li>Calculate Next Version:<ul> <li>Uses the centralized <code>version_calculation</code> Action.</li> </ul> </li> <li>Set Output for Version:<ul> <li>Saves the calculated version as a workflow output for future steps.</li> </ul> </li> <li>Draft Release:<ul> <li>Updates the draft release with the calculated version and release notes.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#2-publish-release-conditional","title":"2. Publish Release (Conditional)","text":"<p>This job is configured to publish a final release if the workflow is triggered with a <code>refs/tags/v*</code> reference. It is conditional on such an event being passed to the workflow:</p> <pre><code>jobs:\n  publish_release:\n    runs-on: ubuntu-latest\n    if: startsWith(github.ref, 'refs/tags/v')\n</code></pre> <p>Steps:</p> <ol> <li>Checkout Repository:<ul> <li>Ensures the correct repository and tag are available.</li> </ul> </li> <li>Publish Final Release:<ul> <li>Publishes the release using the <code>release-drafter/release-drafter@v6</code> Action.</li> <li>Uses the provided tag to finalize release notes.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#input-parameters","title":"Input Parameters","text":"Parameter Description Required Default <code>tag-name</code> Release tag name No Current tag <code>draft</code> Create as draft No <code>false</code>"},{"location":"workflows/release-drafter/#secrets","title":"Secrets","text":"Secret Description Required Default <code>token</code> GitHub token No <code>GITHUB_TOKEN</code>"},{"location":"workflows/release-drafter/#release-format","title":"Release Format","text":""},{"location":"workflows/release-drafter/#draft-release","title":"Draft Release","text":"<pre><code>## Draft Release v1.0.X\n\n[Automatically populated release notes]\n\nSee the [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for more details.\n</code></pre>"},{"location":"workflows/release-drafter/#integration","title":"Integration","text":"<p>This workflow integrates with:</p> <ul> <li>Centralized version calculation logic.</li> <li>Draft release management.</li> <li>Optional release publishing.</li> </ul>"},{"location":"workflows/release-drafter/#permissions","title":"Permissions","text":"<p>Required permissions:</p> <pre><code>permissions:\n  contents: write\n</code></pre>"},{"location":"workflows/release-drafter/#usage-examples","title":"Usage Examples","text":""},{"location":"workflows/release-drafter/#as-part-of-release-process","title":"As Part of Release Process","text":"<ol> <li>Push changes to the <code>develop</code> branch:<ul> <li>Updates the draft release.</li> <li>Dynamically calculates the next version.</li> <li>Updates release notes.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#called-from-another-workflow","title":"Called from Another Workflow","text":"<pre><code>jobs:\n  release:\n    uses: deepworks-net/github.actions/.github/workflows/release-drafter.yml@main\n    with:\n      tag-name: 'v1.0.0'\n      draft: true\n</code></pre>"},{"location":"workflows/release-drafter/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workflows/release-drafter/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li> <p>Version Calculation Fails:</p> <ul> <li>Ensure the repository has at least one version tag.</li> <li>Verify the <code>version_calculation</code> Action is properly configured.</li> </ul> </li> <li> <p>Draft Not Updating:</p> <ul> <li>Ensure the branch name matches <code>develop</code>.</li> <li>Verify the workflow has write permissions.</li> <li>Check the release-drafter configuration.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#related-documentation","title":"Related Documentation","text":"<ul> <li>release-drafter action</li> <li>Semantic Versioning</li> <li>GitHub Releases</li> </ul>"},{"location":"workflows/update-changelog/","title":"Update Changelog Workflow","text":"<p>This workflow automatically updates the repository's CHANGELOG.md file when pull requests are merged into the develop branch.</p>"},{"location":"workflows/update-changelog/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/update-changelog.yml</code></p>"},{"location":"workflows/update-changelog/#trigger","title":"Trigger","text":"<p>The workflow is triggered when a pull request targeting the <code>develop</code> branch is closed:</p> <pre><code>on:\n  pull_request:\n    branches:\n      - develop\n    types: [closed]\n</code></pre> <p>The workflow will only run if the pull request was actually merged, not just closed:</p> <pre><code>jobs:\n  update-changelog:\n    if: github.event.pull_request.merged == true\n</code></pre>"},{"location":"workflows/update-changelog/#changelog-format","title":"Changelog Format","text":"<p>The workflow expects and maintains a changelog in the following format:</p> <pre><code>## **MM/DD/YYYY - Unreleased**\n- PR #123: Description of change\n- PR #124: Another change\n\n## **MM/DD/YYYY - v1.0.0**\n- Previous release changes...\n</code></pre>"},{"location":"workflows/update-changelog/#process","title":"Process","text":"<p>The workflow performs the following steps:</p> <ol> <li>Checks out the repository's develop branch</li> <li>Processes the CHANGELOG.md file:<ul> <li>If an \"Unreleased\" section exists, adds the new PR entry to it</li> <li>If no \"Unreleased\" section exists, creates one with today's date</li> </ul> </li> <li>Commits and pushes the updated changelog</li> </ol>"},{"location":"workflows/update-changelog/#entry-format","title":"Entry Format","text":"<p>Each changelog entry follows the format:</p> <pre><code>- PR #{number}: {pull request title}\n</code></pre>"},{"location":"workflows/update-changelog/#usage","title":"Usage","text":"<p>The workflow runs automatically when PRs are merged. No manual intervention is required.</p>"},{"location":"workflows/update-changelog/#prerequisites","title":"Prerequisites","text":"<ol> <li>Repository must have a <code>CHANGELOG.md</code> file in the root directory</li> <li>The file should follow the expected format</li> <li>PRs should be merged into the <code>develop</code> branch</li> </ol>"},{"location":"workflows/update-changelog/#pull-request-requirements","title":"Pull Request Requirements","text":"<ul> <li>PRs must target the <code>develop</code> branch</li> <li>PR title should be descriptive as it will be used in the changelog</li> <li>PR must be merged (not just closed)</li> </ul>"},{"location":"workflows/update-changelog/#examples","title":"Examples","text":""},{"location":"workflows/update-changelog/#pr-title-examples","title":"PR Title Examples","text":"<p>Good PR titles that make meaningful changelog entries:</p> <pre><code>Add user authentication system\nFix memory leak in data processing\nUpdate dependencies to latest versions\n</code></pre> <p>Poor PR titles to avoid:</p> <pre><code>Fix bug\nUpdate code\nWIP: Changes\n</code></pre>"},{"location":"workflows/update-changelog/#changelog-entry-examples","title":"Changelog Entry Examples","text":"<p>The workflow will create entries like:</p> <pre><code>## **01/02/2025 - Unreleased**\n- PR #123: Add user authentication system\n- PR #124: Fix memory leak in data processing\n- PR #125: Update dependencies to latest versions\n</code></pre>"},{"location":"workflows/update-changelog/#permissions","title":"Permissions","text":"<p>The workflow requires:</p> <ul> <li>Read access to pull request metadata</li> <li>Write access to the repository (for pushing changes)</li> </ul> <p>It uses the <code>GITHUB_TOKEN</code> secret which is automatically provided by GitHub Actions.</p>"},{"location":"workflows/update-changelog/#error-handling","title":"Error Handling","text":"<p>The workflow includes several safeguards:</p> <ol> <li>Only runs on merged PRs</li> <li>Creates \"Unreleased\" section if missing</li> <li>Checks for changes before committing</li> <li>Uses [skip ci] in commit message to prevent CI loops</li> </ol>"},{"location":"workflows/update-changelog/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Changelog Not Updated</p> <ul> <li>Verify PR was actually merged</li> <li>Check if PR targeted develop branch</li> <li>Verify CHANGELOG.md exists in root directory</li> </ul> </li> <li> <p>Push Failed</p> <ul> <li>Check if workflow has write permissions</li> <li>Verify branch protections allow GitHub Actions to push</li> </ul> </li> <li> <p>Format Issues</p> <ul> <li>Ensure CHANGELOG.md follows expected format</li> <li>Check for manual modifications that might break format</li> </ul> </li> </ol>"},{"location":"workflows/update-changelog/#contributing","title":"Contributing","text":"<p>To modify this workflow:</p> <ol> <li>Fork the repository</li> <li>Edit <code>.github/workflows/update-changelog.yml</code></li> <li>Test changes by merging PRs to your fork</li> <li>Submit a pull request</li> </ol>"},{"location":"workflows/update-changelog/#related-documentation","title":"Related Documentation","text":"<ul> <li>GitHub Actions documentation</li> <li>Keep a Changelog</li> <li>Git documentation</li> </ul>"},{"location":"workflows/core/version_calculator/","title":"Version Calculator Workflow","text":""},{"location":"workflows/core/version_calculator/#overview","title":"Overview","text":"<p>The Version Calculator workflow provides a reusable workflow for calculating version numbers based on Git tags and commit history. It wraps the Version Calculator core action for easy integration into external repositories.</p>"},{"location":"workflows/core/version_calculator/#usage","title":"Usage","text":"<pre><code>name: Calculate Version\n\non:\n  workflow_dispatch:  # Manual trigger\n  push:              # Auto trigger\n\njobs:\n  get-version:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n    with:\n      default_version: \"v0.1.0\"  # Optional\n      version_prefix: \"v\"        # Optional\n      tag_pattern: \"v*\"         # Optional\n</code></pre>"},{"location":"workflows/core/version_calculator/#inputs","title":"Inputs","text":""},{"location":"workflows/core/version_calculator/#default_version-optional","title":"<code>default_version</code> (Optional)","text":"<ul> <li>Description: Default version to use when no tags exist</li> <li>Type: String</li> <li>Default: <code>v0.1.0</code></li> <li>Note: Must match format <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> </ul>"},{"location":"workflows/core/version_calculator/#version_prefix-optional","title":"<code>version_prefix</code> (Optional)","text":"<ul> <li>Description: Prefix for version tags</li> <li>Type: String</li> <li>Default: <code>v</code></li> <li>Example: <code>'v'</code> for v1.0.0 or <code>'ver'</code> for ver1.0.0</li> </ul>"},{"location":"workflows/core/version_calculator/#tag_pattern-optional","title":"<code>tag_pattern</code> (Optional)","text":"<ul> <li>Description: Pattern to match version tags</li> <li>Type: String</li> <li>Default: <code>v*</code></li> <li>Note: Should align with version_prefix</li> </ul>"},{"location":"workflows/core/version_calculator/#outputs","title":"Outputs","text":""},{"location":"workflows/core/version_calculator/#next_version","title":"<code>next_version</code>","text":"<ul> <li>Description: The calculated next version</li> <li>Type: String</li> <li>Format: <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> </ul>"},{"location":"workflows/core/version_calculator/#current_version","title":"<code>current_version</code>","text":"<ul> <li>Description: Current version (latest tag or default)</li> <li>Type: String</li> <li>Format: <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> </ul>"},{"location":"workflows/core/version_calculator/#commit_count","title":"<code>commit_count</code>","text":"<ul> <li>Description: Number of commits since current version</li> <li>Type: Number</li> <li>Note: Returns 0 when using default_version</li> </ul>"},{"location":"workflows/core/version_calculator/#behavior","title":"Behavior","text":""},{"location":"workflows/core/version_calculator/#initial-run-no-tags","title":"Initial Run (No Tags)","text":"<pre><code>Inputs:\n  default_version: \"v0.1.0\"\n  version_prefix: \"v\"\n  tag_pattern: \"v*\"\n\nOutputs:\n  current_version: \"v0.1.0\"\n  next_version: \"v0.1.0\"\n  commit_count: 0\n</code></pre>"},{"location":"workflows/core/version_calculator/#with-existing-tag","title":"With Existing Tag","text":"<pre><code># Repository state:\n# - Latest tag: v1.0.0\n# - 2 new commits\n\nOutputs:\n  current_version: \"v1.0.0\"\n  next_version: \"v1.0.2\"\n  commit_count: 2\n</code></pre>"},{"location":"workflows/core/version_calculator/#custom-prefix","title":"Custom Prefix","text":"<pre><code>Inputs:\n  default_version: \"ver0.1.0\"\n  version_prefix: \"ver\"\n  tag_pattern: \"ver*\"\n\n# Repository state:\n# - Latest tag: ver1.0.0\n# - 1 new commit\n\nOutputs:\n  current_version: \"ver1.0.0\"\n  next_version: \"ver1.0.1\"\n  commit_count: 1\n</code></pre>"},{"location":"workflows/core/version_calculator/#example-implementations","title":"Example Implementations","text":""},{"location":"workflows/core/version_calculator/#basic-usage","title":"Basic Usage","text":"<pre><code>jobs:\n  version:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n\n  build:\n    needs: version\n    steps:\n      - name: Use Version\n        run: |\n          echo \"Next version: ${{ needs.version.outputs.next_version }}\"\n          echo \"Current version: ${{ needs.version.outputs.current_version }}\"\n          echo \"Commit count: ${{ needs.version.outputs.commit_count }}\"\n</code></pre>"},{"location":"workflows/core/version_calculator/#custom-versioning","title":"Custom Versioning","text":"<pre><code>jobs:\n  version:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n    with:\n      default_version: \"ver0.1.0\"\n      version_prefix: \"ver\"\n      tag_pattern: \"ver*\"\n</code></pre>"},{"location":"workflows/core/version_calculator/#error-handling","title":"Error Handling","text":"<p>The workflow handles errors from the core action:</p> <ol> <li> <p>Input Validation</p> <ul> <li>Invalid version format</li> <li>Mismatched prefix/default_version</li> <li>Invalid patterns</li> </ul> </li> <li> <p>Git Operations</p> <ul> <li>Repository access issues</li> <li>Tag retrieval failures</li> <li>Configuration problems</li> </ul> </li> <li> <p>Version Calculation</p> <ul> <li>Invalid tag formats</li> <li>Counting errors</li> <li>Pattern matching failures</li> </ul> </li> </ol>"},{"location":"workflows/core/version_updater/","title":"Version Updater Workflow","text":""},{"location":"workflows/core/version_updater/#overview","title":"Overview","text":"<p>The Version Updater workflow provides a reusable workflow for updating version numbers across multiple files in a repository. It wraps the Version Updater core action, ensuring consistent version updates across different file types.</p>"},{"location":"workflows/core/version_updater/#usage","title":"Usage","text":"<pre><code>jobs:\n  update:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: 'v2.0.0'\n      files: |\n        \"README.md\"\n        \"package.json\"\n      strip_v_prefix: true\n</code></pre>"},{"location":"workflows/core/version_updater/#inputs","title":"Inputs","text":""},{"location":"workflows/core/version_updater/#version","title":"<code>version</code>","text":"<ul> <li>Description: Version number to set</li> <li>Required: Yes</li> <li>Format: <code>v1.2.3</code> or <code>1.2.3</code></li> <li>Example: <code>'v2.0.0'</code></li> </ul>"},{"location":"workflows/core/version_updater/#files","title":"<code>files</code>","text":"<ul> <li>Description: Files to update</li> <li>Required: Yes</li> <li>Format: Multi-line string, one file per line</li> <li>Example:</li> </ul> <pre><code>files: |\n  \"package.json\"\n  \"version.yml\"\n</code></pre>"},{"location":"workflows/core/version_updater/#strip_v_prefix","title":"<code>strip_v_prefix</code>","text":"<ul> <li>Description: Remove 'v' prefix when updating files</li> <li>Required: No</li> <li>Default: <code>true</code></li> <li>Type: boolean</li> </ul>"},{"location":"workflows/core/version_updater/#outputs","title":"Outputs","text":""},{"location":"workflows/core/version_updater/#files_1","title":"<code>files</code>","text":"<ul> <li>Description: JSON array of successfully updated files</li> <li>Type: String (JSON array)</li> <li>Example: <code>'[\"package.json\", \"version.yml\"]'</code></li> </ul>"},{"location":"workflows/core/version_updater/#examples","title":"Examples","text":""},{"location":"workflows/core/version_updater/#basic-usage","title":"Basic Usage","text":"<pre><code>name: Update Version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'New version'\n        required: true\n        type: string\n\njobs:\n  update:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: ${{ inputs.version }}\n      files: |\n        \"package.json\"\n        \"version.yml\"\n</code></pre>"},{"location":"workflows/core/version_updater/#integration-with-version-calculator","title":"Integration with Version Calculator","text":"<pre><code>name: Release Version Update\n\njobs:\n  calculate:\n    uses: ./.github/workflows/core.action.version_calculator.yml@v1\n\n  update:\n    needs: calculate\n    uses: ./.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: ${{ needs.calculate.outputs.next_version }}\n      files: |\n        \"package.json\"\n        \"version.yml\"\n</code></pre>"},{"location":"workflows/core/version_updater/#keep-version-prefix","title":"Keep Version Prefix","text":"<pre><code>jobs:\n  update:\n    uses: ./.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: 'v2.0.0'\n      files: |\n        \"config.yml\"\n      strip_v_prefix: false\n</code></pre>"},{"location":"workflows/core/version_updater/#error-handling","title":"Error Handling","text":"<p>The workflow handles several error cases:</p> <ol> <li> <p>Input Validation</p> <ul> <li>Invalid version format</li> <li>Empty files list</li> <li>Invalid file paths</li> </ul> </li> <li> <p>File Operations</p> <ul> <li>Missing files</li> <li>Permission issues</li> <li>Invalid file formats</li> </ul> </li> <li> <p>Version Updates</p> <ul> <li>No version fields found</li> <li>Update failures</li> </ul> </li> </ol>"},{"location":"workflows/core/version_updater/#error-outputs","title":"Error Outputs","text":"<ul> <li>Failed updates result in empty file array</li> <li>Exit code 1 indicates failures</li> <li>Detailed error messages in logs</li> </ul>"},{"location":"workflows/core/version_updater/#behavior-matrix","title":"Behavior Matrix","text":""},{"location":"workflows/core/version_updater/#all-files-updated","title":"All Files Updated","text":"<pre><code># Input\nversion: 'v2.0.0'\nfiles: |\n  \"file1.yml\"\n  \"file2.json\"\n\n# Output\nfiles: '[\"file1.yml\", \"file2.json\"]'\nexit_code: 0\n</code></pre>"},{"location":"workflows/core/version_updater/#partial-update","title":"Partial Update","text":"<pre><code># Input\nversion: 'v2.0.0'\nfiles: |\n  \"exists.json\"\n  \"missing.yml\"\n\n# Output\nfiles: '[\"exists.json\"]'\nexit_code: 1\n</code></pre>"},{"location":"workflows/core/version_updater/#no-files-updated","title":"No Files Updated","text":"<pre><code># Input\nversion: 'v2.0.0'\nfiles: |\n  \"missing.json\"\n\n# Output\nfiles: '[]'\nexit_code: 1\n</code></pre>"},{"location":"workflows/core/version_updater/#implementation-details","title":"Implementation Details","text":"<ol> <li> <p>Checkout</p> <ul> <li>Fetches repository content</li> <li>No depth limitation</li> <li>Main branch checkout</li> </ul> </li> <li> <p>Version Update</p> <ul> <li>Preserves file formatting</li> <li>Maintains file structure</li> <li>Handles multiple file types</li> </ul> </li> <li> <p>Output Handling</p> <ul> <li>JSON array format</li> <li>Consistent error reporting</li> <li>Clear success/failure indication</li> </ul> </li> </ol>"}]}